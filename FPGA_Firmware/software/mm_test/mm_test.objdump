
mm_test.elf:     file format elf32-littlenios2
mm_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001808 memsz 0x00001808 flags r-x
    LOAD off    0x00002828 vaddr 0x00009828 paddr 0x00009afc align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002dd0 vaddr 0x00009dd0 paddr 0x00009dd0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002afc  2**0
                  CONTENTS
  2 .text         000017c4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  000097e4  000097e4  000027e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00009828  00009afc  00002828  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009dd0  00009dd0  00002dd0  2**2
                  ALLOC, SMALL_DATA
  6 .ram_onchip   00000000  00009de0  00009de0  00002afc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004b8  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006104  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020ea  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000025b7  00000000  00000000  0000b1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008c0  00000000  00000000  0000d780  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000138a  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000065f  00000000  00000000  0000f3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000fa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  0000fa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000111c2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  000111c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000111cb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000111cc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000111cd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000111d5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000111d9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000111e2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000111eb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000068  00000000  00000000  00011205  2**0
                  CONTENTS, READONLY
 29 .jdi          000049d0  00000000  00000000  0001126d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062e99  00000000  00000000  00015c3d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000097e4 l    d  .rodata	00000000 .rodata
00009828 l    d  .rwdata	00000000 .rwdata
00009dd0 l    d  .bss	00000000 .bss
00009de0 l    d  .ram_onchip	00000000 .ram_onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mm_test_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009828 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000082a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000840c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008540 l     F .text	00000034 alt_dev_reg
00009908 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_close.c
00008a28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008b7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008ba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008d7c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008ebc l     F .text	0000003c alt_get_errno
00008ef8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008390 g     F .text	0000007c alt_main
000080e4 g     F .text	00000080 _puts_r
00009afc g       *ABS*	00000000 __flash_rwdata_start
00009174 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009dd0 g     O .bss	00000004 errno
00009dd8 g     O .bss	00000004 alt_argv
00011adc g       *ABS*	00000000 _gp
0000995c g     O .rwdata	00000180 alt_fd_list
00009198 g     F .text	00000090 alt_find_dev
00008e40 g     F .text	0000007c alt_io_redirect
000097e4 g       *ABS*	00000000 __DTOR_END__
00008164 g     F .text	00000014 puts
000086ac g     F .text	000000ec altera_avalon_jtag_uart_read
000093d4 g     F .text	00000090 alt_icache_flush
00009af4 g     O .rwdata	00000004 alt_max_fd
00009adc g     O .rwdata	00000004 _global_impure_ptr
00009de0 g       *ABS*	00000000 __bss_end
00009934 g     O .rwdata	00000028 alt_dev_null
00008b34 g     F .text	00000048 alt_dcache_flush_all
00009afc g       *ABS*	00000000 __ram_rwdata_end
00009aec g     O .rwdata	00000008 alt_dev_list
00008448 g     F .text	000000f8 write
00009828 g       *ABS*	00000000 __ram_rodata_end
00009de0 g       *ABS*	00000000 end
000097e4 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008798 g     F .text	00000094 altera_avalon_jtag_uart_write
00008000 g       *ABS*	00000000 __alt_mem_ram_onchip
00009620 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000004c _start
0000882c g     F .text	000001fc alt_avalon_spi_command
000085ac g     F .text	00000040 alt_sys_init
000094c8 g     F .text	00000158 __register_exitproc
00009828 g       *ABS*	00000000 __ram_rwdata_start
000097e4 g       *ABS*	00000000 __ram_rodata_start
000085ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009330 g     F .text	000000a4 alt_get_fd
00009498 g     F .text	00000030 memcmp
00009de0 g       *ABS*	00000000 __alt_stack_base
00009228 g     F .text	00000108 alt_find_file
00008be4 g     F .text	000000a4 alt_dev_llist_insert
00008194 g     F .text	000000b8 __sfvwrite_small_dev
00009dd0 g       *ABS*	00000000 __bss_start
0000806c g     F .text	00000078 main
00009ddc g     O .bss	00000004 alt_envp
0000864c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009af8 g     O .rwdata	00000004 alt_errno
000097e4 g       *ABS*	00000000 __CTOR_END__
000097e4 g       *ABS*	00000000 __flash_rodata_start
000097e4 g       *ABS*	00000000 __DTOR_LIST__
00008574 g     F .text	00000038 alt_irq_init
00009110 g     F .text	00000064 alt_release_fd
00009464 g     F .text	00000014 atexit
0000824c g     F .text	00000058 _write_r
00009ae0 g     O .rwdata	00000004 _impure_ptr
00009dd4 g     O .bss	00000004 alt_argc
00008ce8 g     F .text	00000060 _do_dtors
00009ae4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009afc g       *ABS*	00000000 _edata
00009de0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009478 g     F .text	00000020 exit
0000d000 g       *ABS*	00000000 __alt_data_end
000097b0 g     F .text	00000034 _exit
00008178 g     F .text	0000001c strlen
00008fbc g     F .text	00000154 open
00008d48 g     F .text	00000034 alt_icache_flush_all
00008c88 g     F .text	00000060 _do_ctors
00008a64 g     F .text	000000d0 close
0000830c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff6528>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_gp+0xffff6548>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d686b714 	ori	gp,gp,6876
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a77414 	ori	r2,r2,40400

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e77814 	ori	r3,r3,40416

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_gp+0xffff6578>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	000830c0 	call	830c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00083900 	call	8390 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <_gp+0xffff658c>

0000806c <main>:
#include <stdint.h>
#include "system.h"
#include "altera_avalon_spi.h"

int main()
{
    806c:	defffa04 	addi	sp,sp,-24
    8070:	dfc00515 	stw	ra,20(sp)
    8074:	df000415 	stw	fp,16(sp)
    8078:	df000404 	addi	fp,sp,16
  printf("Hello from Nios II!\n");
    807c:	01000074 	movhi	r4,1
    8080:	2125f904 	addi	r4,r4,-26652
    8084:	00081640 	call	8164 <puts>

  uint8_t spi_data_rx;
  uint8_t data[3];
  data[0] = 0xAB;
    8088:	00bfeac4 	movi	r2,-85
    808c:	e0bfff45 	stb	r2,-3(fp)
  data[1] = 0xAF;
    8090:	00bfebc4 	movi	r2,-81
    8094:	e0bfff85 	stb	r2,-2(fp)
  data[2] = 0x4D;
    8098:	00801344 	movi	r2,77
    809c:	e0bfffc5 	stb	r2,-1(fp)

  alt_avalon_spi_command(SPI_BASE,0,3,&data,0,&spi_data_rx,0);
    80a0:	e0bfff44 	addi	r2,fp,-3
    80a4:	d8000215 	stw	zero,8(sp)
    80a8:	e0ffff04 	addi	r3,fp,-4
    80ac:	d8c00115 	stw	r3,4(sp)
    80b0:	d8000015 	stw	zero,0(sp)
    80b4:	100f883a 	mov	r7,r2
    80b8:	018000c4 	movi	r6,3
    80bc:	000b883a 	mov	r5,zero
    80c0:	01000074 	movhi	r4,1
    80c4:	21030004 	addi	r4,r4,3072
    80c8:	000882c0 	call	882c <alt_avalon_spi_command>


  return 0;
    80cc:	0005883a 	mov	r2,zero
}
    80d0:	e037883a 	mov	sp,fp
    80d4:	dfc00117 	ldw	ra,4(sp)
    80d8:	df000017 	ldw	fp,0(sp)
    80dc:	dec00204 	addi	sp,sp,8
    80e0:	f800283a 	ret

000080e4 <_puts_r>:
    80e4:	defffd04 	addi	sp,sp,-12
    80e8:	dc000015 	stw	r16,0(sp)
    80ec:	2021883a 	mov	r16,r4
    80f0:	2809883a 	mov	r4,r5
    80f4:	dfc00215 	stw	ra,8(sp)
    80f8:	dc400115 	stw	r17,4(sp)
    80fc:	2823883a 	mov	r17,r5
    8100:	00081780 	call	8178 <strlen>
    8104:	81400217 	ldw	r5,8(r16)
    8108:	01000074 	movhi	r4,1
    810c:	21206504 	addi	r4,r4,-32364
    8110:	29000115 	stw	r4,4(r5)
    8114:	100f883a 	mov	r7,r2
    8118:	880d883a 	mov	r6,r17
    811c:	8009883a 	mov	r4,r16
    8120:	00081940 	call	8194 <__sfvwrite_small_dev>
    8124:	00ffffc4 	movi	r3,-1
    8128:	10c00926 	beq	r2,r3,8150 <_puts_r+0x6c>
    812c:	81400217 	ldw	r5,8(r16)
    8130:	01800074 	movhi	r6,1
    8134:	01c00044 	movi	r7,1
    8138:	28800117 	ldw	r2,4(r5)
    813c:	31a5fe04 	addi	r6,r6,-26632
    8140:	8009883a 	mov	r4,r16
    8144:	103ee83a 	callr	r2
    8148:	10bfffe0 	cmpeqi	r2,r2,-1
    814c:	0085c83a 	sub	r2,zero,r2
    8150:	dfc00217 	ldw	ra,8(sp)
    8154:	dc400117 	ldw	r17,4(sp)
    8158:	dc000017 	ldw	r16,0(sp)
    815c:	dec00304 	addi	sp,sp,12
    8160:	f800283a 	ret

00008164 <puts>:
    8164:	00800074 	movhi	r2,1
    8168:	10a6b804 	addi	r2,r2,-25888
    816c:	200b883a 	mov	r5,r4
    8170:	11000017 	ldw	r4,0(r2)
    8174:	00080e41 	jmpi	80e4 <_puts_r>

00008178 <strlen>:
    8178:	2005883a 	mov	r2,r4
    817c:	10c00007 	ldb	r3,0(r2)
    8180:	18000226 	beq	r3,zero,818c <strlen+0x14>
    8184:	10800044 	addi	r2,r2,1
    8188:	003ffc06 	br	817c <_gp+0xffff66a0>
    818c:	1105c83a 	sub	r2,r2,r4
    8190:	f800283a 	ret

00008194 <__sfvwrite_small_dev>:
    8194:	2880000b 	ldhu	r2,0(r5)
    8198:	1080020c 	andi	r2,r2,8
    819c:	10002126 	beq	r2,zero,8224 <__sfvwrite_small_dev+0x90>
    81a0:	2880008f 	ldh	r2,2(r5)
    81a4:	defffa04 	addi	sp,sp,-24
    81a8:	dc000015 	stw	r16,0(sp)
    81ac:	dfc00515 	stw	ra,20(sp)
    81b0:	dd000415 	stw	r20,16(sp)
    81b4:	dcc00315 	stw	r19,12(sp)
    81b8:	dc800215 	stw	r18,8(sp)
    81bc:	dc400115 	stw	r17,4(sp)
    81c0:	2821883a 	mov	r16,r5
    81c4:	10001216 	blt	r2,zero,8210 <__sfvwrite_small_dev+0x7c>
    81c8:	2027883a 	mov	r19,r4
    81cc:	3025883a 	mov	r18,r6
    81d0:	3823883a 	mov	r17,r7
    81d4:	05010004 	movi	r20,1024
    81d8:	04400b0e 	bge	zero,r17,8208 <__sfvwrite_small_dev+0x74>
    81dc:	880f883a 	mov	r7,r17
    81e0:	a440010e 	bge	r20,r17,81e8 <__sfvwrite_small_dev+0x54>
    81e4:	01c10004 	movi	r7,1024
    81e8:	8140008f 	ldh	r5,2(r16)
    81ec:	900d883a 	mov	r6,r18
    81f0:	9809883a 	mov	r4,r19
    81f4:	000824c0 	call	824c <_write_r>
    81f8:	0080050e 	bge	zero,r2,8210 <__sfvwrite_small_dev+0x7c>
    81fc:	88a3c83a 	sub	r17,r17,r2
    8200:	90a5883a 	add	r18,r18,r2
    8204:	003ff406 	br	81d8 <_gp+0xffff66fc>
    8208:	0005883a 	mov	r2,zero
    820c:	00000706 	br	822c <__sfvwrite_small_dev+0x98>
    8210:	8080000b 	ldhu	r2,0(r16)
    8214:	10801014 	ori	r2,r2,64
    8218:	8080000d 	sth	r2,0(r16)
    821c:	00bfffc4 	movi	r2,-1
    8220:	00000206 	br	822c <__sfvwrite_small_dev+0x98>
    8224:	00bfffc4 	movi	r2,-1
    8228:	f800283a 	ret
    822c:	dfc00517 	ldw	ra,20(sp)
    8230:	dd000417 	ldw	r20,16(sp)
    8234:	dcc00317 	ldw	r19,12(sp)
    8238:	dc800217 	ldw	r18,8(sp)
    823c:	dc400117 	ldw	r17,4(sp)
    8240:	dc000017 	ldw	r16,0(sp)
    8244:	dec00604 	addi	sp,sp,24
    8248:	f800283a 	ret

0000824c <_write_r>:
    824c:	defffd04 	addi	sp,sp,-12
    8250:	dc000015 	stw	r16,0(sp)
    8254:	04000074 	movhi	r16,1
    8258:	dc400115 	stw	r17,4(sp)
    825c:	84277404 	addi	r16,r16,-25136
    8260:	2023883a 	mov	r17,r4
    8264:	2809883a 	mov	r4,r5
    8268:	300b883a 	mov	r5,r6
    826c:	380d883a 	mov	r6,r7
    8270:	dfc00215 	stw	ra,8(sp)
    8274:	80000015 	stw	zero,0(r16)
    8278:	00084480 	call	8448 <write>
    827c:	00ffffc4 	movi	r3,-1
    8280:	10c0031e 	bne	r2,r3,8290 <_write_r+0x44>
    8284:	80c00017 	ldw	r3,0(r16)
    8288:	18000126 	beq	r3,zero,8290 <_write_r+0x44>
    828c:	88c00015 	stw	r3,0(r17)
    8290:	dfc00217 	ldw	ra,8(sp)
    8294:	dc400117 	ldw	r17,4(sp)
    8298:	dc000017 	ldw	r16,0(sp)
    829c:	dec00304 	addi	sp,sp,12
    82a0:	f800283a 	ret

000082a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    82a4:	defffc04 	addi	sp,sp,-16
    82a8:	df000315 	stw	fp,12(sp)
    82ac:	df000304 	addi	fp,sp,12
    82b0:	e13ffd15 	stw	r4,-12(fp)
    82b4:	e17ffe15 	stw	r5,-8(fp)
    82b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    82bc:	e0fffe17 	ldw	r3,-8(fp)
    82c0:	e0bffd17 	ldw	r2,-12(fp)
    82c4:	18800c26 	beq	r3,r2,82f8 <alt_load_section+0x54>
  {
    while( to != end )
    82c8:	00000806 	br	82ec <alt_load_section+0x48>
    {
      *to++ = *from++;
    82cc:	e0bffe17 	ldw	r2,-8(fp)
    82d0:	10c00104 	addi	r3,r2,4
    82d4:	e0fffe15 	stw	r3,-8(fp)
    82d8:	e0fffd17 	ldw	r3,-12(fp)
    82dc:	19000104 	addi	r4,r3,4
    82e0:	e13ffd15 	stw	r4,-12(fp)
    82e4:	18c00017 	ldw	r3,0(r3)
    82e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82ec:	e0fffe17 	ldw	r3,-8(fp)
    82f0:	e0bfff17 	ldw	r2,-4(fp)
    82f4:	18bff51e 	bne	r3,r2,82cc <_gp+0xffff67f0>
    {
      *to++ = *from++;
    }
  }
}
    82f8:	0001883a 	nop
    82fc:	e037883a 	mov	sp,fp
    8300:	df000017 	ldw	fp,0(sp)
    8304:	dec00104 	addi	sp,sp,4
    8308:	f800283a 	ret

0000830c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    830c:	defffe04 	addi	sp,sp,-8
    8310:	dfc00115 	stw	ra,4(sp)
    8314:	df000015 	stw	fp,0(sp)
    8318:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    831c:	01800074 	movhi	r6,1
    8320:	31a6bf04 	addi	r6,r6,-25860
    8324:	01400074 	movhi	r5,1
    8328:	29660a04 	addi	r5,r5,-26584
    832c:	01000074 	movhi	r4,1
    8330:	2126bf04 	addi	r4,r4,-25860
    8334:	00082a40 	call	82a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8338:	01800074 	movhi	r6,1
    833c:	31a00804 	addi	r6,r6,-32736
    8340:	01400074 	movhi	r5,1
    8344:	29600804 	addi	r5,r5,-32736
    8348:	01000074 	movhi	r4,1
    834c:	21200804 	addi	r4,r4,-32736
    8350:	00082a40 	call	82a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8354:	01800074 	movhi	r6,1
    8358:	31a60a04 	addi	r6,r6,-26584
    835c:	01400074 	movhi	r5,1
    8360:	2965f904 	addi	r5,r5,-26652
    8364:	01000074 	movhi	r4,1
    8368:	2125f904 	addi	r4,r4,-26652
    836c:	00082a40 	call	82a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8370:	0008b340 	call	8b34 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8374:	0008d480 	call	8d48 <alt_icache_flush_all>
}
    8378:	0001883a 	nop
    837c:	e037883a 	mov	sp,fp
    8380:	dfc00117 	ldw	ra,4(sp)
    8384:	df000017 	ldw	fp,0(sp)
    8388:	dec00204 	addi	sp,sp,8
    838c:	f800283a 	ret

00008390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8390:	defffd04 	addi	sp,sp,-12
    8394:	dfc00215 	stw	ra,8(sp)
    8398:	df000115 	stw	fp,4(sp)
    839c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    83a0:	0009883a 	mov	r4,zero
    83a4:	00085740 	call	8574 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    83a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    83ac:	00085ac0 	call	85ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    83b0:	01800074 	movhi	r6,1
    83b4:	31a5ff04 	addi	r6,r6,-26628
    83b8:	01400074 	movhi	r5,1
    83bc:	2965ff04 	addi	r5,r5,-26628
    83c0:	01000074 	movhi	r4,1
    83c4:	2125ff04 	addi	r4,r4,-26628
    83c8:	0008e400 	call	8e40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    83cc:	0008c880 	call	8c88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    83d0:	01000074 	movhi	r4,1
    83d4:	21233a04 	addi	r4,r4,-29464
    83d8:	00094640 	call	9464 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    83dc:	d0a0be17 	ldw	r2,-32008(gp)
    83e0:	d0e0bf17 	ldw	r3,-32004(gp)
    83e4:	d120c017 	ldw	r4,-32000(gp)
    83e8:	200d883a 	mov	r6,r4
    83ec:	180b883a 	mov	r5,r3
    83f0:	1009883a 	mov	r4,r2
    83f4:	000806c0 	call	806c <main>
    83f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    83fc:	01000044 	movi	r4,1
    8400:	0008a640 	call	8a64 <close>
  exit (result);
    8404:	e13fff17 	ldw	r4,-4(fp)
    8408:	00094780 	call	9478 <exit>

0000840c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    840c:	defffe04 	addi	sp,sp,-8
    8410:	dfc00115 	stw	ra,4(sp)
    8414:	df000015 	stw	fp,0(sp)
    8418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    841c:	d0a00717 	ldw	r2,-32740(gp)
    8420:	10000326 	beq	r2,zero,8430 <alt_get_errno+0x24>
    8424:	d0a00717 	ldw	r2,-32740(gp)
    8428:	103ee83a 	callr	r2
    842c:	00000106 	br	8434 <alt_get_errno+0x28>
    8430:	d0a0bd04 	addi	r2,gp,-32012
}
    8434:	e037883a 	mov	sp,fp
    8438:	dfc00117 	ldw	ra,4(sp)
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00204 	addi	sp,sp,8
    8444:	f800283a 	ret

00008448 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8448:	defff904 	addi	sp,sp,-28
    844c:	dfc00615 	stw	ra,24(sp)
    8450:	df000515 	stw	fp,20(sp)
    8454:	df000504 	addi	fp,sp,20
    8458:	e13ffd15 	stw	r4,-12(fp)
    845c:	e17ffe15 	stw	r5,-8(fp)
    8460:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8464:	e0bffd17 	ldw	r2,-12(fp)
    8468:	10000616 	blt	r2,zero,8484 <write+0x3c>
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	10c00324 	muli	r3,r2,12
    8474:	00800074 	movhi	r2,1
    8478:	10a65704 	addi	r2,r2,-26276
    847c:	1885883a 	add	r2,r3,r2
    8480:	00000106 	br	8488 <write+0x40>
    8484:	0005883a 	mov	r2,zero
    8488:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    848c:	e0bffb17 	ldw	r2,-20(fp)
    8490:	10002126 	beq	r2,zero,8518 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8494:	e0bffb17 	ldw	r2,-20(fp)
    8498:	10800217 	ldw	r2,8(r2)
    849c:	108000cc 	andi	r2,r2,3
    84a0:	10001826 	beq	r2,zero,8504 <write+0xbc>
    84a4:	e0bffb17 	ldw	r2,-20(fp)
    84a8:	10800017 	ldw	r2,0(r2)
    84ac:	10800617 	ldw	r2,24(r2)
    84b0:	10001426 	beq	r2,zero,8504 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    84b4:	e0bffb17 	ldw	r2,-20(fp)
    84b8:	10800017 	ldw	r2,0(r2)
    84bc:	10800617 	ldw	r2,24(r2)
    84c0:	e0ffff17 	ldw	r3,-4(fp)
    84c4:	180d883a 	mov	r6,r3
    84c8:	e17ffe17 	ldw	r5,-8(fp)
    84cc:	e13ffb17 	ldw	r4,-20(fp)
    84d0:	103ee83a 	callr	r2
    84d4:	e0bffc15 	stw	r2,-16(fp)
    84d8:	e0bffc17 	ldw	r2,-16(fp)
    84dc:	1000070e 	bge	r2,zero,84fc <write+0xb4>
      {
        ALT_ERRNO = -rval;
    84e0:	000840c0 	call	840c <alt_get_errno>
    84e4:	1007883a 	mov	r3,r2
    84e8:	e0bffc17 	ldw	r2,-16(fp)
    84ec:	0085c83a 	sub	r2,zero,r2
    84f0:	18800015 	stw	r2,0(r3)
        return -1;
    84f4:	00bfffc4 	movi	r2,-1
    84f8:	00000c06 	br	852c <write+0xe4>
      }
      return rval;
    84fc:	e0bffc17 	ldw	r2,-16(fp)
    8500:	00000a06 	br	852c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8504:	000840c0 	call	840c <alt_get_errno>
    8508:	1007883a 	mov	r3,r2
    850c:	00800344 	movi	r2,13
    8510:	18800015 	stw	r2,0(r3)
    8514:	00000406 	br	8528 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8518:	000840c0 	call	840c <alt_get_errno>
    851c:	1007883a 	mov	r3,r2
    8520:	00801444 	movi	r2,81
    8524:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8528:	00bfffc4 	movi	r2,-1
}
    852c:	e037883a 	mov	sp,fp
    8530:	dfc00117 	ldw	ra,4(sp)
    8534:	df000017 	ldw	fp,0(sp)
    8538:	dec00204 	addi	sp,sp,8
    853c:	f800283a 	ret

00008540 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8540:	defffd04 	addi	sp,sp,-12
    8544:	dfc00215 	stw	ra,8(sp)
    8548:	df000115 	stw	fp,4(sp)
    854c:	df000104 	addi	fp,sp,4
    8550:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8554:	d1600404 	addi	r5,gp,-32752
    8558:	e13fff17 	ldw	r4,-4(fp)
    855c:	0008be40 	call	8be4 <alt_dev_llist_insert>
}
    8560:	e037883a 	mov	sp,fp
    8564:	dfc00117 	ldw	ra,4(sp)
    8568:	df000017 	ldw	fp,0(sp)
    856c:	dec00204 	addi	sp,sp,8
    8570:	f800283a 	ret

00008574 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8574:	defffd04 	addi	sp,sp,-12
    8578:	dfc00215 	stw	ra,8(sp)
    857c:	df000115 	stw	fp,4(sp)
    8580:	df000104 	addi	fp,sp,4
    8584:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_V2, cpu_v2);
    8588:	00091740 	call	9174 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    858c:	00800044 	movi	r2,1
    8590:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8594:	0001883a 	nop
    8598:	e037883a 	mov	sp,fp
    859c:	dfc00117 	ldw	ra,4(sp)
    85a0:	df000017 	ldw	fp,0(sp)
    85a4:	dec00204 	addi	sp,sp,8
    85a8:	f800283a 	ret

000085ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    85ac:	defffe04 	addi	sp,sp,-8
    85b0:	dfc00115 	stw	ra,4(sp)
    85b4:	df000015 	stw	fp,0(sp)
    85b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    85bc:	01000074 	movhi	r4,1
    85c0:	21264204 	addi	r4,r4,-26360
    85c4:	00085400 	call	8540 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    85c8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    85cc:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETH, eth);
    85d0:	0001883a 	nop
}
    85d4:	0001883a 	nop
    85d8:	e037883a 	mov	sp,fp
    85dc:	dfc00117 	ldw	ra,4(sp)
    85e0:	df000017 	ldw	fp,0(sp)
    85e4:	dec00204 	addi	sp,sp,8
    85e8:	f800283a 	ret

000085ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    85ec:	defffa04 	addi	sp,sp,-24
    85f0:	dfc00515 	stw	ra,20(sp)
    85f4:	df000415 	stw	fp,16(sp)
    85f8:	df000404 	addi	fp,sp,16
    85fc:	e13ffd15 	stw	r4,-12(fp)
    8600:	e17ffe15 	stw	r5,-8(fp)
    8604:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8608:	e0bffd17 	ldw	r2,-12(fp)
    860c:	10800017 	ldw	r2,0(r2)
    8610:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8614:	e0bffc17 	ldw	r2,-16(fp)
    8618:	10c00a04 	addi	r3,r2,40
    861c:	e0bffd17 	ldw	r2,-12(fp)
    8620:	10800217 	ldw	r2,8(r2)
    8624:	100f883a 	mov	r7,r2
    8628:	e1bfff17 	ldw	r6,-4(fp)
    862c:	e17ffe17 	ldw	r5,-8(fp)
    8630:	1809883a 	mov	r4,r3
    8634:	00086ac0 	call	86ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8638:	e037883a 	mov	sp,fp
    863c:	dfc00117 	ldw	ra,4(sp)
    8640:	df000017 	ldw	fp,0(sp)
    8644:	dec00204 	addi	sp,sp,8
    8648:	f800283a 	ret

0000864c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    864c:	defffa04 	addi	sp,sp,-24
    8650:	dfc00515 	stw	ra,20(sp)
    8654:	df000415 	stw	fp,16(sp)
    8658:	df000404 	addi	fp,sp,16
    865c:	e13ffd15 	stw	r4,-12(fp)
    8660:	e17ffe15 	stw	r5,-8(fp)
    8664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8668:	e0bffd17 	ldw	r2,-12(fp)
    866c:	10800017 	ldw	r2,0(r2)
    8670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8674:	e0bffc17 	ldw	r2,-16(fp)
    8678:	10c00a04 	addi	r3,r2,40
    867c:	e0bffd17 	ldw	r2,-12(fp)
    8680:	10800217 	ldw	r2,8(r2)
    8684:	100f883a 	mov	r7,r2
    8688:	e1bfff17 	ldw	r6,-4(fp)
    868c:	e17ffe17 	ldw	r5,-8(fp)
    8690:	1809883a 	mov	r4,r3
    8694:	00087980 	call	8798 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8698:	e037883a 	mov	sp,fp
    869c:	dfc00117 	ldw	ra,4(sp)
    86a0:	df000017 	ldw	fp,0(sp)
    86a4:	dec00204 	addi	sp,sp,8
    86a8:	f800283a 	ret

000086ac <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    86ac:	defff704 	addi	sp,sp,-36
    86b0:	df000815 	stw	fp,32(sp)
    86b4:	df000804 	addi	fp,sp,32
    86b8:	e13ffc15 	stw	r4,-16(fp)
    86bc:	e17ffd15 	stw	r5,-12(fp)
    86c0:	e1bffe15 	stw	r6,-8(fp)
    86c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    86c8:	e0bffc17 	ldw	r2,-16(fp)
    86cc:	10800017 	ldw	r2,0(r2)
    86d0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    86d4:	e0bffd17 	ldw	r2,-12(fp)
    86d8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    86dc:	e0bffe17 	ldw	r2,-8(fp)
    86e0:	e0fffd17 	ldw	r3,-12(fp)
    86e4:	1885883a 	add	r2,r3,r2
    86e8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    86ec:	00001206 	br	8738 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    86f0:	e0bff917 	ldw	r2,-28(fp)
    86f4:	10800037 	ldwio	r2,0(r2)
    86f8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    86fc:	e0bffb17 	ldw	r2,-20(fp)
    8700:	10a0000c 	andi	r2,r2,32768
    8704:	10000626 	beq	r2,zero,8720 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8708:	e0bff817 	ldw	r2,-32(fp)
    870c:	10c00044 	addi	r3,r2,1
    8710:	e0fff815 	stw	r3,-32(fp)
    8714:	e0fffb17 	ldw	r3,-20(fp)
    8718:	10c00005 	stb	r3,0(r2)
    871c:	00000606 	br	8738 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    8720:	e0fff817 	ldw	r3,-32(fp)
    8724:	e0bffd17 	ldw	r2,-12(fp)
    8728:	1880071e 	bne	r3,r2,8748 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    872c:	e0bfff17 	ldw	r2,-4(fp)
    8730:	1090000c 	andi	r2,r2,16384
    8734:	1000061e 	bne	r2,zero,8750 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8738:	e0fff817 	ldw	r3,-32(fp)
    873c:	e0bffa17 	ldw	r2,-24(fp)
    8740:	18bfeb36 	bltu	r3,r2,86f0 <_gp+0xffff6c14>
    8744:	00000306 	br	8754 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8748:	0001883a 	nop
    874c:	00000106 	br	8754 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    8750:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8754:	e0fff817 	ldw	r3,-32(fp)
    8758:	e0bffd17 	ldw	r2,-12(fp)
    875c:	18800426 	beq	r3,r2,8770 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8760:	e0fff817 	ldw	r3,-32(fp)
    8764:	e0bffd17 	ldw	r2,-12(fp)
    8768:	1885c83a 	sub	r2,r3,r2
    876c:	00000606 	br	8788 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8770:	e0bfff17 	ldw	r2,-4(fp)
    8774:	1090000c 	andi	r2,r2,16384
    8778:	10000226 	beq	r2,zero,8784 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    877c:	00bffd44 	movi	r2,-11
    8780:	00000106 	br	8788 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    8784:	00bffec4 	movi	r2,-5
}
    8788:	e037883a 	mov	sp,fp
    878c:	df000017 	ldw	fp,0(sp)
    8790:	dec00104 	addi	sp,sp,4
    8794:	f800283a 	ret

00008798 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8798:	defff904 	addi	sp,sp,-28
    879c:	df000615 	stw	fp,24(sp)
    87a0:	df000604 	addi	fp,sp,24
    87a4:	e13ffc15 	stw	r4,-16(fp)
    87a8:	e17ffd15 	stw	r5,-12(fp)
    87ac:	e1bffe15 	stw	r6,-8(fp)
    87b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    87b4:	e0bffc17 	ldw	r2,-16(fp)
    87b8:	10800017 	ldw	r2,0(r2)
    87bc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    87c0:	e0bffe17 	ldw	r2,-8(fp)
    87c4:	e0fffd17 	ldw	r3,-12(fp)
    87c8:	1885883a 	add	r2,r3,r2
    87cc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    87d0:	00000e06 	br	880c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    87d4:	e0bffa17 	ldw	r2,-24(fp)
    87d8:	10800104 	addi	r2,r2,4
    87dc:	10800037 	ldwio	r2,0(r2)
    87e0:	10bfffec 	andhi	r2,r2,65535
    87e4:	10000926 	beq	r2,zero,880c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    87e8:	e0fffa17 	ldw	r3,-24(fp)
    87ec:	e0bffd17 	ldw	r2,-12(fp)
    87f0:	11000044 	addi	r4,r2,1
    87f4:	e13ffd15 	stw	r4,-12(fp)
    87f8:	10800003 	ldbu	r2,0(r2)
    87fc:	10803fcc 	andi	r2,r2,255
    8800:	1080201c 	xori	r2,r2,128
    8804:	10bfe004 	addi	r2,r2,-128
    8808:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    880c:	e0fffd17 	ldw	r3,-12(fp)
    8810:	e0bffb17 	ldw	r2,-20(fp)
    8814:	18bfef36 	bltu	r3,r2,87d4 <_gp+0xffff6cf8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8818:	e0bffe17 	ldw	r2,-8(fp)
}
    881c:	e037883a 	mov	sp,fp
    8820:	df000017 	ldw	fp,0(sp)
    8824:	dec00104 	addi	sp,sp,4
    8828:	f800283a 	ret

0000882c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    882c:	defff404 	addi	sp,sp,-48
    8830:	df000b15 	stw	fp,44(sp)
    8834:	df000b04 	addi	fp,sp,44
    8838:	e13ffc15 	stw	r4,-16(fp)
    883c:	e17ffd15 	stw	r5,-12(fp)
    8840:	e1bffe15 	stw	r6,-8(fp)
    8844:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    8848:	e0ffff17 	ldw	r3,-4(fp)
    884c:	e0bffe17 	ldw	r2,-8(fp)
    8850:	1885883a 	add	r2,r3,r2
    8854:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    8858:	e0c00217 	ldw	r3,8(fp)
    885c:	e0800117 	ldw	r2,4(fp)
    8860:	1885883a 	add	r2,r3,r2
    8864:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    8868:	e0800117 	ldw	r2,4(fp)
    886c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    8870:	e0bffe17 	ldw	r2,-8(fp)
    8874:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    8878:	00800044 	movi	r2,1
    887c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    8880:	e0bffc17 	ldw	r2,-16(fp)
    8884:	10800504 	addi	r2,r2,20
    8888:	1009883a 	mov	r4,r2
    888c:	00c00044 	movi	r3,1
    8890:	e0bffd17 	ldw	r2,-12(fp)
    8894:	1884983a 	sll	r2,r3,r2
    8898:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    889c:	e0800317 	ldw	r2,12(fp)
    88a0:	1080008c 	andi	r2,r2,2
    88a4:	1000051e 	bne	r2,zero,88bc <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    88a8:	e0bffc17 	ldw	r2,-16(fp)
    88ac:	10800304 	addi	r2,r2,12
    88b0:	1007883a 	mov	r3,r2
    88b4:	00810004 	movi	r2,1024
    88b8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    88bc:	e0bffc17 	ldw	r2,-16(fp)
    88c0:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    88c4:	e0bffc17 	ldw	r2,-16(fp)
    88c8:	10800204 	addi	r2,r2,8
    88cc:	10800037 	ldwio	r2,0(r2)
    88d0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    88d4:	e0bffa17 	ldw	r2,-24(fp)
    88d8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    88dc:	10000226 	beq	r2,zero,88e8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    88e0:	e0bff717 	ldw	r2,-36(fp)
    88e4:	1000031e 	bne	r2,zero,88f4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    88e8:	e0bffa17 	ldw	r2,-24(fp)
    88ec:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    88f0:	103ff426 	beq	r2,zero,88c4 <_gp+0xffff6de8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    88f4:	e0bffa17 	ldw	r2,-24(fp)
    88f8:	1080100c 	andi	r2,r2,64
    88fc:	10001e26 	beq	r2,zero,8978 <alt_avalon_spi_command+0x14c>
    8900:	e0bff717 	ldw	r2,-36(fp)
    8904:	00801c0e 	bge	zero,r2,8978 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    8908:	e0bff717 	ldw	r2,-36(fp)
    890c:	10bfffc4 	addi	r2,r2,-1
    8910:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    8914:	e0ffff17 	ldw	r3,-4(fp)
    8918:	e0bff817 	ldw	r2,-32(fp)
    891c:	18800a2e 	bgeu	r3,r2,8948 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    8920:	e0bffc17 	ldw	r2,-16(fp)
    8924:	10800104 	addi	r2,r2,4
    8928:	1009883a 	mov	r4,r2
    892c:	e0bfff17 	ldw	r2,-4(fp)
    8930:	10c00044 	addi	r3,r2,1
    8934:	e0ffff15 	stw	r3,-4(fp)
    8938:	10800003 	ldbu	r2,0(r2)
    893c:	10803fcc 	andi	r2,r2,255
    8940:	20800035 	stwio	r2,0(r4)
    8944:	00000c06 	br	8978 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    8948:	e0bff517 	ldw	r2,-44(fp)
    894c:	10000826 	beq	r2,zero,8970 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    8950:	e0bff517 	ldw	r2,-44(fp)
    8954:	10bfffc4 	addi	r2,r2,-1
    8958:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    895c:	e0bffc17 	ldw	r2,-16(fp)
    8960:	10800104 	addi	r2,r2,4
    8964:	0007883a 	mov	r3,zero
    8968:	10c00035 	stwio	r3,0(r2)
    896c:	00000206 	br	8978 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    8970:	00bf0004 	movi	r2,-1024
    8974:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    8978:	e0bffa17 	ldw	r2,-24(fp)
    897c:	1080200c 	andi	r2,r2,128
    8980:	103fd026 	beq	r2,zero,88c4 <_gp+0xffff6de8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    8984:	e0bffc17 	ldw	r2,-16(fp)
    8988:	10800037 	ldwio	r2,0(r2)
    898c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    8990:	e0bff617 	ldw	r2,-40(fp)
    8994:	10000426 	beq	r2,zero,89a8 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    8998:	e0bff617 	ldw	r2,-40(fp)
    899c:	10bfffc4 	addi	r2,r2,-1
    89a0:	e0bff615 	stw	r2,-40(fp)
    89a4:	00000506 	br	89bc <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    89a8:	e0800217 	ldw	r2,8(fp)
    89ac:	10c00044 	addi	r3,r2,1
    89b0:	e0c00215 	stw	r3,8(fp)
    89b4:	e0fffb17 	ldw	r3,-20(fp)
    89b8:	10c00005 	stb	r3,0(r2)
      credits++;
    89bc:	e0bff717 	ldw	r2,-36(fp)
    89c0:	10800044 	addi	r2,r2,1
    89c4:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    89c8:	e0bff617 	ldw	r2,-40(fp)
    89cc:	103fbd1e 	bne	r2,zero,88c4 <_gp+0xffff6de8>
    89d0:	e0c00217 	ldw	r3,8(fp)
    89d4:	e0bff917 	ldw	r2,-28(fp)
    89d8:	18bfba1e 	bne	r3,r2,88c4 <_gp+0xffff6de8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    89dc:	e0bffc17 	ldw	r2,-16(fp)
    89e0:	10800204 	addi	r2,r2,8
    89e4:	10800037 	ldwio	r2,0(r2)
    89e8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    89ec:	e0bffa17 	ldw	r2,-24(fp)
    89f0:	1080080c 	andi	r2,r2,32
    89f4:	103ff926 	beq	r2,zero,89dc <_gp+0xffff6f00>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    89f8:	e0800317 	ldw	r2,12(fp)
    89fc:	1080004c 	andi	r2,r2,1
    8a00:	1000041e 	bne	r2,zero,8a14 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    8a04:	e0bffc17 	ldw	r2,-16(fp)
    8a08:	10800304 	addi	r2,r2,12
    8a0c:	0007883a 	mov	r3,zero
    8a10:	10c00035 	stwio	r3,0(r2)

  return read_length;
    8a14:	e0800117 	ldw	r2,4(fp)
}
    8a18:	e037883a 	mov	sp,fp
    8a1c:	df000017 	ldw	fp,0(sp)
    8a20:	dec00104 	addi	sp,sp,4
    8a24:	f800283a 	ret

00008a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8a28:	defffe04 	addi	sp,sp,-8
    8a2c:	dfc00115 	stw	ra,4(sp)
    8a30:	df000015 	stw	fp,0(sp)
    8a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8a38:	d0a00717 	ldw	r2,-32740(gp)
    8a3c:	10000326 	beq	r2,zero,8a4c <alt_get_errno+0x24>
    8a40:	d0a00717 	ldw	r2,-32740(gp)
    8a44:	103ee83a 	callr	r2
    8a48:	00000106 	br	8a50 <alt_get_errno+0x28>
    8a4c:	d0a0bd04 	addi	r2,gp,-32012
}
    8a50:	e037883a 	mov	sp,fp
    8a54:	dfc00117 	ldw	ra,4(sp)
    8a58:	df000017 	ldw	fp,0(sp)
    8a5c:	dec00204 	addi	sp,sp,8
    8a60:	f800283a 	ret

00008a64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8a64:	defffb04 	addi	sp,sp,-20
    8a68:	dfc00415 	stw	ra,16(sp)
    8a6c:	df000315 	stw	fp,12(sp)
    8a70:	df000304 	addi	fp,sp,12
    8a74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8a78:	e0bfff17 	ldw	r2,-4(fp)
    8a7c:	10000616 	blt	r2,zero,8a98 <close+0x34>
    8a80:	e0bfff17 	ldw	r2,-4(fp)
    8a84:	10c00324 	muli	r3,r2,12
    8a88:	00800074 	movhi	r2,1
    8a8c:	10a65704 	addi	r2,r2,-26276
    8a90:	1885883a 	add	r2,r3,r2
    8a94:	00000106 	br	8a9c <close+0x38>
    8a98:	0005883a 	mov	r2,zero
    8a9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    8aa0:	e0bffd17 	ldw	r2,-12(fp)
    8aa4:	10001926 	beq	r2,zero,8b0c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8aa8:	e0bffd17 	ldw	r2,-12(fp)
    8aac:	10800017 	ldw	r2,0(r2)
    8ab0:	10800417 	ldw	r2,16(r2)
    8ab4:	10000626 	beq	r2,zero,8ad0 <close+0x6c>
    8ab8:	e0bffd17 	ldw	r2,-12(fp)
    8abc:	10800017 	ldw	r2,0(r2)
    8ac0:	10800417 	ldw	r2,16(r2)
    8ac4:	e13ffd17 	ldw	r4,-12(fp)
    8ac8:	103ee83a 	callr	r2
    8acc:	00000106 	br	8ad4 <close+0x70>
    8ad0:	0005883a 	mov	r2,zero
    8ad4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8ad8:	e13fff17 	ldw	r4,-4(fp)
    8adc:	00091100 	call	9110 <alt_release_fd>
    if (rval < 0)
    8ae0:	e0bffe17 	ldw	r2,-8(fp)
    8ae4:	1000070e 	bge	r2,zero,8b04 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    8ae8:	0008a280 	call	8a28 <alt_get_errno>
    8aec:	1007883a 	mov	r3,r2
    8af0:	e0bffe17 	ldw	r2,-8(fp)
    8af4:	0085c83a 	sub	r2,zero,r2
    8af8:	18800015 	stw	r2,0(r3)
      return -1;
    8afc:	00bfffc4 	movi	r2,-1
    8b00:	00000706 	br	8b20 <close+0xbc>
    }
    return 0;
    8b04:	0005883a 	mov	r2,zero
    8b08:	00000506 	br	8b20 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8b0c:	0008a280 	call	8a28 <alt_get_errno>
    8b10:	1007883a 	mov	r3,r2
    8b14:	00801444 	movi	r2,81
    8b18:	18800015 	stw	r2,0(r3)
    return -1;
    8b1c:	00bfffc4 	movi	r2,-1
  }
}
    8b20:	e037883a 	mov	sp,fp
    8b24:	dfc00117 	ldw	ra,4(sp)
    8b28:	df000017 	ldw	fp,0(sp)
    8b2c:	dec00204 	addi	sp,sp,8
    8b30:	f800283a 	ret

00008b34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8b34:	defffe04 	addi	sp,sp,-8
    8b38:	df000115 	stw	fp,4(sp)
    8b3c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8b40:	e03fff15 	stw	zero,-4(fp)
    8b44:	00000506 	br	8b5c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8b48:	e0bfff17 	ldw	r2,-4(fp)
    8b4c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8b50:	e0bfff17 	ldw	r2,-4(fp)
    8b54:	10800804 	addi	r2,r2,32
    8b58:	e0bfff15 	stw	r2,-4(fp)
    8b5c:	e0bfff17 	ldw	r2,-4(fp)
    8b60:	10820030 	cmpltui	r2,r2,2048
    8b64:	103ff81e 	bne	r2,zero,8b48 <_gp+0xffff706c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8b68:	0001883a 	nop
    8b6c:	e037883a 	mov	sp,fp
    8b70:	df000017 	ldw	fp,0(sp)
    8b74:	dec00104 	addi	sp,sp,4
    8b78:	f800283a 	ret

00008b7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8b7c:	defffc04 	addi	sp,sp,-16
    8b80:	df000315 	stw	fp,12(sp)
    8b84:	df000304 	addi	fp,sp,12
    8b88:	e13ffd15 	stw	r4,-12(fp)
    8b8c:	e17ffe15 	stw	r5,-8(fp)
    8b90:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8b94:	e0bfff17 	ldw	r2,-4(fp)
}
    8b98:	e037883a 	mov	sp,fp
    8b9c:	df000017 	ldw	fp,0(sp)
    8ba0:	dec00104 	addi	sp,sp,4
    8ba4:	f800283a 	ret

00008ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ba8:	defffe04 	addi	sp,sp,-8
    8bac:	dfc00115 	stw	ra,4(sp)
    8bb0:	df000015 	stw	fp,0(sp)
    8bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8bb8:	d0a00717 	ldw	r2,-32740(gp)
    8bbc:	10000326 	beq	r2,zero,8bcc <alt_get_errno+0x24>
    8bc0:	d0a00717 	ldw	r2,-32740(gp)
    8bc4:	103ee83a 	callr	r2
    8bc8:	00000106 	br	8bd0 <alt_get_errno+0x28>
    8bcc:	d0a0bd04 	addi	r2,gp,-32012
}
    8bd0:	e037883a 	mov	sp,fp
    8bd4:	dfc00117 	ldw	ra,4(sp)
    8bd8:	df000017 	ldw	fp,0(sp)
    8bdc:	dec00204 	addi	sp,sp,8
    8be0:	f800283a 	ret

00008be4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8be4:	defffa04 	addi	sp,sp,-24
    8be8:	dfc00515 	stw	ra,20(sp)
    8bec:	df000415 	stw	fp,16(sp)
    8bf0:	df000404 	addi	fp,sp,16
    8bf4:	e13ffe15 	stw	r4,-8(fp)
    8bf8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8bfc:	e0bffe17 	ldw	r2,-8(fp)
    8c00:	10000326 	beq	r2,zero,8c10 <alt_dev_llist_insert+0x2c>
    8c04:	e0bffe17 	ldw	r2,-8(fp)
    8c08:	10800217 	ldw	r2,8(r2)
    8c0c:	1000061e 	bne	r2,zero,8c28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    8c10:	0008ba80 	call	8ba8 <alt_get_errno>
    8c14:	1007883a 	mov	r3,r2
    8c18:	00800584 	movi	r2,22
    8c1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8c20:	00bffa84 	movi	r2,-22
    8c24:	00001306 	br	8c74 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8c28:	e0bffe17 	ldw	r2,-8(fp)
    8c2c:	e0ffff17 	ldw	r3,-4(fp)
    8c30:	e0fffc15 	stw	r3,-16(fp)
    8c34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8c38:	e0bffd17 	ldw	r2,-12(fp)
    8c3c:	e0fffc17 	ldw	r3,-16(fp)
    8c40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8c44:	e0bffc17 	ldw	r2,-16(fp)
    8c48:	10c00017 	ldw	r3,0(r2)
    8c4c:	e0bffd17 	ldw	r2,-12(fp)
    8c50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8c54:	e0bffc17 	ldw	r2,-16(fp)
    8c58:	10800017 	ldw	r2,0(r2)
    8c5c:	e0fffd17 	ldw	r3,-12(fp)
    8c60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8c64:	e0bffc17 	ldw	r2,-16(fp)
    8c68:	e0fffd17 	ldw	r3,-12(fp)
    8c6c:	10c00015 	stw	r3,0(r2)

  return 0;  
    8c70:	0005883a 	mov	r2,zero
}
    8c74:	e037883a 	mov	sp,fp
    8c78:	dfc00117 	ldw	ra,4(sp)
    8c7c:	df000017 	ldw	fp,0(sp)
    8c80:	dec00204 	addi	sp,sp,8
    8c84:	f800283a 	ret

00008c88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8c88:	defffd04 	addi	sp,sp,-12
    8c8c:	dfc00215 	stw	ra,8(sp)
    8c90:	df000115 	stw	fp,4(sp)
    8c94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8c98:	00800074 	movhi	r2,1
    8c9c:	10a5f804 	addi	r2,r2,-26656
    8ca0:	e0bfff15 	stw	r2,-4(fp)
    8ca4:	00000606 	br	8cc0 <_do_ctors+0x38>
        (*ctor) (); 
    8ca8:	e0bfff17 	ldw	r2,-4(fp)
    8cac:	10800017 	ldw	r2,0(r2)
    8cb0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8cb4:	e0bfff17 	ldw	r2,-4(fp)
    8cb8:	10bfff04 	addi	r2,r2,-4
    8cbc:	e0bfff15 	stw	r2,-4(fp)
    8cc0:	e0ffff17 	ldw	r3,-4(fp)
    8cc4:	00800074 	movhi	r2,1
    8cc8:	10a5f904 	addi	r2,r2,-26652
    8ccc:	18bff62e 	bgeu	r3,r2,8ca8 <_gp+0xffff71cc>
        (*ctor) (); 
}
    8cd0:	0001883a 	nop
    8cd4:	e037883a 	mov	sp,fp
    8cd8:	dfc00117 	ldw	ra,4(sp)
    8cdc:	df000017 	ldw	fp,0(sp)
    8ce0:	dec00204 	addi	sp,sp,8
    8ce4:	f800283a 	ret

00008ce8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8ce8:	defffd04 	addi	sp,sp,-12
    8cec:	dfc00215 	stw	ra,8(sp)
    8cf0:	df000115 	stw	fp,4(sp)
    8cf4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8cf8:	00800074 	movhi	r2,1
    8cfc:	10a5f804 	addi	r2,r2,-26656
    8d00:	e0bfff15 	stw	r2,-4(fp)
    8d04:	00000606 	br	8d20 <_do_dtors+0x38>
        (*dtor) (); 
    8d08:	e0bfff17 	ldw	r2,-4(fp)
    8d0c:	10800017 	ldw	r2,0(r2)
    8d10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8d14:	e0bfff17 	ldw	r2,-4(fp)
    8d18:	10bfff04 	addi	r2,r2,-4
    8d1c:	e0bfff15 	stw	r2,-4(fp)
    8d20:	e0ffff17 	ldw	r3,-4(fp)
    8d24:	00800074 	movhi	r2,1
    8d28:	10a5f904 	addi	r2,r2,-26652
    8d2c:	18bff62e 	bgeu	r3,r2,8d08 <_gp+0xffff722c>
        (*dtor) (); 
}
    8d30:	0001883a 	nop
    8d34:	e037883a 	mov	sp,fp
    8d38:	dfc00117 	ldw	ra,4(sp)
    8d3c:	df000017 	ldw	fp,0(sp)
    8d40:	dec00204 	addi	sp,sp,8
    8d44:	f800283a 	ret

00008d48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8d48:	defffe04 	addi	sp,sp,-8
    8d4c:	dfc00115 	stw	ra,4(sp)
    8d50:	df000015 	stw	fp,0(sp)
    8d54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8d58:	01420004 	movi	r5,2048
    8d5c:	0009883a 	mov	r4,zero
    8d60:	00093d40 	call	93d4 <alt_icache_flush>
#endif
}
    8d64:	0001883a 	nop
    8d68:	e037883a 	mov	sp,fp
    8d6c:	dfc00117 	ldw	ra,4(sp)
    8d70:	df000017 	ldw	fp,0(sp)
    8d74:	dec00204 	addi	sp,sp,8
    8d78:	f800283a 	ret

00008d7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8d7c:	defff904 	addi	sp,sp,-28
    8d80:	dfc00615 	stw	ra,24(sp)
    8d84:	df000515 	stw	fp,20(sp)
    8d88:	df000504 	addi	fp,sp,20
    8d8c:	e13ffc15 	stw	r4,-16(fp)
    8d90:	e17ffd15 	stw	r5,-12(fp)
    8d94:	e1bffe15 	stw	r6,-8(fp)
    8d98:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8d9c:	e1bfff17 	ldw	r6,-4(fp)
    8da0:	e17ffe17 	ldw	r5,-8(fp)
    8da4:	e13ffd17 	ldw	r4,-12(fp)
    8da8:	0008fbc0 	call	8fbc <open>
    8dac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8db0:	e0bffb17 	ldw	r2,-20(fp)
    8db4:	10001c16 	blt	r2,zero,8e28 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    8db8:	00800074 	movhi	r2,1
    8dbc:	10a65704 	addi	r2,r2,-26276
    8dc0:	e0fffb17 	ldw	r3,-20(fp)
    8dc4:	18c00324 	muli	r3,r3,12
    8dc8:	10c5883a 	add	r2,r2,r3
    8dcc:	10c00017 	ldw	r3,0(r2)
    8dd0:	e0bffc17 	ldw	r2,-16(fp)
    8dd4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8dd8:	00800074 	movhi	r2,1
    8ddc:	10a65704 	addi	r2,r2,-26276
    8de0:	e0fffb17 	ldw	r3,-20(fp)
    8de4:	18c00324 	muli	r3,r3,12
    8de8:	10c5883a 	add	r2,r2,r3
    8dec:	10800104 	addi	r2,r2,4
    8df0:	10c00017 	ldw	r3,0(r2)
    8df4:	e0bffc17 	ldw	r2,-16(fp)
    8df8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8dfc:	00800074 	movhi	r2,1
    8e00:	10a65704 	addi	r2,r2,-26276
    8e04:	e0fffb17 	ldw	r3,-20(fp)
    8e08:	18c00324 	muli	r3,r3,12
    8e0c:	10c5883a 	add	r2,r2,r3
    8e10:	10800204 	addi	r2,r2,8
    8e14:	10c00017 	ldw	r3,0(r2)
    8e18:	e0bffc17 	ldw	r2,-16(fp)
    8e1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8e20:	e13ffb17 	ldw	r4,-20(fp)
    8e24:	00091100 	call	9110 <alt_release_fd>
  }
} 
    8e28:	0001883a 	nop
    8e2c:	e037883a 	mov	sp,fp
    8e30:	dfc00117 	ldw	ra,4(sp)
    8e34:	df000017 	ldw	fp,0(sp)
    8e38:	dec00204 	addi	sp,sp,8
    8e3c:	f800283a 	ret

00008e40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8e40:	defffb04 	addi	sp,sp,-20
    8e44:	dfc00415 	stw	ra,16(sp)
    8e48:	df000315 	stw	fp,12(sp)
    8e4c:	df000304 	addi	fp,sp,12
    8e50:	e13ffd15 	stw	r4,-12(fp)
    8e54:	e17ffe15 	stw	r5,-8(fp)
    8e58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8e5c:	01c07fc4 	movi	r7,511
    8e60:	01800044 	movi	r6,1
    8e64:	e17ffd17 	ldw	r5,-12(fp)
    8e68:	01000074 	movhi	r4,1
    8e6c:	21265a04 	addi	r4,r4,-26264
    8e70:	0008d7c0 	call	8d7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8e74:	01c07fc4 	movi	r7,511
    8e78:	000d883a 	mov	r6,zero
    8e7c:	e17ffe17 	ldw	r5,-8(fp)
    8e80:	01000074 	movhi	r4,1
    8e84:	21265704 	addi	r4,r4,-26276
    8e88:	0008d7c0 	call	8d7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8e8c:	01c07fc4 	movi	r7,511
    8e90:	01800044 	movi	r6,1
    8e94:	e17fff17 	ldw	r5,-4(fp)
    8e98:	01000074 	movhi	r4,1
    8e9c:	21265d04 	addi	r4,r4,-26252
    8ea0:	0008d7c0 	call	8d7c <alt_open_fd>
}  
    8ea4:	0001883a 	nop
    8ea8:	e037883a 	mov	sp,fp
    8eac:	dfc00117 	ldw	ra,4(sp)
    8eb0:	df000017 	ldw	fp,0(sp)
    8eb4:	dec00204 	addi	sp,sp,8
    8eb8:	f800283a 	ret

00008ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ebc:	defffe04 	addi	sp,sp,-8
    8ec0:	dfc00115 	stw	ra,4(sp)
    8ec4:	df000015 	stw	fp,0(sp)
    8ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8ecc:	d0a00717 	ldw	r2,-32740(gp)
    8ed0:	10000326 	beq	r2,zero,8ee0 <alt_get_errno+0x24>
    8ed4:	d0a00717 	ldw	r2,-32740(gp)
    8ed8:	103ee83a 	callr	r2
    8edc:	00000106 	br	8ee4 <alt_get_errno+0x28>
    8ee0:	d0a0bd04 	addi	r2,gp,-32012
}
    8ee4:	e037883a 	mov	sp,fp
    8ee8:	dfc00117 	ldw	ra,4(sp)
    8eec:	df000017 	ldw	fp,0(sp)
    8ef0:	dec00204 	addi	sp,sp,8
    8ef4:	f800283a 	ret

00008ef8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8ef8:	defffd04 	addi	sp,sp,-12
    8efc:	df000215 	stw	fp,8(sp)
    8f00:	df000204 	addi	fp,sp,8
    8f04:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8f08:	e0bfff17 	ldw	r2,-4(fp)
    8f0c:	10800217 	ldw	r2,8(r2)
    8f10:	10d00034 	orhi	r3,r2,16384
    8f14:	e0bfff17 	ldw	r2,-4(fp)
    8f18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f1c:	e03ffe15 	stw	zero,-8(fp)
    8f20:	00001d06 	br	8f98 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8f24:	00800074 	movhi	r2,1
    8f28:	10a65704 	addi	r2,r2,-26276
    8f2c:	e0fffe17 	ldw	r3,-8(fp)
    8f30:	18c00324 	muli	r3,r3,12
    8f34:	10c5883a 	add	r2,r2,r3
    8f38:	10c00017 	ldw	r3,0(r2)
    8f3c:	e0bfff17 	ldw	r2,-4(fp)
    8f40:	10800017 	ldw	r2,0(r2)
    8f44:	1880111e 	bne	r3,r2,8f8c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8f48:	00800074 	movhi	r2,1
    8f4c:	10a65704 	addi	r2,r2,-26276
    8f50:	e0fffe17 	ldw	r3,-8(fp)
    8f54:	18c00324 	muli	r3,r3,12
    8f58:	10c5883a 	add	r2,r2,r3
    8f5c:	10800204 	addi	r2,r2,8
    8f60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8f64:	1000090e 	bge	r2,zero,8f8c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8f68:	e0bffe17 	ldw	r2,-8(fp)
    8f6c:	10c00324 	muli	r3,r2,12
    8f70:	00800074 	movhi	r2,1
    8f74:	10a65704 	addi	r2,r2,-26276
    8f78:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8f7c:	e0bfff17 	ldw	r2,-4(fp)
    8f80:	18800226 	beq	r3,r2,8f8c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8f84:	00bffcc4 	movi	r2,-13
    8f88:	00000806 	br	8fac <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f8c:	e0bffe17 	ldw	r2,-8(fp)
    8f90:	10800044 	addi	r2,r2,1
    8f94:	e0bffe15 	stw	r2,-8(fp)
    8f98:	d0a00617 	ldw	r2,-32744(gp)
    8f9c:	1007883a 	mov	r3,r2
    8fa0:	e0bffe17 	ldw	r2,-8(fp)
    8fa4:	18bfdf2e 	bgeu	r3,r2,8f24 <_gp+0xffff7448>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8fa8:	0005883a 	mov	r2,zero
}
    8fac:	e037883a 	mov	sp,fp
    8fb0:	df000017 	ldw	fp,0(sp)
    8fb4:	dec00104 	addi	sp,sp,4
    8fb8:	f800283a 	ret

00008fbc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8fbc:	defff604 	addi	sp,sp,-40
    8fc0:	dfc00915 	stw	ra,36(sp)
    8fc4:	df000815 	stw	fp,32(sp)
    8fc8:	df000804 	addi	fp,sp,32
    8fcc:	e13ffd15 	stw	r4,-12(fp)
    8fd0:	e17ffe15 	stw	r5,-8(fp)
    8fd4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8fd8:	00bfffc4 	movi	r2,-1
    8fdc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8fe0:	00bffb44 	movi	r2,-19
    8fe4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8fe8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8fec:	d1600404 	addi	r5,gp,-32752
    8ff0:	e13ffd17 	ldw	r4,-12(fp)
    8ff4:	00091980 	call	9198 <alt_find_dev>
    8ff8:	e0bff815 	stw	r2,-32(fp)
    8ffc:	e0bff817 	ldw	r2,-32(fp)
    9000:	1000051e 	bne	r2,zero,9018 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9004:	e13ffd17 	ldw	r4,-12(fp)
    9008:	00092280 	call	9228 <alt_find_file>
    900c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9010:	00800044 	movi	r2,1
    9014:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9018:	e0bff817 	ldw	r2,-32(fp)
    901c:	10002926 	beq	r2,zero,90c4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9020:	e13ff817 	ldw	r4,-32(fp)
    9024:	00093300 	call	9330 <alt_get_fd>
    9028:	e0bff915 	stw	r2,-28(fp)
    902c:	e0bff917 	ldw	r2,-28(fp)
    9030:	1000030e 	bge	r2,zero,9040 <open+0x84>
    {
      status = index;
    9034:	e0bff917 	ldw	r2,-28(fp)
    9038:	e0bffa15 	stw	r2,-24(fp)
    903c:	00002306 	br	90cc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    9040:	e0bff917 	ldw	r2,-28(fp)
    9044:	10c00324 	muli	r3,r2,12
    9048:	00800074 	movhi	r2,1
    904c:	10a65704 	addi	r2,r2,-26276
    9050:	1885883a 	add	r2,r3,r2
    9054:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9058:	e0fffe17 	ldw	r3,-8(fp)
    905c:	00900034 	movhi	r2,16384
    9060:	10bfffc4 	addi	r2,r2,-1
    9064:	1886703a 	and	r3,r3,r2
    9068:	e0bffc17 	ldw	r2,-16(fp)
    906c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9070:	e0bffb17 	ldw	r2,-20(fp)
    9074:	1000051e 	bne	r2,zero,908c <open+0xd0>
    9078:	e13ffc17 	ldw	r4,-16(fp)
    907c:	0008ef80 	call	8ef8 <alt_file_locked>
    9080:	e0bffa15 	stw	r2,-24(fp)
    9084:	e0bffa17 	ldw	r2,-24(fp)
    9088:	10001016 	blt	r2,zero,90cc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    908c:	e0bff817 	ldw	r2,-32(fp)
    9090:	10800317 	ldw	r2,12(r2)
    9094:	10000826 	beq	r2,zero,90b8 <open+0xfc>
    9098:	e0bff817 	ldw	r2,-32(fp)
    909c:	10800317 	ldw	r2,12(r2)
    90a0:	e1ffff17 	ldw	r7,-4(fp)
    90a4:	e1bffe17 	ldw	r6,-8(fp)
    90a8:	e17ffd17 	ldw	r5,-12(fp)
    90ac:	e13ffc17 	ldw	r4,-16(fp)
    90b0:	103ee83a 	callr	r2
    90b4:	00000106 	br	90bc <open+0x100>
    90b8:	0005883a 	mov	r2,zero
    90bc:	e0bffa15 	stw	r2,-24(fp)
    90c0:	00000206 	br	90cc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    90c4:	00bffb44 	movi	r2,-19
    90c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    90cc:	e0bffa17 	ldw	r2,-24(fp)
    90d0:	1000090e 	bge	r2,zero,90f8 <open+0x13c>
  {
    alt_release_fd (index);  
    90d4:	e13ff917 	ldw	r4,-28(fp)
    90d8:	00091100 	call	9110 <alt_release_fd>
    ALT_ERRNO = -status;
    90dc:	0008ebc0 	call	8ebc <alt_get_errno>
    90e0:	1007883a 	mov	r3,r2
    90e4:	e0bffa17 	ldw	r2,-24(fp)
    90e8:	0085c83a 	sub	r2,zero,r2
    90ec:	18800015 	stw	r2,0(r3)
    return -1;
    90f0:	00bfffc4 	movi	r2,-1
    90f4:	00000106 	br	90fc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    90f8:	e0bff917 	ldw	r2,-28(fp)
}
    90fc:	e037883a 	mov	sp,fp
    9100:	dfc00117 	ldw	ra,4(sp)
    9104:	df000017 	ldw	fp,0(sp)
    9108:	dec00204 	addi	sp,sp,8
    910c:	f800283a 	ret

00009110 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9110:	defffe04 	addi	sp,sp,-8
    9114:	df000115 	stw	fp,4(sp)
    9118:	df000104 	addi	fp,sp,4
    911c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9120:	e0bfff17 	ldw	r2,-4(fp)
    9124:	108000d0 	cmplti	r2,r2,3
    9128:	10000d1e 	bne	r2,zero,9160 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    912c:	00800074 	movhi	r2,1
    9130:	10a65704 	addi	r2,r2,-26276
    9134:	e0ffff17 	ldw	r3,-4(fp)
    9138:	18c00324 	muli	r3,r3,12
    913c:	10c5883a 	add	r2,r2,r3
    9140:	10800204 	addi	r2,r2,8
    9144:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9148:	00800074 	movhi	r2,1
    914c:	10a65704 	addi	r2,r2,-26276
    9150:	e0ffff17 	ldw	r3,-4(fp)
    9154:	18c00324 	muli	r3,r3,12
    9158:	10c5883a 	add	r2,r2,r3
    915c:	10000015 	stw	zero,0(r2)
  }
}
    9160:	0001883a 	nop
    9164:	e037883a 	mov	sp,fp
    9168:	df000017 	ldw	fp,0(sp)
    916c:	dec00104 	addi	sp,sp,4
    9170:	f800283a 	ret

00009174 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9174:	deffff04 	addi	sp,sp,-4
    9178:	df000015 	stw	fp,0(sp)
    917c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9180:	000170fa 	wrctl	ienable,zero
}
    9184:	0001883a 	nop
    9188:	e037883a 	mov	sp,fp
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00104 	addi	sp,sp,4
    9194:	f800283a 	ret

00009198 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9198:	defffa04 	addi	sp,sp,-24
    919c:	dfc00515 	stw	ra,20(sp)
    91a0:	df000415 	stw	fp,16(sp)
    91a4:	df000404 	addi	fp,sp,16
    91a8:	e13ffe15 	stw	r4,-8(fp)
    91ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    91b0:	e0bfff17 	ldw	r2,-4(fp)
    91b4:	10800017 	ldw	r2,0(r2)
    91b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    91bc:	e13ffe17 	ldw	r4,-8(fp)
    91c0:	00081780 	call	8178 <strlen>
    91c4:	10800044 	addi	r2,r2,1
    91c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    91cc:	00000d06 	br	9204 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    91d0:	e0bffc17 	ldw	r2,-16(fp)
    91d4:	10800217 	ldw	r2,8(r2)
    91d8:	e0fffd17 	ldw	r3,-12(fp)
    91dc:	180d883a 	mov	r6,r3
    91e0:	e17ffe17 	ldw	r5,-8(fp)
    91e4:	1009883a 	mov	r4,r2
    91e8:	00094980 	call	9498 <memcmp>
    91ec:	1000021e 	bne	r2,zero,91f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    91f0:	e0bffc17 	ldw	r2,-16(fp)
    91f4:	00000706 	br	9214 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    91f8:	e0bffc17 	ldw	r2,-16(fp)
    91fc:	10800017 	ldw	r2,0(r2)
    9200:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9204:	e0fffc17 	ldw	r3,-16(fp)
    9208:	e0bfff17 	ldw	r2,-4(fp)
    920c:	18bff01e 	bne	r3,r2,91d0 <_gp+0xffff76f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9210:	0005883a 	mov	r2,zero
}
    9214:	e037883a 	mov	sp,fp
    9218:	dfc00117 	ldw	ra,4(sp)
    921c:	df000017 	ldw	fp,0(sp)
    9220:	dec00204 	addi	sp,sp,8
    9224:	f800283a 	ret

00009228 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9228:	defffb04 	addi	sp,sp,-20
    922c:	dfc00415 	stw	ra,16(sp)
    9230:	df000315 	stw	fp,12(sp)
    9234:	df000304 	addi	fp,sp,12
    9238:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    923c:	d0a00217 	ldw	r2,-32760(gp)
    9240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9244:	00003106 	br	930c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9248:	e0bffd17 	ldw	r2,-12(fp)
    924c:	10800217 	ldw	r2,8(r2)
    9250:	1009883a 	mov	r4,r2
    9254:	00081780 	call	8178 <strlen>
    9258:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    925c:	e0bffd17 	ldw	r2,-12(fp)
    9260:	10c00217 	ldw	r3,8(r2)
    9264:	e0bffe17 	ldw	r2,-8(fp)
    9268:	10bfffc4 	addi	r2,r2,-1
    926c:	1885883a 	add	r2,r3,r2
    9270:	10800003 	ldbu	r2,0(r2)
    9274:	10803fcc 	andi	r2,r2,255
    9278:	1080201c 	xori	r2,r2,128
    927c:	10bfe004 	addi	r2,r2,-128
    9280:	10800bd8 	cmpnei	r2,r2,47
    9284:	1000031e 	bne	r2,zero,9294 <alt_find_file+0x6c>
    {
      len -= 1;
    9288:	e0bffe17 	ldw	r2,-8(fp)
    928c:	10bfffc4 	addi	r2,r2,-1
    9290:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9294:	e0bffe17 	ldw	r2,-8(fp)
    9298:	e0ffff17 	ldw	r3,-4(fp)
    929c:	1885883a 	add	r2,r3,r2
    92a0:	10800003 	ldbu	r2,0(r2)
    92a4:	10803fcc 	andi	r2,r2,255
    92a8:	1080201c 	xori	r2,r2,128
    92ac:	10bfe004 	addi	r2,r2,-128
    92b0:	10800be0 	cmpeqi	r2,r2,47
    92b4:	1000081e 	bne	r2,zero,92d8 <alt_find_file+0xb0>
    92b8:	e0bffe17 	ldw	r2,-8(fp)
    92bc:	e0ffff17 	ldw	r3,-4(fp)
    92c0:	1885883a 	add	r2,r3,r2
    92c4:	10800003 	ldbu	r2,0(r2)
    92c8:	10803fcc 	andi	r2,r2,255
    92cc:	1080201c 	xori	r2,r2,128
    92d0:	10bfe004 	addi	r2,r2,-128
    92d4:	10000a1e 	bne	r2,zero,9300 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    92d8:	e0bffd17 	ldw	r2,-12(fp)
    92dc:	10800217 	ldw	r2,8(r2)
    92e0:	e0fffe17 	ldw	r3,-8(fp)
    92e4:	180d883a 	mov	r6,r3
    92e8:	e17fff17 	ldw	r5,-4(fp)
    92ec:	1009883a 	mov	r4,r2
    92f0:	00094980 	call	9498 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    92f4:	1000021e 	bne	r2,zero,9300 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    92f8:	e0bffd17 	ldw	r2,-12(fp)
    92fc:	00000706 	br	931c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9300:	e0bffd17 	ldw	r2,-12(fp)
    9304:	10800017 	ldw	r2,0(r2)
    9308:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    930c:	e0fffd17 	ldw	r3,-12(fp)
    9310:	d0a00204 	addi	r2,gp,-32760
    9314:	18bfcc1e 	bne	r3,r2,9248 <_gp+0xffff776c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9318:	0005883a 	mov	r2,zero
}
    931c:	e037883a 	mov	sp,fp
    9320:	dfc00117 	ldw	ra,4(sp)
    9324:	df000017 	ldw	fp,0(sp)
    9328:	dec00204 	addi	sp,sp,8
    932c:	f800283a 	ret

00009330 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9330:	defffc04 	addi	sp,sp,-16
    9334:	df000315 	stw	fp,12(sp)
    9338:	df000304 	addi	fp,sp,12
    933c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9340:	00bffa04 	movi	r2,-24
    9344:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9348:	e03ffd15 	stw	zero,-12(fp)
    934c:	00001906 	br	93b4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    9350:	00800074 	movhi	r2,1
    9354:	10a65704 	addi	r2,r2,-26276
    9358:	e0fffd17 	ldw	r3,-12(fp)
    935c:	18c00324 	muli	r3,r3,12
    9360:	10c5883a 	add	r2,r2,r3
    9364:	10800017 	ldw	r2,0(r2)
    9368:	10000f1e 	bne	r2,zero,93a8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    936c:	00800074 	movhi	r2,1
    9370:	10a65704 	addi	r2,r2,-26276
    9374:	e0fffd17 	ldw	r3,-12(fp)
    9378:	18c00324 	muli	r3,r3,12
    937c:	10c5883a 	add	r2,r2,r3
    9380:	e0ffff17 	ldw	r3,-4(fp)
    9384:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9388:	d0e00617 	ldw	r3,-32744(gp)
    938c:	e0bffd17 	ldw	r2,-12(fp)
    9390:	1880020e 	bge	r3,r2,939c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    9394:	e0bffd17 	ldw	r2,-12(fp)
    9398:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    939c:	e0bffd17 	ldw	r2,-12(fp)
    93a0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    93a4:	00000606 	br	93c0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    93a8:	e0bffd17 	ldw	r2,-12(fp)
    93ac:	10800044 	addi	r2,r2,1
    93b0:	e0bffd15 	stw	r2,-12(fp)
    93b4:	e0bffd17 	ldw	r2,-12(fp)
    93b8:	10800810 	cmplti	r2,r2,32
    93bc:	103fe41e 	bne	r2,zero,9350 <_gp+0xffff7874>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    93c0:	e0bffe17 	ldw	r2,-8(fp)
}
    93c4:	e037883a 	mov	sp,fp
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00104 	addi	sp,sp,4
    93d0:	f800283a 	ret

000093d4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    93d4:	defffb04 	addi	sp,sp,-20
    93d8:	df000415 	stw	fp,16(sp)
    93dc:	df000404 	addi	fp,sp,16
    93e0:	e13ffe15 	stw	r4,-8(fp)
    93e4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	10820070 	cmpltui	r2,r2,2049
    93f0:	1000021e 	bne	r2,zero,93fc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    93f4:	00820004 	movi	r2,2048
    93f8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    93fc:	e0fffe17 	ldw	r3,-8(fp)
    9400:	e0bfff17 	ldw	r2,-4(fp)
    9404:	1885883a 	add	r2,r3,r2
    9408:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    940c:	e0bffe17 	ldw	r2,-8(fp)
    9410:	e0bffc15 	stw	r2,-16(fp)
    9414:	00000506 	br	942c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9418:	e0bffc17 	ldw	r2,-16(fp)
    941c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9420:	e0bffc17 	ldw	r2,-16(fp)
    9424:	10800804 	addi	r2,r2,32
    9428:	e0bffc15 	stw	r2,-16(fp)
    942c:	e0fffc17 	ldw	r3,-16(fp)
    9430:	e0bffd17 	ldw	r2,-12(fp)
    9434:	18bff836 	bltu	r3,r2,9418 <_gp+0xffff793c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9438:	e0bffe17 	ldw	r2,-8(fp)
    943c:	108007cc 	andi	r2,r2,31
    9440:	10000226 	beq	r2,zero,944c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9444:	e0bffc17 	ldw	r2,-16(fp)
    9448:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    944c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9450:	0001883a 	nop
    9454:	e037883a 	mov	sp,fp
    9458:	df000017 	ldw	fp,0(sp)
    945c:	dec00104 	addi	sp,sp,4
    9460:	f800283a 	ret

00009464 <atexit>:
    9464:	200b883a 	mov	r5,r4
    9468:	000f883a 	mov	r7,zero
    946c:	000d883a 	mov	r6,zero
    9470:	0009883a 	mov	r4,zero
    9474:	00094c81 	jmpi	94c8 <__register_exitproc>

00009478 <exit>:
    9478:	defffe04 	addi	sp,sp,-8
    947c:	000b883a 	mov	r5,zero
    9480:	dc000015 	stw	r16,0(sp)
    9484:	dfc00115 	stw	ra,4(sp)
    9488:	2021883a 	mov	r16,r4
    948c:	00096200 	call	9620 <__call_exitprocs>
    9490:	8009883a 	mov	r4,r16
    9494:	00097b00 	call	97b0 <_exit>

00009498 <memcmp>:
    9498:	218d883a 	add	r6,r4,r6
    949c:	21800826 	beq	r4,r6,94c0 <memcmp+0x28>
    94a0:	20800003 	ldbu	r2,0(r4)
    94a4:	28c00003 	ldbu	r3,0(r5)
    94a8:	10c00226 	beq	r2,r3,94b4 <memcmp+0x1c>
    94ac:	10c5c83a 	sub	r2,r2,r3
    94b0:	f800283a 	ret
    94b4:	21000044 	addi	r4,r4,1
    94b8:	29400044 	addi	r5,r5,1
    94bc:	003ff706 	br	949c <_gp+0xffff79c0>
    94c0:	0005883a 	mov	r2,zero
    94c4:	f800283a 	ret

000094c8 <__register_exitproc>:
    94c8:	00800074 	movhi	r2,1
    94cc:	10a6b704 	addi	r2,r2,-25892
    94d0:	10c00017 	ldw	r3,0(r2)
    94d4:	defff904 	addi	sp,sp,-28
    94d8:	dc000015 	stw	r16,0(sp)
    94dc:	1c000c17 	ldw	r16,48(r3)
    94e0:	dd400515 	stw	r21,20(sp)
    94e4:	dd000415 	stw	r20,16(sp)
    94e8:	dcc00315 	stw	r19,12(sp)
    94ec:	dc800215 	stw	r18,8(sp)
    94f0:	dc400115 	stw	r17,4(sp)
    94f4:	dfc00615 	stw	ra,24(sp)
    94f8:	202b883a 	mov	r21,r4
    94fc:	2823883a 	mov	r17,r5
    9500:	3027883a 	mov	r19,r6
    9504:	3825883a 	mov	r18,r7
    9508:	1029883a 	mov	r20,r2
    950c:	8000021e 	bne	r16,zero,9518 <__register_exitproc+0x50>
    9510:	1c000d04 	addi	r16,r3,52
    9514:	1c000c15 	stw	r16,48(r3)
    9518:	80800117 	ldw	r2,4(r16)
    951c:	00c007c4 	movi	r3,31
    9520:	1880110e 	bge	r3,r2,9568 <__register_exitproc+0xa0>
    9524:	00800034 	movhi	r2,0
    9528:	10800004 	addi	r2,r2,0
    952c:	1000021e 	bne	r2,zero,9538 <__register_exitproc+0x70>
    9530:	00bfffc4 	movi	r2,-1
    9534:	00003106 	br	95fc <__register_exitproc+0x134>
    9538:	01002304 	movi	r4,140
    953c:	00000000 	call	0 <__reset-0x8000>
    9540:	1021883a 	mov	r16,r2
    9544:	103ffa26 	beq	r2,zero,9530 <_gp+0xffff7a54>
    9548:	10000115 	stw	zero,4(r2)
    954c:	a0800017 	ldw	r2,0(r20)
    9550:	10c00c17 	ldw	r3,48(r2)
    9554:	80c00015 	stw	r3,0(r16)
    9558:	14000c15 	stw	r16,48(r2)
    955c:	80002215 	stw	zero,136(r16)
    9560:	a8001d26 	beq	r21,zero,95d8 <__register_exitproc+0x110>
    9564:	00000606 	br	9580 <__register_exitproc+0xb8>
    9568:	a8001b26 	beq	r21,zero,95d8 <__register_exitproc+0x110>
    956c:	80802217 	ldw	r2,136(r16)
    9570:	1000091e 	bne	r2,zero,9598 <__register_exitproc+0xd0>
    9574:	00800034 	movhi	r2,0
    9578:	10800004 	addi	r2,r2,0
    957c:	103fec26 	beq	r2,zero,9530 <_gp+0xffff7a54>
    9580:	01004204 	movi	r4,264
    9584:	00000000 	call	0 <__reset-0x8000>
    9588:	103fe926 	beq	r2,zero,9530 <_gp+0xffff7a54>
    958c:	10004015 	stw	zero,256(r2)
    9590:	10004115 	stw	zero,260(r2)
    9594:	80802215 	stw	r2,136(r16)
    9598:	81400117 	ldw	r5,4(r16)
    959c:	01000044 	movi	r4,1
    95a0:	2947883a 	add	r3,r5,r5
    95a4:	18c7883a 	add	r3,r3,r3
    95a8:	10c7883a 	add	r3,r2,r3
    95ac:	1cc00015 	stw	r19,0(r3)
    95b0:	2148983a 	sll	r4,r4,r5
    95b4:	11404017 	ldw	r5,256(r2)
    95b8:	290ab03a 	or	r5,r5,r4
    95bc:	11404015 	stw	r5,256(r2)
    95c0:	1c802015 	stw	r18,128(r3)
    95c4:	00c00084 	movi	r3,2
    95c8:	a8c0031e 	bne	r21,r3,95d8 <__register_exitproc+0x110>
    95cc:	10c04117 	ldw	r3,260(r2)
    95d0:	1908b03a 	or	r4,r3,r4
    95d4:	11004115 	stw	r4,260(r2)
    95d8:	80800117 	ldw	r2,4(r16)
    95dc:	10c00044 	addi	r3,r2,1
    95e0:	10800084 	addi	r2,r2,2
    95e4:	1085883a 	add	r2,r2,r2
    95e8:	1085883a 	add	r2,r2,r2
    95ec:	80c00115 	stw	r3,4(r16)
    95f0:	80a1883a 	add	r16,r16,r2
    95f4:	84400015 	stw	r17,0(r16)
    95f8:	0005883a 	mov	r2,zero
    95fc:	dfc00617 	ldw	ra,24(sp)
    9600:	dd400517 	ldw	r21,20(sp)
    9604:	dd000417 	ldw	r20,16(sp)
    9608:	dcc00317 	ldw	r19,12(sp)
    960c:	dc800217 	ldw	r18,8(sp)
    9610:	dc400117 	ldw	r17,4(sp)
    9614:	dc000017 	ldw	r16,0(sp)
    9618:	dec00704 	addi	sp,sp,28
    961c:	f800283a 	ret

00009620 <__call_exitprocs>:
    9620:	defff504 	addi	sp,sp,-44
    9624:	dd000515 	stw	r20,20(sp)
    9628:	05000074 	movhi	r20,1
    962c:	dc800315 	stw	r18,12(sp)
    9630:	dfc00a15 	stw	ra,40(sp)
    9634:	df000915 	stw	fp,36(sp)
    9638:	ddc00815 	stw	r23,32(sp)
    963c:	dd800715 	stw	r22,28(sp)
    9640:	dd400615 	stw	r21,24(sp)
    9644:	dcc00415 	stw	r19,16(sp)
    9648:	dc400215 	stw	r17,8(sp)
    964c:	dc000115 	stw	r16,4(sp)
    9650:	d9000015 	stw	r4,0(sp)
    9654:	2825883a 	mov	r18,r5
    9658:	a526b704 	addi	r20,r20,-25892
    965c:	a4400017 	ldw	r17,0(r20)
    9660:	8cc00c17 	ldw	r19,48(r17)
    9664:	8c400c04 	addi	r17,r17,48
    9668:	98004526 	beq	r19,zero,9780 <__call_exitprocs+0x160>
    966c:	9c000117 	ldw	r16,4(r19)
    9670:	00900034 	movhi	r2,16384
    9674:	10bfffc4 	addi	r2,r2,-1
    9678:	9d402217 	ldw	r21,136(r19)
    967c:	85bfffc4 	addi	r22,r16,-1
    9680:	80a1883a 	add	r16,r16,r2
    9684:	8421883a 	add	r16,r16,r16
    9688:	8421883a 	add	r16,r16,r16
    968c:	ac2f883a 	add	r23,r21,r16
    9690:	84000204 	addi	r16,r16,8
    9694:	9c21883a 	add	r16,r19,r16
    9698:	b0002716 	blt	r22,zero,9738 <__call_exitprocs+0x118>
    969c:	90000726 	beq	r18,zero,96bc <__call_exitprocs+0x9c>
    96a0:	a800041e 	bne	r21,zero,96b4 <__call_exitprocs+0x94>
    96a4:	b5bfffc4 	addi	r22,r22,-1
    96a8:	bdffff04 	addi	r23,r23,-4
    96ac:	843fff04 	addi	r16,r16,-4
    96b0:	003ff906 	br	9698 <_gp+0xffff7bbc>
    96b4:	b9002017 	ldw	r4,128(r23)
    96b8:	913ffa1e 	bne	r18,r4,96a4 <_gp+0xffff7bc8>
    96bc:	99000117 	ldw	r4,4(r19)
    96c0:	82000017 	ldw	r8,0(r16)
    96c4:	213fffc4 	addi	r4,r4,-1
    96c8:	b100021e 	bne	r22,r4,96d4 <__call_exitprocs+0xb4>
    96cc:	9d800115 	stw	r22,4(r19)
    96d0:	00000106 	br	96d8 <__call_exitprocs+0xb8>
    96d4:	80000015 	stw	zero,0(r16)
    96d8:	403ff226 	beq	r8,zero,96a4 <_gp+0xffff7bc8>
    96dc:	9f000117 	ldw	fp,4(r19)
    96e0:	a8000526 	beq	r21,zero,96f8 <__call_exitprocs+0xd8>
    96e4:	00800044 	movi	r2,1
    96e8:	1592983a 	sll	r9,r2,r22
    96ec:	a9404017 	ldw	r5,256(r21)
    96f0:	494a703a 	and	r5,r9,r5
    96f4:	2800021e 	bne	r5,zero,9700 <__call_exitprocs+0xe0>
    96f8:	403ee83a 	callr	r8
    96fc:	00000906 	br	9724 <__call_exitprocs+0x104>
    9700:	a9004117 	ldw	r4,260(r21)
    9704:	4908703a 	and	r4,r9,r4
    9708:	2000041e 	bne	r4,zero,971c <__call_exitprocs+0xfc>
    970c:	b9400017 	ldw	r5,0(r23)
    9710:	d9000017 	ldw	r4,0(sp)
    9714:	403ee83a 	callr	r8
    9718:	00000206 	br	9724 <__call_exitprocs+0x104>
    971c:	b9000017 	ldw	r4,0(r23)
    9720:	403ee83a 	callr	r8
    9724:	99000117 	ldw	r4,4(r19)
    9728:	e13fcc1e 	bne	fp,r4,965c <_gp+0xffff7b80>
    972c:	89000017 	ldw	r4,0(r17)
    9730:	993fdc26 	beq	r19,r4,96a4 <_gp+0xffff7bc8>
    9734:	003fc906 	br	965c <_gp+0xffff7b80>
    9738:	00800034 	movhi	r2,0
    973c:	10800004 	addi	r2,r2,0
    9740:	10000f26 	beq	r2,zero,9780 <__call_exitprocs+0x160>
    9744:	99400117 	ldw	r5,4(r19)
    9748:	99000017 	ldw	r4,0(r19)
    974c:	2800091e 	bne	r5,zero,9774 <__call_exitprocs+0x154>
    9750:	20000826 	beq	r4,zero,9774 <__call_exitprocs+0x154>
    9754:	89000015 	stw	r4,0(r17)
    9758:	a8000226 	beq	r21,zero,9764 <__call_exitprocs+0x144>
    975c:	a809883a 	mov	r4,r21
    9760:	00000000 	call	0 <__reset-0x8000>
    9764:	9809883a 	mov	r4,r19
    9768:	00000000 	call	0 <__reset-0x8000>
    976c:	8cc00017 	ldw	r19,0(r17)
    9770:	003fbd06 	br	9668 <_gp+0xffff7b8c>
    9774:	9823883a 	mov	r17,r19
    9778:	2027883a 	mov	r19,r4
    977c:	003fba06 	br	9668 <_gp+0xffff7b8c>
    9780:	dfc00a17 	ldw	ra,40(sp)
    9784:	df000917 	ldw	fp,36(sp)
    9788:	ddc00817 	ldw	r23,32(sp)
    978c:	dd800717 	ldw	r22,28(sp)
    9790:	dd400617 	ldw	r21,24(sp)
    9794:	dd000517 	ldw	r20,20(sp)
    9798:	dcc00417 	ldw	r19,16(sp)
    979c:	dc800317 	ldw	r18,12(sp)
    97a0:	dc400217 	ldw	r17,8(sp)
    97a4:	dc000117 	ldw	r16,4(sp)
    97a8:	dec00b04 	addi	sp,sp,44
    97ac:	f800283a 	ret

000097b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    97b0:	defffd04 	addi	sp,sp,-12
    97b4:	df000215 	stw	fp,8(sp)
    97b8:	df000204 	addi	fp,sp,8
    97bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    97c0:	0001883a 	nop
    97c4:	e0bfff17 	ldw	r2,-4(fp)
    97c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    97cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    97d0:	10000226 	beq	r2,zero,97dc <_exit+0x2c>
    ALT_SIM_FAIL();
    97d4:	002af070 	cmpltui	zero,zero,43969
    97d8:	00000106 	br	97e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    97dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    97e0:	003fff06 	br	97e0 <_gp+0xffff7d04>
