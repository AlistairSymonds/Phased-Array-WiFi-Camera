
mm_test.elf:     file format elf32-littlenios2
mm_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001e14 memsz 0x00001e14 flags r-x
    LOAD off    0x00002e34 vaddr 0x00009e34 paddr 0x0000a108 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000033dc vaddr 0x0000a3dc paddr 0x0000a3dc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003108  2**0
                  CONTENTS
  2 .text         00001db4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  00009dd4  00009dd4  00002dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00009e34  0000a108  00002e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000a3dc  0000a3dc  000033dc  2**2
                  ALLOC, SMALL_DATA
  6 .ram_onchip   00000000  0000a3ec  0000a3ec  00003108  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000510  00000000  00000000  00003130  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000073cc  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025f6  00000000  00000000  0000aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002ad5  00000000  00000000  0000d002  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009b0  00000000  00000000  0000fad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001698  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000014f4  00000000  00000000  00011b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00013014  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000149e6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  000149e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000149ef  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000149f0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000149f1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000149f5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000149f9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000149fd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00014a06  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00014a0f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  00014a18  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000068  00000000  00000000  00014a29  2**0
                  CONTENTS, READONLY
 29 .jdi          000049d0  00000000  00000000  00014a91  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00061259  00000000  00000000  00019461  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009dd4 l    d  .rodata	00000000 .rodata
00009e34 l    d  .rwdata	00000000 .rwdata
0000a3dc l    d  .bss	00000000 .bss
0000a3ec l    d  .ram_onchip	00000000 .ram_onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mm_test_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008220 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009e34 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00008a90 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008bf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008d2c l     F .text	00000034 alt_dev_reg
00009f14 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009018 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000916c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009198 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000936c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000094ac l     F .text	0000003c alt_get_errno
000094e8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008b7c g     F .text	0000007c alt_main
00008170 g     F .text	00000080 _puts_r
0000a108 g       *ABS*	00000000 __flash_rwdata_start
00008124 g     F .text	0000004c printf
00009764 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a3dc g     O .bss	00000004 errno
0000a3e4 g     O .bss	00000004 alt_argv
000120e8 g       *ABS*	00000000 _gp
00009f68 g     O .rwdata	00000180 alt_fd_list
00009788 g     F .text	00000090 alt_find_dev
00009430 g     F .text	0000007c alt_io_redirect
00009dd4 g       *ABS*	00000000 __DTOR_END__
000081f0 g     F .text	00000014 puts
00008e98 g     F .text	000000ec altera_avalon_jtag_uart_read
000080e8 g     F .text	0000003c _printf_r
000089d4 g     F .text	00000064 .hidden __udivsi3
000099c4 g     F .text	00000090 alt_icache_flush
0000a100 g     O .rwdata	00000004 alt_max_fd
0000a0e8 g     O .rwdata	00000004 _global_impure_ptr
0000a3ec g       *ABS*	00000000 __bss_end
00009f40 g     O .rwdata	00000028 alt_dev_null
00009124 g     F .text	00000048 alt_dcache_flush_all
0000a108 g       *ABS*	00000000 __ram_rwdata_end
0000a0f8 g     O .rwdata	00000008 alt_dev_list
00008c34 g     F .text	000000f8 write
00009e34 g       *ABS*	00000000 __ram_rodata_end
00008a38 g     F .text	00000058 .hidden __umodsi3
0000a3ec g       *ABS*	00000000 end
00009dd4 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008f84 g     F .text	00000094 altera_avalon_jtag_uart_write
00008000 g       *ABS*	00000000 __alt_mem_ram_onchip
0000828c g     F .text	00000524 ___vfprintf_internal_r
00009c10 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000004c _start
00008d98 g     F .text	00000040 alt_sys_init
00009ab8 g     F .text	00000158 __register_exitproc
00009e34 g       *ABS*	00000000 __ram_rwdata_start
00009dd4 g       *ABS*	00000000 __ram_rodata_start
00008dd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009920 g     F .text	000000a4 alt_get_fd
00009a88 g     F .text	00000030 memcmp
0000a3ec g       *ABS*	00000000 __alt_stack_base
00009818 g     F .text	00000108 alt_find_file
000091d4 g     F .text	000000a4 alt_dev_llist_insert
000087cc g     F .text	000000b8 __sfvwrite_small_dev
0000a3dc g       *ABS*	00000000 __bss_start
0000806c g     F .text	0000007c main
0000a3e8 g     O .bss	00000004 alt_envp
00008e38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a104 g     O .rwdata	00000004 alt_errno
000088dc g     F .text	00000084 .hidden __divsi3
00009dd4 g       *ABS*	00000000 __CTOR_END__
00009dd4 g       *ABS*	00000000 __flash_rodata_start
00009dd4 g       *ABS*	00000000 __DTOR_LIST__
00008d60 g     F .text	00000038 alt_irq_init
00009700 g     F .text	00000064 alt_release_fd
00009a54 g     F .text	00000014 atexit
00008884 g     F .text	00000058 _write_r
0000a0ec g     O .rwdata	00000004 _impure_ptr
0000a3e0 g     O .bss	00000004 alt_argc
000092d8 g     F .text	00000060 _do_dtors
0000a0f0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a108 g       *ABS*	00000000 _edata
0000a3ec g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009a68 g     F .text	00000020 exit
00008960 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00009da0 g     F .text	00000034 _exit
00008204 g     F .text	0000001c strlen
000095ac g     F .text	00000154 open
00009338 g     F .text	00000034 alt_icache_flush_all
000087b0 g     F .text	0000001c __vfprintf_internal
00009278 g     F .text	00000060 _do_ctors
00009054 g     F .text	000000d0 close
00008af8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff5f1c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_gp+0xffff5f3c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6883a14 	ori	gp,gp,8424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a8f714 	ori	r2,r2,41948

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e8fb14 	ori	r3,r3,41964

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_gp+0xffff5f6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	0008af80 	call	8af8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	0008b7c0 	call	8b7c <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <_gp+0xffff5f80>

0000806c <main>:

#include <stdio.h>
#include "system.h"

int main()
{
    806c:	defffd04 	addi	sp,sp,-12
    8070:	dfc00215 	stw	ra,8(sp)
    8074:	df000115 	stw	fp,4(sp)
    8078:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
    807c:	01000074 	movhi	r4,1
    8080:	21277504 	addi	r4,r4,-25132
    8084:	00081f00 	call	81f0 <puts>

  uint * custom_pio = MM_PIO_TEST_0_BASE;
    8088:	e03fff15 	stw	zero,-4(fp)
  *(custom_pio) = 0x00;
    808c:	e0bfff17 	ldw	r2,-4(fp)
    8090:	10000015 	stw	zero,0(r2)
  printf("Custom's value is now %x \n", *(custom_pio));
    8094:	e0bfff17 	ldw	r2,-4(fp)
    8098:	10800017 	ldw	r2,0(r2)
    809c:	100b883a 	mov	r5,r2
    80a0:	01000074 	movhi	r4,1
    80a4:	21277a04 	addi	r4,r4,-25112
    80a8:	00081240 	call	8124 <printf>
  *(custom_pio) = 0x01;
    80ac:	e0bfff17 	ldw	r2,-4(fp)
    80b0:	00c00044 	movi	r3,1
    80b4:	10c00015 	stw	r3,0(r2)
  printf("Custom's value is now %x \n", *(custom_pio));
    80b8:	e0bfff17 	ldw	r2,-4(fp)
    80bc:	10800017 	ldw	r2,0(r2)
    80c0:	100b883a 	mov	r5,r2
    80c4:	01000074 	movhi	r4,1
    80c8:	21277a04 	addi	r4,r4,-25112
    80cc:	00081240 	call	8124 <printf>
  return 0;
    80d0:	0005883a 	mov	r2,zero
}
    80d4:	e037883a 	mov	sp,fp
    80d8:	dfc00117 	ldw	ra,4(sp)
    80dc:	df000017 	ldw	fp,0(sp)
    80e0:	dec00204 	addi	sp,sp,8
    80e4:	f800283a 	ret

000080e8 <_printf_r>:
    80e8:	defffd04 	addi	sp,sp,-12
    80ec:	dfc00015 	stw	ra,0(sp)
    80f0:	d9800115 	stw	r6,4(sp)
    80f4:	d9c00215 	stw	r7,8(sp)
    80f8:	20c00217 	ldw	r3,8(r4)
    80fc:	01800074 	movhi	r6,1
    8100:	31a1f304 	addi	r6,r6,-30772
    8104:	19800115 	stw	r6,4(r3)
    8108:	280d883a 	mov	r6,r5
    810c:	21400217 	ldw	r5,8(r4)
    8110:	d9c00104 	addi	r7,sp,4
    8114:	000828c0 	call	828c <___vfprintf_internal_r>
    8118:	dfc00017 	ldw	ra,0(sp)
    811c:	dec00304 	addi	sp,sp,12
    8120:	f800283a 	ret

00008124 <printf>:
    8124:	defffc04 	addi	sp,sp,-16
    8128:	dfc00015 	stw	ra,0(sp)
    812c:	d9400115 	stw	r5,4(sp)
    8130:	d9800215 	stw	r6,8(sp)
    8134:	d9c00315 	stw	r7,12(sp)
    8138:	00800074 	movhi	r2,1
    813c:	10a83b04 	addi	r2,r2,-24340
    8140:	10800017 	ldw	r2,0(r2)
    8144:	01400074 	movhi	r5,1
    8148:	2961f304 	addi	r5,r5,-30772
    814c:	10c00217 	ldw	r3,8(r2)
    8150:	d9800104 	addi	r6,sp,4
    8154:	19400115 	stw	r5,4(r3)
    8158:	200b883a 	mov	r5,r4
    815c:	11000217 	ldw	r4,8(r2)
    8160:	00087b00 	call	87b0 <__vfprintf_internal>
    8164:	dfc00017 	ldw	ra,0(sp)
    8168:	dec00404 	addi	sp,sp,16
    816c:	f800283a 	ret

00008170 <_puts_r>:
    8170:	defffd04 	addi	sp,sp,-12
    8174:	dc000015 	stw	r16,0(sp)
    8178:	2021883a 	mov	r16,r4
    817c:	2809883a 	mov	r4,r5
    8180:	dfc00215 	stw	ra,8(sp)
    8184:	dc400115 	stw	r17,4(sp)
    8188:	2823883a 	mov	r17,r5
    818c:	00082040 	call	8204 <strlen>
    8190:	81400217 	ldw	r5,8(r16)
    8194:	01000074 	movhi	r4,1
    8198:	2121f304 	addi	r4,r4,-30772
    819c:	29000115 	stw	r4,4(r5)
    81a0:	100f883a 	mov	r7,r2
    81a4:	880d883a 	mov	r6,r17
    81a8:	8009883a 	mov	r4,r16
    81ac:	00087cc0 	call	87cc <__sfvwrite_small_dev>
    81b0:	00ffffc4 	movi	r3,-1
    81b4:	10c00926 	beq	r2,r3,81dc <_puts_r+0x6c>
    81b8:	81400217 	ldw	r5,8(r16)
    81bc:	01800074 	movhi	r6,1
    81c0:	01c00044 	movi	r7,1
    81c4:	28800117 	ldw	r2,4(r5)
    81c8:	31a78104 	addi	r6,r6,-25084
    81cc:	8009883a 	mov	r4,r16
    81d0:	103ee83a 	callr	r2
    81d4:	10bfffe0 	cmpeqi	r2,r2,-1
    81d8:	0085c83a 	sub	r2,zero,r2
    81dc:	dfc00217 	ldw	ra,8(sp)
    81e0:	dc400117 	ldw	r17,4(sp)
    81e4:	dc000017 	ldw	r16,0(sp)
    81e8:	dec00304 	addi	sp,sp,12
    81ec:	f800283a 	ret

000081f0 <puts>:
    81f0:	00800074 	movhi	r2,1
    81f4:	10a83b04 	addi	r2,r2,-24340
    81f8:	200b883a 	mov	r5,r4
    81fc:	11000017 	ldw	r4,0(r2)
    8200:	00081701 	jmpi	8170 <_puts_r>

00008204 <strlen>:
    8204:	2005883a 	mov	r2,r4
    8208:	10c00007 	ldb	r3,0(r2)
    820c:	18000226 	beq	r3,zero,8218 <strlen+0x14>
    8210:	10800044 	addi	r2,r2,1
    8214:	003ffc06 	br	8208 <_gp+0xffff6120>
    8218:	1105c83a 	sub	r2,r2,r4
    821c:	f800283a 	ret

00008220 <print_repeat>:
    8220:	defffb04 	addi	sp,sp,-20
    8224:	dc800315 	stw	r18,12(sp)
    8228:	dc400215 	stw	r17,8(sp)
    822c:	dc000115 	stw	r16,4(sp)
    8230:	dfc00415 	stw	ra,16(sp)
    8234:	2025883a 	mov	r18,r4
    8238:	2823883a 	mov	r17,r5
    823c:	d9800005 	stb	r6,0(sp)
    8240:	3821883a 	mov	r16,r7
    8244:	04000a0e 	bge	zero,r16,8270 <print_repeat+0x50>
    8248:	88800117 	ldw	r2,4(r17)
    824c:	01c00044 	movi	r7,1
    8250:	d80d883a 	mov	r6,sp
    8254:	880b883a 	mov	r5,r17
    8258:	9009883a 	mov	r4,r18
    825c:	103ee83a 	callr	r2
    8260:	843fffc4 	addi	r16,r16,-1
    8264:	103ff726 	beq	r2,zero,8244 <_gp+0xffff615c>
    8268:	00bfffc4 	movi	r2,-1
    826c:	00000106 	br	8274 <print_repeat+0x54>
    8270:	0005883a 	mov	r2,zero
    8274:	dfc00417 	ldw	ra,16(sp)
    8278:	dc800317 	ldw	r18,12(sp)
    827c:	dc400217 	ldw	r17,8(sp)
    8280:	dc000117 	ldw	r16,4(sp)
    8284:	dec00504 	addi	sp,sp,20
    8288:	f800283a 	ret

0000828c <___vfprintf_internal_r>:
    828c:	deffe504 	addi	sp,sp,-108
    8290:	d8c00804 	addi	r3,sp,32
    8294:	df001915 	stw	fp,100(sp)
    8298:	ddc01815 	stw	r23,96(sp)
    829c:	dd801715 	stw	r22,92(sp)
    82a0:	dd401615 	stw	r21,88(sp)
    82a4:	dd001515 	stw	r20,84(sp)
    82a8:	dcc01415 	stw	r19,80(sp)
    82ac:	dc801315 	stw	r18,76(sp)
    82b0:	dc401215 	stw	r17,72(sp)
    82b4:	dc001115 	stw	r16,68(sp)
    82b8:	dfc01a15 	stw	ra,104(sp)
    82bc:	2027883a 	mov	r19,r4
    82c0:	2839883a 	mov	fp,r5
    82c4:	382d883a 	mov	r22,r7
    82c8:	d9800f15 	stw	r6,60(sp)
    82cc:	0021883a 	mov	r16,zero
    82d0:	d8000e15 	stw	zero,56(sp)
    82d4:	002f883a 	mov	r23,zero
    82d8:	002b883a 	mov	r21,zero
    82dc:	0025883a 	mov	r18,zero
    82e0:	0023883a 	mov	r17,zero
    82e4:	d8000c15 	stw	zero,48(sp)
    82e8:	d8000b15 	stw	zero,44(sp)
    82ec:	0029883a 	mov	r20,zero
    82f0:	d8c00915 	stw	r3,36(sp)
    82f4:	d8c00f17 	ldw	r3,60(sp)
    82f8:	19000003 	ldbu	r4,0(r3)
    82fc:	20803fcc 	andi	r2,r4,255
    8300:	1080201c 	xori	r2,r2,128
    8304:	10bfe004 	addi	r2,r2,-128
    8308:	10011c26 	beq	r2,zero,877c <___vfprintf_internal_r+0x4f0>
    830c:	00c00044 	movi	r3,1
    8310:	a0c01426 	beq	r20,r3,8364 <___vfprintf_internal_r+0xd8>
    8314:	1d000216 	blt	r3,r20,8320 <___vfprintf_internal_r+0x94>
    8318:	a0000626 	beq	r20,zero,8334 <___vfprintf_internal_r+0xa8>
    831c:	00011306 	br	876c <___vfprintf_internal_r+0x4e0>
    8320:	01400084 	movi	r5,2
    8324:	a1401d26 	beq	r20,r5,839c <___vfprintf_internal_r+0x110>
    8328:	014000c4 	movi	r5,3
    832c:	a1402926 	beq	r20,r5,83d4 <___vfprintf_internal_r+0x148>
    8330:	00010e06 	br	876c <___vfprintf_internal_r+0x4e0>
    8334:	01400944 	movi	r5,37
    8338:	1140fb26 	beq	r2,r5,8728 <___vfprintf_internal_r+0x49c>
    833c:	e0800117 	ldw	r2,4(fp)
    8340:	d9000005 	stb	r4,0(sp)
    8344:	01c00044 	movi	r7,1
    8348:	d80d883a 	mov	r6,sp
    834c:	e00b883a 	mov	r5,fp
    8350:	9809883a 	mov	r4,r19
    8354:	103ee83a 	callr	r2
    8358:	1000d61e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    835c:	84000044 	addi	r16,r16,1
    8360:	00010206 	br	876c <___vfprintf_internal_r+0x4e0>
    8364:	01400c04 	movi	r5,48
    8368:	1140f826 	beq	r2,r5,874c <___vfprintf_internal_r+0x4c0>
    836c:	01400944 	movi	r5,37
    8370:	11400a1e 	bne	r2,r5,839c <___vfprintf_internal_r+0x110>
    8374:	d8800005 	stb	r2,0(sp)
    8378:	e0800117 	ldw	r2,4(fp)
    837c:	a00f883a 	mov	r7,r20
    8380:	d80d883a 	mov	r6,sp
    8384:	e00b883a 	mov	r5,fp
    8388:	9809883a 	mov	r4,r19
    838c:	103ee83a 	callr	r2
    8390:	1000c81e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    8394:	84000044 	addi	r16,r16,1
    8398:	0000f306 	br	8768 <___vfprintf_internal_r+0x4dc>
    839c:	217ff404 	addi	r5,r4,-48
    83a0:	29403fcc 	andi	r5,r5,255
    83a4:	00c00244 	movi	r3,9
    83a8:	19400736 	bltu	r3,r5,83c8 <___vfprintf_internal_r+0x13c>
    83ac:	00bfffc4 	movi	r2,-1
    83b0:	88800226 	beq	r17,r2,83bc <___vfprintf_internal_r+0x130>
    83b4:	8c4002a4 	muli	r17,r17,10
    83b8:	00000106 	br	83c0 <___vfprintf_internal_r+0x134>
    83bc:	0023883a 	mov	r17,zero
    83c0:	2c63883a 	add	r17,r5,r17
    83c4:	0000e206 	br	8750 <___vfprintf_internal_r+0x4c4>
    83c8:	01400b84 	movi	r5,46
    83cc:	1140e426 	beq	r2,r5,8760 <___vfprintf_internal_r+0x4d4>
    83d0:	05000084 	movi	r20,2
    83d4:	213ff404 	addi	r4,r4,-48
    83d8:	21003fcc 	andi	r4,r4,255
    83dc:	00c00244 	movi	r3,9
    83e0:	19000736 	bltu	r3,r4,8400 <___vfprintf_internal_r+0x174>
    83e4:	00bfffc4 	movi	r2,-1
    83e8:	90800226 	beq	r18,r2,83f4 <___vfprintf_internal_r+0x168>
    83ec:	948002a4 	muli	r18,r18,10
    83f0:	00000106 	br	83f8 <___vfprintf_internal_r+0x16c>
    83f4:	0025883a 	mov	r18,zero
    83f8:	24a5883a 	add	r18,r4,r18
    83fc:	0000db06 	br	876c <___vfprintf_internal_r+0x4e0>
    8400:	00c01b04 	movi	r3,108
    8404:	10c0d426 	beq	r2,r3,8758 <___vfprintf_internal_r+0x4cc>
    8408:	013fffc4 	movi	r4,-1
    840c:	91000226 	beq	r18,r4,8418 <___vfprintf_internal_r+0x18c>
    8410:	d8000b15 	stw	zero,44(sp)
    8414:	00000106 	br	841c <___vfprintf_internal_r+0x190>
    8418:	04800044 	movi	r18,1
    841c:	01001a44 	movi	r4,105
    8420:	11001626 	beq	r2,r4,847c <___vfprintf_internal_r+0x1f0>
    8424:	20800916 	blt	r4,r2,844c <___vfprintf_internal_r+0x1c0>
    8428:	010018c4 	movi	r4,99
    842c:	11008a26 	beq	r2,r4,8658 <___vfprintf_internal_r+0x3cc>
    8430:	01001904 	movi	r4,100
    8434:	11001126 	beq	r2,r4,847c <___vfprintf_internal_r+0x1f0>
    8438:	01001604 	movi	r4,88
    843c:	1100ca1e 	bne	r2,r4,8768 <___vfprintf_internal_r+0x4dc>
    8440:	00c00044 	movi	r3,1
    8444:	d8c00e15 	stw	r3,56(sp)
    8448:	00001406 	br	849c <___vfprintf_internal_r+0x210>
    844c:	01001cc4 	movi	r4,115
    8450:	11009a26 	beq	r2,r4,86bc <___vfprintf_internal_r+0x430>
    8454:	20800416 	blt	r4,r2,8468 <___vfprintf_internal_r+0x1dc>
    8458:	01001bc4 	movi	r4,111
    845c:	1100c21e 	bne	r2,r4,8768 <___vfprintf_internal_r+0x4dc>
    8460:	05400204 	movi	r21,8
    8464:	00000e06 	br	84a0 <___vfprintf_internal_r+0x214>
    8468:	01001d44 	movi	r4,117
    846c:	11000c26 	beq	r2,r4,84a0 <___vfprintf_internal_r+0x214>
    8470:	01001e04 	movi	r4,120
    8474:	11000926 	beq	r2,r4,849c <___vfprintf_internal_r+0x210>
    8478:	0000bb06 	br	8768 <___vfprintf_internal_r+0x4dc>
    847c:	b5000104 	addi	r20,r22,4
    8480:	b8000726 	beq	r23,zero,84a0 <___vfprintf_internal_r+0x214>
    8484:	dd000d15 	stw	r20,52(sp)
    8488:	b5800017 	ldw	r22,0(r22)
    848c:	b000080e 	bge	r22,zero,84b0 <___vfprintf_internal_r+0x224>
    8490:	05adc83a 	sub	r22,zero,r22
    8494:	02800044 	movi	r10,1
    8498:	00000606 	br	84b4 <___vfprintf_internal_r+0x228>
    849c:	05400404 	movi	r21,16
    84a0:	b0c00104 	addi	r3,r22,4
    84a4:	d8c00d15 	stw	r3,52(sp)
    84a8:	b5800017 	ldw	r22,0(r22)
    84ac:	002f883a 	mov	r23,zero
    84b0:	0015883a 	mov	r10,zero
    84b4:	d829883a 	mov	r20,sp
    84b8:	b0001426 	beq	r22,zero,850c <___vfprintf_internal_r+0x280>
    84bc:	b009883a 	mov	r4,r22
    84c0:	a80b883a 	mov	r5,r21
    84c4:	da801015 	stw	r10,64(sp)
    84c8:	00089d40 	call	89d4 <__udivsi3>
    84cc:	1549383a 	mul	r4,r2,r21
    84d0:	00c00244 	movi	r3,9
    84d4:	da801017 	ldw	r10,64(sp)
    84d8:	b12dc83a 	sub	r22,r22,r4
    84dc:	1d800216 	blt	r3,r22,84e8 <___vfprintf_internal_r+0x25c>
    84e0:	b5800c04 	addi	r22,r22,48
    84e4:	00000506 	br	84fc <___vfprintf_internal_r+0x270>
    84e8:	d8c00e17 	ldw	r3,56(sp)
    84ec:	18000226 	beq	r3,zero,84f8 <___vfprintf_internal_r+0x26c>
    84f0:	b5800dc4 	addi	r22,r22,55
    84f4:	00000106 	br	84fc <___vfprintf_internal_r+0x270>
    84f8:	b58015c4 	addi	r22,r22,87
    84fc:	a5800005 	stb	r22,0(r20)
    8500:	a5000044 	addi	r20,r20,1
    8504:	102d883a 	mov	r22,r2
    8508:	003feb06 	br	84b8 <_gp+0xffff63d0>
    850c:	a6c7c83a 	sub	r3,r20,sp
    8510:	d8c00a15 	stw	r3,40(sp)
    8514:	90c5c83a 	sub	r2,r18,r3
    8518:	00800a0e 	bge	zero,r2,8544 <___vfprintf_internal_r+0x2b8>
    851c:	a085883a 	add	r2,r20,r2
    8520:	01400c04 	movi	r5,48
    8524:	d8c00917 	ldw	r3,36(sp)
    8528:	a009883a 	mov	r4,r20
    852c:	a0c0032e 	bgeu	r20,r3,853c <___vfprintf_internal_r+0x2b0>
    8530:	a5000044 	addi	r20,r20,1
    8534:	21400005 	stb	r5,0(r4)
    8538:	a0bffa1e 	bne	r20,r2,8524 <_gp+0xffff643c>
    853c:	a6c7c83a 	sub	r3,r20,sp
    8540:	d8c00a15 	stw	r3,40(sp)
    8544:	d8c00a17 	ldw	r3,40(sp)
    8548:	50d3883a 	add	r9,r10,r3
    854c:	d8c00b17 	ldw	r3,44(sp)
    8550:	8a6dc83a 	sub	r22,r17,r9
    8554:	18001726 	beq	r3,zero,85b4 <___vfprintf_internal_r+0x328>
    8558:	50000a26 	beq	r10,zero,8584 <___vfprintf_internal_r+0x2f8>
    855c:	00800b44 	movi	r2,45
    8560:	d8800805 	stb	r2,32(sp)
    8564:	e0800117 	ldw	r2,4(fp)
    8568:	01c00044 	movi	r7,1
    856c:	d9800804 	addi	r6,sp,32
    8570:	e00b883a 	mov	r5,fp
    8574:	9809883a 	mov	r4,r19
    8578:	103ee83a 	callr	r2
    857c:	10004d1e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    8580:	84000044 	addi	r16,r16,1
    8584:	0580070e 	bge	zero,r22,85a4 <___vfprintf_internal_r+0x318>
    8588:	b00f883a 	mov	r7,r22
    858c:	01800c04 	movi	r6,48
    8590:	e00b883a 	mov	r5,fp
    8594:	9809883a 	mov	r4,r19
    8598:	00082200 	call	8220 <print_repeat>
    859c:	1000451e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    85a0:	85a1883a 	add	r16,r16,r22
    85a4:	d8c00a17 	ldw	r3,40(sp)
    85a8:	a013883a 	mov	r9,r20
    85ac:	1d2dc83a 	sub	r22,r3,r20
    85b0:	00002206 	br	863c <___vfprintf_internal_r+0x3b0>
    85b4:	0580090e 	bge	zero,r22,85dc <___vfprintf_internal_r+0x350>
    85b8:	b00f883a 	mov	r7,r22
    85bc:	01800804 	movi	r6,32
    85c0:	e00b883a 	mov	r5,fp
    85c4:	9809883a 	mov	r4,r19
    85c8:	da801015 	stw	r10,64(sp)
    85cc:	00082200 	call	8220 <print_repeat>
    85d0:	da801017 	ldw	r10,64(sp)
    85d4:	1000371e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    85d8:	85a1883a 	add	r16,r16,r22
    85dc:	503ff126 	beq	r10,zero,85a4 <_gp+0xffff64bc>
    85e0:	00800b44 	movi	r2,45
    85e4:	d8800805 	stb	r2,32(sp)
    85e8:	e0800117 	ldw	r2,4(fp)
    85ec:	01c00044 	movi	r7,1
    85f0:	d9800804 	addi	r6,sp,32
    85f4:	e00b883a 	mov	r5,fp
    85f8:	9809883a 	mov	r4,r19
    85fc:	103ee83a 	callr	r2
    8600:	10002c1e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    8604:	84000044 	addi	r16,r16,1
    8608:	003fe606 	br	85a4 <_gp+0xffff64bc>
    860c:	4a7fffc4 	addi	r9,r9,-1
    8610:	48800003 	ldbu	r2,0(r9)
    8614:	01c00044 	movi	r7,1
    8618:	d9800804 	addi	r6,sp,32
    861c:	d8800805 	stb	r2,32(sp)
    8620:	e0800117 	ldw	r2,4(fp)
    8624:	e00b883a 	mov	r5,fp
    8628:	da401015 	stw	r9,64(sp)
    862c:	9809883a 	mov	r4,r19
    8630:	103ee83a 	callr	r2
    8634:	da401017 	ldw	r9,64(sp)
    8638:	10001e1e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    863c:	8245c83a 	sub	r2,r16,r9
    8640:	4d89883a 	add	r4,r9,r22
    8644:	a085883a 	add	r2,r20,r2
    8648:	013ff016 	blt	zero,r4,860c <_gp+0xffff6524>
    864c:	1021883a 	mov	r16,r2
    8650:	dd800d17 	ldw	r22,52(sp)
    8654:	00004406 	br	8768 <___vfprintf_internal_r+0x4dc>
    8658:	00800044 	movi	r2,1
    865c:	1440080e 	bge	r2,r17,8680 <___vfprintf_internal_r+0x3f4>
    8660:	8d3fffc4 	addi	r20,r17,-1
    8664:	a00f883a 	mov	r7,r20
    8668:	01800804 	movi	r6,32
    866c:	e00b883a 	mov	r5,fp
    8670:	9809883a 	mov	r4,r19
    8674:	00082200 	call	8220 <print_repeat>
    8678:	10000e1e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    867c:	8521883a 	add	r16,r16,r20
    8680:	b0800017 	ldw	r2,0(r22)
    8684:	01c00044 	movi	r7,1
    8688:	d80d883a 	mov	r6,sp
    868c:	d8800005 	stb	r2,0(sp)
    8690:	e0800117 	ldw	r2,4(fp)
    8694:	e00b883a 	mov	r5,fp
    8698:	9809883a 	mov	r4,r19
    869c:	b5000104 	addi	r20,r22,4
    86a0:	103ee83a 	callr	r2
    86a4:	1000031e 	bne	r2,zero,86b4 <___vfprintf_internal_r+0x428>
    86a8:	84000044 	addi	r16,r16,1
    86ac:	a02d883a 	mov	r22,r20
    86b0:	00002d06 	br	8768 <___vfprintf_internal_r+0x4dc>
    86b4:	00bfffc4 	movi	r2,-1
    86b8:	00003106 	br	8780 <___vfprintf_internal_r+0x4f4>
    86bc:	b5000017 	ldw	r20,0(r22)
    86c0:	b0c00104 	addi	r3,r22,4
    86c4:	d8c00a15 	stw	r3,40(sp)
    86c8:	a009883a 	mov	r4,r20
    86cc:	00082040 	call	8204 <strlen>
    86d0:	8893c83a 	sub	r9,r17,r2
    86d4:	102d883a 	mov	r22,r2
    86d8:	0240090e 	bge	zero,r9,8700 <___vfprintf_internal_r+0x474>
    86dc:	480f883a 	mov	r7,r9
    86e0:	01800804 	movi	r6,32
    86e4:	e00b883a 	mov	r5,fp
    86e8:	9809883a 	mov	r4,r19
    86ec:	da401015 	stw	r9,64(sp)
    86f0:	00082200 	call	8220 <print_repeat>
    86f4:	da401017 	ldw	r9,64(sp)
    86f8:	103fee1e 	bne	r2,zero,86b4 <_gp+0xffff65cc>
    86fc:	8261883a 	add	r16,r16,r9
    8700:	e0800117 	ldw	r2,4(fp)
    8704:	b00f883a 	mov	r7,r22
    8708:	a00d883a 	mov	r6,r20
    870c:	e00b883a 	mov	r5,fp
    8710:	9809883a 	mov	r4,r19
    8714:	103ee83a 	callr	r2
    8718:	103fe61e 	bne	r2,zero,86b4 <_gp+0xffff65cc>
    871c:	85a1883a 	add	r16,r16,r22
    8720:	dd800a17 	ldw	r22,40(sp)
    8724:	00001006 	br	8768 <___vfprintf_internal_r+0x4dc>
    8728:	05c00044 	movi	r23,1
    872c:	04bfffc4 	movi	r18,-1
    8730:	d8000e15 	stw	zero,56(sp)
    8734:	05400284 	movi	r21,10
    8738:	9023883a 	mov	r17,r18
    873c:	d8000c15 	stw	zero,48(sp)
    8740:	d8000b15 	stw	zero,44(sp)
    8744:	b829883a 	mov	r20,r23
    8748:	00000806 	br	876c <___vfprintf_internal_r+0x4e0>
    874c:	dd000b15 	stw	r20,44(sp)
    8750:	05000084 	movi	r20,2
    8754:	00000506 	br	876c <___vfprintf_internal_r+0x4e0>
    8758:	00c00044 	movi	r3,1
    875c:	d8c00c15 	stw	r3,48(sp)
    8760:	050000c4 	movi	r20,3
    8764:	00000106 	br	876c <___vfprintf_internal_r+0x4e0>
    8768:	0029883a 	mov	r20,zero
    876c:	d8c00f17 	ldw	r3,60(sp)
    8770:	18c00044 	addi	r3,r3,1
    8774:	d8c00f15 	stw	r3,60(sp)
    8778:	003ede06 	br	82f4 <_gp+0xffff620c>
    877c:	8005883a 	mov	r2,r16
    8780:	dfc01a17 	ldw	ra,104(sp)
    8784:	df001917 	ldw	fp,100(sp)
    8788:	ddc01817 	ldw	r23,96(sp)
    878c:	dd801717 	ldw	r22,92(sp)
    8790:	dd401617 	ldw	r21,88(sp)
    8794:	dd001517 	ldw	r20,84(sp)
    8798:	dcc01417 	ldw	r19,80(sp)
    879c:	dc801317 	ldw	r18,76(sp)
    87a0:	dc401217 	ldw	r17,72(sp)
    87a4:	dc001117 	ldw	r16,68(sp)
    87a8:	dec01b04 	addi	sp,sp,108
    87ac:	f800283a 	ret

000087b0 <__vfprintf_internal>:
    87b0:	00800074 	movhi	r2,1
    87b4:	10a83b04 	addi	r2,r2,-24340
    87b8:	300f883a 	mov	r7,r6
    87bc:	280d883a 	mov	r6,r5
    87c0:	200b883a 	mov	r5,r4
    87c4:	11000017 	ldw	r4,0(r2)
    87c8:	000828c1 	jmpi	828c <___vfprintf_internal_r>

000087cc <__sfvwrite_small_dev>:
    87cc:	2880000b 	ldhu	r2,0(r5)
    87d0:	1080020c 	andi	r2,r2,8
    87d4:	10002126 	beq	r2,zero,885c <__sfvwrite_small_dev+0x90>
    87d8:	2880008f 	ldh	r2,2(r5)
    87dc:	defffa04 	addi	sp,sp,-24
    87e0:	dc000015 	stw	r16,0(sp)
    87e4:	dfc00515 	stw	ra,20(sp)
    87e8:	dd000415 	stw	r20,16(sp)
    87ec:	dcc00315 	stw	r19,12(sp)
    87f0:	dc800215 	stw	r18,8(sp)
    87f4:	dc400115 	stw	r17,4(sp)
    87f8:	2821883a 	mov	r16,r5
    87fc:	10001216 	blt	r2,zero,8848 <__sfvwrite_small_dev+0x7c>
    8800:	2027883a 	mov	r19,r4
    8804:	3025883a 	mov	r18,r6
    8808:	3823883a 	mov	r17,r7
    880c:	05010004 	movi	r20,1024
    8810:	04400b0e 	bge	zero,r17,8840 <__sfvwrite_small_dev+0x74>
    8814:	880f883a 	mov	r7,r17
    8818:	a440010e 	bge	r20,r17,8820 <__sfvwrite_small_dev+0x54>
    881c:	01c10004 	movi	r7,1024
    8820:	8140008f 	ldh	r5,2(r16)
    8824:	900d883a 	mov	r6,r18
    8828:	9809883a 	mov	r4,r19
    882c:	00088840 	call	8884 <_write_r>
    8830:	0080050e 	bge	zero,r2,8848 <__sfvwrite_small_dev+0x7c>
    8834:	88a3c83a 	sub	r17,r17,r2
    8838:	90a5883a 	add	r18,r18,r2
    883c:	003ff406 	br	8810 <_gp+0xffff6728>
    8840:	0005883a 	mov	r2,zero
    8844:	00000706 	br	8864 <__sfvwrite_small_dev+0x98>
    8848:	8080000b 	ldhu	r2,0(r16)
    884c:	10801014 	ori	r2,r2,64
    8850:	8080000d 	sth	r2,0(r16)
    8854:	00bfffc4 	movi	r2,-1
    8858:	00000206 	br	8864 <__sfvwrite_small_dev+0x98>
    885c:	00bfffc4 	movi	r2,-1
    8860:	f800283a 	ret
    8864:	dfc00517 	ldw	ra,20(sp)
    8868:	dd000417 	ldw	r20,16(sp)
    886c:	dcc00317 	ldw	r19,12(sp)
    8870:	dc800217 	ldw	r18,8(sp)
    8874:	dc400117 	ldw	r17,4(sp)
    8878:	dc000017 	ldw	r16,0(sp)
    887c:	dec00604 	addi	sp,sp,24
    8880:	f800283a 	ret

00008884 <_write_r>:
    8884:	defffd04 	addi	sp,sp,-12
    8888:	dc000015 	stw	r16,0(sp)
    888c:	04000074 	movhi	r16,1
    8890:	dc400115 	stw	r17,4(sp)
    8894:	8428f704 	addi	r16,r16,-23588
    8898:	2023883a 	mov	r17,r4
    889c:	2809883a 	mov	r4,r5
    88a0:	300b883a 	mov	r5,r6
    88a4:	380d883a 	mov	r6,r7
    88a8:	dfc00215 	stw	ra,8(sp)
    88ac:	80000015 	stw	zero,0(r16)
    88b0:	0008c340 	call	8c34 <write>
    88b4:	00ffffc4 	movi	r3,-1
    88b8:	10c0031e 	bne	r2,r3,88c8 <_write_r+0x44>
    88bc:	80c00017 	ldw	r3,0(r16)
    88c0:	18000126 	beq	r3,zero,88c8 <_write_r+0x44>
    88c4:	88c00015 	stw	r3,0(r17)
    88c8:	dfc00217 	ldw	ra,8(sp)
    88cc:	dc400117 	ldw	r17,4(sp)
    88d0:	dc000017 	ldw	r16,0(sp)
    88d4:	dec00304 	addi	sp,sp,12
    88d8:	f800283a 	ret

000088dc <__divsi3>:
    88dc:	20001b16 	blt	r4,zero,894c <__divsi3+0x70>
    88e0:	000f883a 	mov	r7,zero
    88e4:	28001616 	blt	r5,zero,8940 <__divsi3+0x64>
    88e8:	200d883a 	mov	r6,r4
    88ec:	29001a2e 	bgeu	r5,r4,8958 <__divsi3+0x7c>
    88f0:	00800804 	movi	r2,32
    88f4:	00c00044 	movi	r3,1
    88f8:	00000106 	br	8900 <__divsi3+0x24>
    88fc:	10000d26 	beq	r2,zero,8934 <__divsi3+0x58>
    8900:	294b883a 	add	r5,r5,r5
    8904:	10bfffc4 	addi	r2,r2,-1
    8908:	18c7883a 	add	r3,r3,r3
    890c:	293ffb36 	bltu	r5,r4,88fc <_gp+0xffff6814>
    8910:	0005883a 	mov	r2,zero
    8914:	18000726 	beq	r3,zero,8934 <__divsi3+0x58>
    8918:	0005883a 	mov	r2,zero
    891c:	31400236 	bltu	r6,r5,8928 <__divsi3+0x4c>
    8920:	314dc83a 	sub	r6,r6,r5
    8924:	10c4b03a 	or	r2,r2,r3
    8928:	1806d07a 	srli	r3,r3,1
    892c:	280ad07a 	srli	r5,r5,1
    8930:	183ffa1e 	bne	r3,zero,891c <_gp+0xffff6834>
    8934:	38000126 	beq	r7,zero,893c <__divsi3+0x60>
    8938:	0085c83a 	sub	r2,zero,r2
    893c:	f800283a 	ret
    8940:	014bc83a 	sub	r5,zero,r5
    8944:	39c0005c 	xori	r7,r7,1
    8948:	003fe706 	br	88e8 <_gp+0xffff6800>
    894c:	0109c83a 	sub	r4,zero,r4
    8950:	01c00044 	movi	r7,1
    8954:	003fe306 	br	88e4 <_gp+0xffff67fc>
    8958:	00c00044 	movi	r3,1
    895c:	003fee06 	br	8918 <_gp+0xffff6830>

00008960 <__modsi3>:
    8960:	20001716 	blt	r4,zero,89c0 <__modsi3+0x60>
    8964:	000f883a 	mov	r7,zero
    8968:	2005883a 	mov	r2,r4
    896c:	28001216 	blt	r5,zero,89b8 <__modsi3+0x58>
    8970:	2900162e 	bgeu	r5,r4,89cc <__modsi3+0x6c>
    8974:	01800804 	movi	r6,32
    8978:	00c00044 	movi	r3,1
    897c:	00000106 	br	8984 <__modsi3+0x24>
    8980:	30000a26 	beq	r6,zero,89ac <__modsi3+0x4c>
    8984:	294b883a 	add	r5,r5,r5
    8988:	31bfffc4 	addi	r6,r6,-1
    898c:	18c7883a 	add	r3,r3,r3
    8990:	293ffb36 	bltu	r5,r4,8980 <_gp+0xffff6898>
    8994:	18000526 	beq	r3,zero,89ac <__modsi3+0x4c>
    8998:	1806d07a 	srli	r3,r3,1
    899c:	11400136 	bltu	r2,r5,89a4 <__modsi3+0x44>
    89a0:	1145c83a 	sub	r2,r2,r5
    89a4:	280ad07a 	srli	r5,r5,1
    89a8:	183ffb1e 	bne	r3,zero,8998 <_gp+0xffff68b0>
    89ac:	38000126 	beq	r7,zero,89b4 <__modsi3+0x54>
    89b0:	0085c83a 	sub	r2,zero,r2
    89b4:	f800283a 	ret
    89b8:	014bc83a 	sub	r5,zero,r5
    89bc:	003fec06 	br	8970 <_gp+0xffff6888>
    89c0:	0109c83a 	sub	r4,zero,r4
    89c4:	01c00044 	movi	r7,1
    89c8:	003fe706 	br	8968 <_gp+0xffff6880>
    89cc:	00c00044 	movi	r3,1
    89d0:	003ff106 	br	8998 <_gp+0xffff68b0>

000089d4 <__udivsi3>:
    89d4:	200d883a 	mov	r6,r4
    89d8:	2900152e 	bgeu	r5,r4,8a30 <__udivsi3+0x5c>
    89dc:	28001416 	blt	r5,zero,8a30 <__udivsi3+0x5c>
    89e0:	00800804 	movi	r2,32
    89e4:	00c00044 	movi	r3,1
    89e8:	00000206 	br	89f4 <__udivsi3+0x20>
    89ec:	10000e26 	beq	r2,zero,8a28 <__udivsi3+0x54>
    89f0:	28000516 	blt	r5,zero,8a08 <__udivsi3+0x34>
    89f4:	294b883a 	add	r5,r5,r5
    89f8:	10bfffc4 	addi	r2,r2,-1
    89fc:	18c7883a 	add	r3,r3,r3
    8a00:	293ffa36 	bltu	r5,r4,89ec <_gp+0xffff6904>
    8a04:	18000826 	beq	r3,zero,8a28 <__udivsi3+0x54>
    8a08:	0005883a 	mov	r2,zero
    8a0c:	31400236 	bltu	r6,r5,8a18 <__udivsi3+0x44>
    8a10:	314dc83a 	sub	r6,r6,r5
    8a14:	10c4b03a 	or	r2,r2,r3
    8a18:	1806d07a 	srli	r3,r3,1
    8a1c:	280ad07a 	srli	r5,r5,1
    8a20:	183ffa1e 	bne	r3,zero,8a0c <_gp+0xffff6924>
    8a24:	f800283a 	ret
    8a28:	0005883a 	mov	r2,zero
    8a2c:	f800283a 	ret
    8a30:	00c00044 	movi	r3,1
    8a34:	003ff406 	br	8a08 <_gp+0xffff6920>

00008a38 <__umodsi3>:
    8a38:	2005883a 	mov	r2,r4
    8a3c:	2900122e 	bgeu	r5,r4,8a88 <__umodsi3+0x50>
    8a40:	28001116 	blt	r5,zero,8a88 <__umodsi3+0x50>
    8a44:	01800804 	movi	r6,32
    8a48:	00c00044 	movi	r3,1
    8a4c:	00000206 	br	8a58 <__umodsi3+0x20>
    8a50:	30000c26 	beq	r6,zero,8a84 <__umodsi3+0x4c>
    8a54:	28000516 	blt	r5,zero,8a6c <__umodsi3+0x34>
    8a58:	294b883a 	add	r5,r5,r5
    8a5c:	31bfffc4 	addi	r6,r6,-1
    8a60:	18c7883a 	add	r3,r3,r3
    8a64:	293ffa36 	bltu	r5,r4,8a50 <_gp+0xffff6968>
    8a68:	18000626 	beq	r3,zero,8a84 <__umodsi3+0x4c>
    8a6c:	1806d07a 	srli	r3,r3,1
    8a70:	11400136 	bltu	r2,r5,8a78 <__umodsi3+0x40>
    8a74:	1145c83a 	sub	r2,r2,r5
    8a78:	280ad07a 	srli	r5,r5,1
    8a7c:	183ffb1e 	bne	r3,zero,8a6c <_gp+0xffff6984>
    8a80:	f800283a 	ret
    8a84:	f800283a 	ret
    8a88:	00c00044 	movi	r3,1
    8a8c:	003ff706 	br	8a6c <_gp+0xffff6984>

00008a90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8a90:	defffc04 	addi	sp,sp,-16
    8a94:	df000315 	stw	fp,12(sp)
    8a98:	df000304 	addi	fp,sp,12
    8a9c:	e13ffd15 	stw	r4,-12(fp)
    8aa0:	e17ffe15 	stw	r5,-8(fp)
    8aa4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8aa8:	e0fffe17 	ldw	r3,-8(fp)
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	18800c26 	beq	r3,r2,8ae4 <alt_load_section+0x54>
  {
    while( to != end )
    8ab4:	00000806 	br	8ad8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8ab8:	e0bffe17 	ldw	r2,-8(fp)
    8abc:	10c00104 	addi	r3,r2,4
    8ac0:	e0fffe15 	stw	r3,-8(fp)
    8ac4:	e0fffd17 	ldw	r3,-12(fp)
    8ac8:	19000104 	addi	r4,r3,4
    8acc:	e13ffd15 	stw	r4,-12(fp)
    8ad0:	18c00017 	ldw	r3,0(r3)
    8ad4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ad8:	e0fffe17 	ldw	r3,-8(fp)
    8adc:	e0bfff17 	ldw	r2,-4(fp)
    8ae0:	18bff51e 	bne	r3,r2,8ab8 <_gp+0xffff69d0>
    {
      *to++ = *from++;
    }
  }
}
    8ae4:	0001883a 	nop
    8ae8:	e037883a 	mov	sp,fp
    8aec:	df000017 	ldw	fp,0(sp)
    8af0:	dec00104 	addi	sp,sp,4
    8af4:	f800283a 	ret

00008af8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8af8:	defffe04 	addi	sp,sp,-8
    8afc:	dfc00115 	stw	ra,4(sp)
    8b00:	df000015 	stw	fp,0(sp)
    8b04:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8b08:	01800074 	movhi	r6,1
    8b0c:	31a84204 	addi	r6,r6,-24312
    8b10:	01400074 	movhi	r5,1
    8b14:	29678d04 	addi	r5,r5,-25036
    8b18:	01000074 	movhi	r4,1
    8b1c:	21284204 	addi	r4,r4,-24312
    8b20:	0008a900 	call	8a90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8b24:	01800074 	movhi	r6,1
    8b28:	31a00804 	addi	r6,r6,-32736
    8b2c:	01400074 	movhi	r5,1
    8b30:	29600804 	addi	r5,r5,-32736
    8b34:	01000074 	movhi	r4,1
    8b38:	21200804 	addi	r4,r4,-32736
    8b3c:	0008a900 	call	8a90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8b40:	01800074 	movhi	r6,1
    8b44:	31a78d04 	addi	r6,r6,-25036
    8b48:	01400074 	movhi	r5,1
    8b4c:	29677504 	addi	r5,r5,-25132
    8b50:	01000074 	movhi	r4,1
    8b54:	21277504 	addi	r4,r4,-25132
    8b58:	0008a900 	call	8a90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b5c:	00091240 	call	9124 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8b60:	00093380 	call	9338 <alt_icache_flush_all>
}
    8b64:	0001883a 	nop
    8b68:	e037883a 	mov	sp,fp
    8b6c:	dfc00117 	ldw	ra,4(sp)
    8b70:	df000017 	ldw	fp,0(sp)
    8b74:	dec00204 	addi	sp,sp,8
    8b78:	f800283a 	ret

00008b7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b7c:	defffd04 	addi	sp,sp,-12
    8b80:	dfc00215 	stw	ra,8(sp)
    8b84:	df000115 	stw	fp,4(sp)
    8b88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b8c:	0009883a 	mov	r4,zero
    8b90:	0008d600 	call	8d60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8b94:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b98:	0008d980 	call	8d98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8b9c:	01800074 	movhi	r6,1
    8ba0:	31a78204 	addi	r6,r6,-25080
    8ba4:	01400074 	movhi	r5,1
    8ba8:	29678204 	addi	r5,r5,-25080
    8bac:	01000074 	movhi	r4,1
    8bb0:	21278204 	addi	r4,r4,-25080
    8bb4:	00094300 	call	9430 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8bb8:	00092780 	call	9278 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8bbc:	01000074 	movhi	r4,1
    8bc0:	2124b604 	addi	r4,r4,-27944
    8bc4:	0009a540 	call	9a54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8bc8:	d0a0be17 	ldw	r2,-32008(gp)
    8bcc:	d0e0bf17 	ldw	r3,-32004(gp)
    8bd0:	d120c017 	ldw	r4,-32000(gp)
    8bd4:	200d883a 	mov	r6,r4
    8bd8:	180b883a 	mov	r5,r3
    8bdc:	1009883a 	mov	r4,r2
    8be0:	000806c0 	call	806c <main>
    8be4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8be8:	01000044 	movi	r4,1
    8bec:	00090540 	call	9054 <close>
  exit (result);
    8bf0:	e13fff17 	ldw	r4,-4(fp)
    8bf4:	0009a680 	call	9a68 <exit>

00008bf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8bf8:	defffe04 	addi	sp,sp,-8
    8bfc:	dfc00115 	stw	ra,4(sp)
    8c00:	df000015 	stw	fp,0(sp)
    8c04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8c08:	d0a00717 	ldw	r2,-32740(gp)
    8c0c:	10000326 	beq	r2,zero,8c1c <alt_get_errno+0x24>
    8c10:	d0a00717 	ldw	r2,-32740(gp)
    8c14:	103ee83a 	callr	r2
    8c18:	00000106 	br	8c20 <alt_get_errno+0x28>
    8c1c:	d0a0bd04 	addi	r2,gp,-32012
}
    8c20:	e037883a 	mov	sp,fp
    8c24:	dfc00117 	ldw	ra,4(sp)
    8c28:	df000017 	ldw	fp,0(sp)
    8c2c:	dec00204 	addi	sp,sp,8
    8c30:	f800283a 	ret

00008c34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8c34:	defff904 	addi	sp,sp,-28
    8c38:	dfc00615 	stw	ra,24(sp)
    8c3c:	df000515 	stw	fp,20(sp)
    8c40:	df000504 	addi	fp,sp,20
    8c44:	e13ffd15 	stw	r4,-12(fp)
    8c48:	e17ffe15 	stw	r5,-8(fp)
    8c4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8c50:	e0bffd17 	ldw	r2,-12(fp)
    8c54:	10000616 	blt	r2,zero,8c70 <write+0x3c>
    8c58:	e0bffd17 	ldw	r2,-12(fp)
    8c5c:	10c00324 	muli	r3,r2,12
    8c60:	00800074 	movhi	r2,1
    8c64:	10a7da04 	addi	r2,r2,-24728
    8c68:	1885883a 	add	r2,r3,r2
    8c6c:	00000106 	br	8c74 <write+0x40>
    8c70:	0005883a 	mov	r2,zero
    8c74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8c78:	e0bffb17 	ldw	r2,-20(fp)
    8c7c:	10002126 	beq	r2,zero,8d04 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8c80:	e0bffb17 	ldw	r2,-20(fp)
    8c84:	10800217 	ldw	r2,8(r2)
    8c88:	108000cc 	andi	r2,r2,3
    8c8c:	10001826 	beq	r2,zero,8cf0 <write+0xbc>
    8c90:	e0bffb17 	ldw	r2,-20(fp)
    8c94:	10800017 	ldw	r2,0(r2)
    8c98:	10800617 	ldw	r2,24(r2)
    8c9c:	10001426 	beq	r2,zero,8cf0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8ca0:	e0bffb17 	ldw	r2,-20(fp)
    8ca4:	10800017 	ldw	r2,0(r2)
    8ca8:	10800617 	ldw	r2,24(r2)
    8cac:	e0ffff17 	ldw	r3,-4(fp)
    8cb0:	180d883a 	mov	r6,r3
    8cb4:	e17ffe17 	ldw	r5,-8(fp)
    8cb8:	e13ffb17 	ldw	r4,-20(fp)
    8cbc:	103ee83a 	callr	r2
    8cc0:	e0bffc15 	stw	r2,-16(fp)
    8cc4:	e0bffc17 	ldw	r2,-16(fp)
    8cc8:	1000070e 	bge	r2,zero,8ce8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    8ccc:	0008bf80 	call	8bf8 <alt_get_errno>
    8cd0:	1007883a 	mov	r3,r2
    8cd4:	e0bffc17 	ldw	r2,-16(fp)
    8cd8:	0085c83a 	sub	r2,zero,r2
    8cdc:	18800015 	stw	r2,0(r3)
        return -1;
    8ce0:	00bfffc4 	movi	r2,-1
    8ce4:	00000c06 	br	8d18 <write+0xe4>
      }
      return rval;
    8ce8:	e0bffc17 	ldw	r2,-16(fp)
    8cec:	00000a06 	br	8d18 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8cf0:	0008bf80 	call	8bf8 <alt_get_errno>
    8cf4:	1007883a 	mov	r3,r2
    8cf8:	00800344 	movi	r2,13
    8cfc:	18800015 	stw	r2,0(r3)
    8d00:	00000406 	br	8d14 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8d04:	0008bf80 	call	8bf8 <alt_get_errno>
    8d08:	1007883a 	mov	r3,r2
    8d0c:	00801444 	movi	r2,81
    8d10:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8d14:	00bfffc4 	movi	r2,-1
}
    8d18:	e037883a 	mov	sp,fp
    8d1c:	dfc00117 	ldw	ra,4(sp)
    8d20:	df000017 	ldw	fp,0(sp)
    8d24:	dec00204 	addi	sp,sp,8
    8d28:	f800283a 	ret

00008d2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8d2c:	defffd04 	addi	sp,sp,-12
    8d30:	dfc00215 	stw	ra,8(sp)
    8d34:	df000115 	stw	fp,4(sp)
    8d38:	df000104 	addi	fp,sp,4
    8d3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8d40:	d1600404 	addi	r5,gp,-32752
    8d44:	e13fff17 	ldw	r4,-4(fp)
    8d48:	00091d40 	call	91d4 <alt_dev_llist_insert>
}
    8d4c:	e037883a 	mov	sp,fp
    8d50:	dfc00117 	ldw	ra,4(sp)
    8d54:	df000017 	ldw	fp,0(sp)
    8d58:	dec00204 	addi	sp,sp,8
    8d5c:	f800283a 	ret

00008d60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8d60:	defffd04 	addi	sp,sp,-12
    8d64:	dfc00215 	stw	ra,8(sp)
    8d68:	df000115 	stw	fp,4(sp)
    8d6c:	df000104 	addi	fp,sp,4
    8d70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_V2, cpu_v2);
    8d74:	00097640 	call	9764 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8d78:	00800044 	movi	r2,1
    8d7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8d80:	0001883a 	nop
    8d84:	e037883a 	mov	sp,fp
    8d88:	dfc00117 	ldw	ra,4(sp)
    8d8c:	df000017 	ldw	fp,0(sp)
    8d90:	dec00204 	addi	sp,sp,8
    8d94:	f800283a 	ret

00008d98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8d98:	defffe04 	addi	sp,sp,-8
    8d9c:	dfc00115 	stw	ra,4(sp)
    8da0:	df000015 	stw	fp,0(sp)
    8da4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    8da8:	01000074 	movhi	r4,1
    8dac:	2127c504 	addi	r4,r4,-24812
    8db0:	0008d2c0 	call	8d2c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    8db4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    8db8:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETH, eth);
    8dbc:	0001883a 	nop
}
    8dc0:	0001883a 	nop
    8dc4:	e037883a 	mov	sp,fp
    8dc8:	dfc00117 	ldw	ra,4(sp)
    8dcc:	df000017 	ldw	fp,0(sp)
    8dd0:	dec00204 	addi	sp,sp,8
    8dd4:	f800283a 	ret

00008dd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8dd8:	defffa04 	addi	sp,sp,-24
    8ddc:	dfc00515 	stw	ra,20(sp)
    8de0:	df000415 	stw	fp,16(sp)
    8de4:	df000404 	addi	fp,sp,16
    8de8:	e13ffd15 	stw	r4,-12(fp)
    8dec:	e17ffe15 	stw	r5,-8(fp)
    8df0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8df4:	e0bffd17 	ldw	r2,-12(fp)
    8df8:	10800017 	ldw	r2,0(r2)
    8dfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8e00:	e0bffc17 	ldw	r2,-16(fp)
    8e04:	10c00a04 	addi	r3,r2,40
    8e08:	e0bffd17 	ldw	r2,-12(fp)
    8e0c:	10800217 	ldw	r2,8(r2)
    8e10:	100f883a 	mov	r7,r2
    8e14:	e1bfff17 	ldw	r6,-4(fp)
    8e18:	e17ffe17 	ldw	r5,-8(fp)
    8e1c:	1809883a 	mov	r4,r3
    8e20:	0008e980 	call	8e98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8e24:	e037883a 	mov	sp,fp
    8e28:	dfc00117 	ldw	ra,4(sp)
    8e2c:	df000017 	ldw	fp,0(sp)
    8e30:	dec00204 	addi	sp,sp,8
    8e34:	f800283a 	ret

00008e38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8e38:	defffa04 	addi	sp,sp,-24
    8e3c:	dfc00515 	stw	ra,20(sp)
    8e40:	df000415 	stw	fp,16(sp)
    8e44:	df000404 	addi	fp,sp,16
    8e48:	e13ffd15 	stw	r4,-12(fp)
    8e4c:	e17ffe15 	stw	r5,-8(fp)
    8e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8e54:	e0bffd17 	ldw	r2,-12(fp)
    8e58:	10800017 	ldw	r2,0(r2)
    8e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8e60:	e0bffc17 	ldw	r2,-16(fp)
    8e64:	10c00a04 	addi	r3,r2,40
    8e68:	e0bffd17 	ldw	r2,-12(fp)
    8e6c:	10800217 	ldw	r2,8(r2)
    8e70:	100f883a 	mov	r7,r2
    8e74:	e1bfff17 	ldw	r6,-4(fp)
    8e78:	e17ffe17 	ldw	r5,-8(fp)
    8e7c:	1809883a 	mov	r4,r3
    8e80:	0008f840 	call	8f84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8e84:	e037883a 	mov	sp,fp
    8e88:	dfc00117 	ldw	ra,4(sp)
    8e8c:	df000017 	ldw	fp,0(sp)
    8e90:	dec00204 	addi	sp,sp,8
    8e94:	f800283a 	ret

00008e98 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8e98:	defff704 	addi	sp,sp,-36
    8e9c:	df000815 	stw	fp,32(sp)
    8ea0:	df000804 	addi	fp,sp,32
    8ea4:	e13ffc15 	stw	r4,-16(fp)
    8ea8:	e17ffd15 	stw	r5,-12(fp)
    8eac:	e1bffe15 	stw	r6,-8(fp)
    8eb0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8eb4:	e0bffc17 	ldw	r2,-16(fp)
    8eb8:	10800017 	ldw	r2,0(r2)
    8ebc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    8ec0:	e0bffd17 	ldw	r2,-12(fp)
    8ec4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8ec8:	e0bffe17 	ldw	r2,-8(fp)
    8ecc:	e0fffd17 	ldw	r3,-12(fp)
    8ed0:	1885883a 	add	r2,r3,r2
    8ed4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8ed8:	00001206 	br	8f24 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8edc:	e0bff917 	ldw	r2,-28(fp)
    8ee0:	10800037 	ldwio	r2,0(r2)
    8ee4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8ee8:	e0bffb17 	ldw	r2,-20(fp)
    8eec:	10a0000c 	andi	r2,r2,32768
    8ef0:	10000626 	beq	r2,zero,8f0c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8ef4:	e0bff817 	ldw	r2,-32(fp)
    8ef8:	10c00044 	addi	r3,r2,1
    8efc:	e0fff815 	stw	r3,-32(fp)
    8f00:	e0fffb17 	ldw	r3,-20(fp)
    8f04:	10c00005 	stb	r3,0(r2)
    8f08:	00000606 	br	8f24 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    8f0c:	e0fff817 	ldw	r3,-32(fp)
    8f10:	e0bffd17 	ldw	r2,-12(fp)
    8f14:	1880071e 	bne	r3,r2,8f34 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    8f18:	e0bfff17 	ldw	r2,-4(fp)
    8f1c:	1090000c 	andi	r2,r2,16384
    8f20:	1000061e 	bne	r2,zero,8f3c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8f24:	e0fff817 	ldw	r3,-32(fp)
    8f28:	e0bffa17 	ldw	r2,-24(fp)
    8f2c:	18bfeb36 	bltu	r3,r2,8edc <_gp+0xffff6df4>
    8f30:	00000306 	br	8f40 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8f34:	0001883a 	nop
    8f38:	00000106 	br	8f40 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    8f3c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8f40:	e0fff817 	ldw	r3,-32(fp)
    8f44:	e0bffd17 	ldw	r2,-12(fp)
    8f48:	18800426 	beq	r3,r2,8f5c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8f4c:	e0fff817 	ldw	r3,-32(fp)
    8f50:	e0bffd17 	ldw	r2,-12(fp)
    8f54:	1885c83a 	sub	r2,r3,r2
    8f58:	00000606 	br	8f74 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8f5c:	e0bfff17 	ldw	r2,-4(fp)
    8f60:	1090000c 	andi	r2,r2,16384
    8f64:	10000226 	beq	r2,zero,8f70 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8f68:	00bffd44 	movi	r2,-11
    8f6c:	00000106 	br	8f74 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    8f70:	00bffec4 	movi	r2,-5
}
    8f74:	e037883a 	mov	sp,fp
    8f78:	df000017 	ldw	fp,0(sp)
    8f7c:	dec00104 	addi	sp,sp,4
    8f80:	f800283a 	ret

00008f84 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8f84:	defff904 	addi	sp,sp,-28
    8f88:	df000615 	stw	fp,24(sp)
    8f8c:	df000604 	addi	fp,sp,24
    8f90:	e13ffc15 	stw	r4,-16(fp)
    8f94:	e17ffd15 	stw	r5,-12(fp)
    8f98:	e1bffe15 	stw	r6,-8(fp)
    8f9c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8fa0:	e0bffc17 	ldw	r2,-16(fp)
    8fa4:	10800017 	ldw	r2,0(r2)
    8fa8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8fac:	e0bffe17 	ldw	r2,-8(fp)
    8fb0:	e0fffd17 	ldw	r3,-12(fp)
    8fb4:	1885883a 	add	r2,r3,r2
    8fb8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8fbc:	00000e06 	br	8ff8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8fc0:	e0bffa17 	ldw	r2,-24(fp)
    8fc4:	10800104 	addi	r2,r2,4
    8fc8:	10800037 	ldwio	r2,0(r2)
    8fcc:	10bfffec 	andhi	r2,r2,65535
    8fd0:	10000926 	beq	r2,zero,8ff8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8fd4:	e0fffa17 	ldw	r3,-24(fp)
    8fd8:	e0bffd17 	ldw	r2,-12(fp)
    8fdc:	11000044 	addi	r4,r2,1
    8fe0:	e13ffd15 	stw	r4,-12(fp)
    8fe4:	10800003 	ldbu	r2,0(r2)
    8fe8:	10803fcc 	andi	r2,r2,255
    8fec:	1080201c 	xori	r2,r2,128
    8ff0:	10bfe004 	addi	r2,r2,-128
    8ff4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8ff8:	e0fffd17 	ldw	r3,-12(fp)
    8ffc:	e0bffb17 	ldw	r2,-20(fp)
    9000:	18bfef36 	bltu	r3,r2,8fc0 <_gp+0xffff6ed8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9004:	e0bffe17 	ldw	r2,-8(fp)
}
    9008:	e037883a 	mov	sp,fp
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00104 	addi	sp,sp,4
    9014:	f800283a 	ret

00009018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9018:	defffe04 	addi	sp,sp,-8
    901c:	dfc00115 	stw	ra,4(sp)
    9020:	df000015 	stw	fp,0(sp)
    9024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9028:	d0a00717 	ldw	r2,-32740(gp)
    902c:	10000326 	beq	r2,zero,903c <alt_get_errno+0x24>
    9030:	d0a00717 	ldw	r2,-32740(gp)
    9034:	103ee83a 	callr	r2
    9038:	00000106 	br	9040 <alt_get_errno+0x28>
    903c:	d0a0bd04 	addi	r2,gp,-32012
}
    9040:	e037883a 	mov	sp,fp
    9044:	dfc00117 	ldw	ra,4(sp)
    9048:	df000017 	ldw	fp,0(sp)
    904c:	dec00204 	addi	sp,sp,8
    9050:	f800283a 	ret

00009054 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9054:	defffb04 	addi	sp,sp,-20
    9058:	dfc00415 	stw	ra,16(sp)
    905c:	df000315 	stw	fp,12(sp)
    9060:	df000304 	addi	fp,sp,12
    9064:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9068:	e0bfff17 	ldw	r2,-4(fp)
    906c:	10000616 	blt	r2,zero,9088 <close+0x34>
    9070:	e0bfff17 	ldw	r2,-4(fp)
    9074:	10c00324 	muli	r3,r2,12
    9078:	00800074 	movhi	r2,1
    907c:	10a7da04 	addi	r2,r2,-24728
    9080:	1885883a 	add	r2,r3,r2
    9084:	00000106 	br	908c <close+0x38>
    9088:	0005883a 	mov	r2,zero
    908c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9090:	e0bffd17 	ldw	r2,-12(fp)
    9094:	10001926 	beq	r2,zero,90fc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	10800017 	ldw	r2,0(r2)
    90a0:	10800417 	ldw	r2,16(r2)
    90a4:	10000626 	beq	r2,zero,90c0 <close+0x6c>
    90a8:	e0bffd17 	ldw	r2,-12(fp)
    90ac:	10800017 	ldw	r2,0(r2)
    90b0:	10800417 	ldw	r2,16(r2)
    90b4:	e13ffd17 	ldw	r4,-12(fp)
    90b8:	103ee83a 	callr	r2
    90bc:	00000106 	br	90c4 <close+0x70>
    90c0:	0005883a 	mov	r2,zero
    90c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    90c8:	e13fff17 	ldw	r4,-4(fp)
    90cc:	00097000 	call	9700 <alt_release_fd>
    if (rval < 0)
    90d0:	e0bffe17 	ldw	r2,-8(fp)
    90d4:	1000070e 	bge	r2,zero,90f4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    90d8:	00090180 	call	9018 <alt_get_errno>
    90dc:	1007883a 	mov	r3,r2
    90e0:	e0bffe17 	ldw	r2,-8(fp)
    90e4:	0085c83a 	sub	r2,zero,r2
    90e8:	18800015 	stw	r2,0(r3)
      return -1;
    90ec:	00bfffc4 	movi	r2,-1
    90f0:	00000706 	br	9110 <close+0xbc>
    }
    return 0;
    90f4:	0005883a 	mov	r2,zero
    90f8:	00000506 	br	9110 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    90fc:	00090180 	call	9018 <alt_get_errno>
    9100:	1007883a 	mov	r3,r2
    9104:	00801444 	movi	r2,81
    9108:	18800015 	stw	r2,0(r3)
    return -1;
    910c:	00bfffc4 	movi	r2,-1
  }
}
    9110:	e037883a 	mov	sp,fp
    9114:	dfc00117 	ldw	ra,4(sp)
    9118:	df000017 	ldw	fp,0(sp)
    911c:	dec00204 	addi	sp,sp,8
    9120:	f800283a 	ret

00009124 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9124:	defffe04 	addi	sp,sp,-8
    9128:	df000115 	stw	fp,4(sp)
    912c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9130:	e03fff15 	stw	zero,-4(fp)
    9134:	00000506 	br	914c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    9138:	e0bfff17 	ldw	r2,-4(fp)
    913c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9140:	e0bfff17 	ldw	r2,-4(fp)
    9144:	10800804 	addi	r2,r2,32
    9148:	e0bfff15 	stw	r2,-4(fp)
    914c:	e0bfff17 	ldw	r2,-4(fp)
    9150:	10820030 	cmpltui	r2,r2,2048
    9154:	103ff81e 	bne	r2,zero,9138 <_gp+0xffff7050>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9158:	0001883a 	nop
    915c:	e037883a 	mov	sp,fp
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00104 	addi	sp,sp,4
    9168:	f800283a 	ret

0000916c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    916c:	defffc04 	addi	sp,sp,-16
    9170:	df000315 	stw	fp,12(sp)
    9174:	df000304 	addi	fp,sp,12
    9178:	e13ffd15 	stw	r4,-12(fp)
    917c:	e17ffe15 	stw	r5,-8(fp)
    9180:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9184:	e0bfff17 	ldw	r2,-4(fp)
}
    9188:	e037883a 	mov	sp,fp
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00104 	addi	sp,sp,4
    9194:	f800283a 	ret

00009198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9198:	defffe04 	addi	sp,sp,-8
    919c:	dfc00115 	stw	ra,4(sp)
    91a0:	df000015 	stw	fp,0(sp)
    91a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    91a8:	d0a00717 	ldw	r2,-32740(gp)
    91ac:	10000326 	beq	r2,zero,91bc <alt_get_errno+0x24>
    91b0:	d0a00717 	ldw	r2,-32740(gp)
    91b4:	103ee83a 	callr	r2
    91b8:	00000106 	br	91c0 <alt_get_errno+0x28>
    91bc:	d0a0bd04 	addi	r2,gp,-32012
}
    91c0:	e037883a 	mov	sp,fp
    91c4:	dfc00117 	ldw	ra,4(sp)
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00204 	addi	sp,sp,8
    91d0:	f800283a 	ret

000091d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    91d4:	defffa04 	addi	sp,sp,-24
    91d8:	dfc00515 	stw	ra,20(sp)
    91dc:	df000415 	stw	fp,16(sp)
    91e0:	df000404 	addi	fp,sp,16
    91e4:	e13ffe15 	stw	r4,-8(fp)
    91e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    91ec:	e0bffe17 	ldw	r2,-8(fp)
    91f0:	10000326 	beq	r2,zero,9200 <alt_dev_llist_insert+0x2c>
    91f4:	e0bffe17 	ldw	r2,-8(fp)
    91f8:	10800217 	ldw	r2,8(r2)
    91fc:	1000061e 	bne	r2,zero,9218 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9200:	00091980 	call	9198 <alt_get_errno>
    9204:	1007883a 	mov	r3,r2
    9208:	00800584 	movi	r2,22
    920c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9210:	00bffa84 	movi	r2,-22
    9214:	00001306 	br	9264 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9218:	e0bffe17 	ldw	r2,-8(fp)
    921c:	e0ffff17 	ldw	r3,-4(fp)
    9220:	e0fffc15 	stw	r3,-16(fp)
    9224:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9228:	e0bffd17 	ldw	r2,-12(fp)
    922c:	e0fffc17 	ldw	r3,-16(fp)
    9230:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9234:	e0bffc17 	ldw	r2,-16(fp)
    9238:	10c00017 	ldw	r3,0(r2)
    923c:	e0bffd17 	ldw	r2,-12(fp)
    9240:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9244:	e0bffc17 	ldw	r2,-16(fp)
    9248:	10800017 	ldw	r2,0(r2)
    924c:	e0fffd17 	ldw	r3,-12(fp)
    9250:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9254:	e0bffc17 	ldw	r2,-16(fp)
    9258:	e0fffd17 	ldw	r3,-12(fp)
    925c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9260:	0005883a 	mov	r2,zero
}
    9264:	e037883a 	mov	sp,fp
    9268:	dfc00117 	ldw	ra,4(sp)
    926c:	df000017 	ldw	fp,0(sp)
    9270:	dec00204 	addi	sp,sp,8
    9274:	f800283a 	ret

00009278 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9278:	defffd04 	addi	sp,sp,-12
    927c:	dfc00215 	stw	ra,8(sp)
    9280:	df000115 	stw	fp,4(sp)
    9284:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9288:	00800074 	movhi	r2,1
    928c:	10a77404 	addi	r2,r2,-25136
    9290:	e0bfff15 	stw	r2,-4(fp)
    9294:	00000606 	br	92b0 <_do_ctors+0x38>
        (*ctor) (); 
    9298:	e0bfff17 	ldw	r2,-4(fp)
    929c:	10800017 	ldw	r2,0(r2)
    92a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    92a4:	e0bfff17 	ldw	r2,-4(fp)
    92a8:	10bfff04 	addi	r2,r2,-4
    92ac:	e0bfff15 	stw	r2,-4(fp)
    92b0:	e0ffff17 	ldw	r3,-4(fp)
    92b4:	00800074 	movhi	r2,1
    92b8:	10a77504 	addi	r2,r2,-25132
    92bc:	18bff62e 	bgeu	r3,r2,9298 <_gp+0xffff71b0>
        (*ctor) (); 
}
    92c0:	0001883a 	nop
    92c4:	e037883a 	mov	sp,fp
    92c8:	dfc00117 	ldw	ra,4(sp)
    92cc:	df000017 	ldw	fp,0(sp)
    92d0:	dec00204 	addi	sp,sp,8
    92d4:	f800283a 	ret

000092d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    92d8:	defffd04 	addi	sp,sp,-12
    92dc:	dfc00215 	stw	ra,8(sp)
    92e0:	df000115 	stw	fp,4(sp)
    92e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    92e8:	00800074 	movhi	r2,1
    92ec:	10a77404 	addi	r2,r2,-25136
    92f0:	e0bfff15 	stw	r2,-4(fp)
    92f4:	00000606 	br	9310 <_do_dtors+0x38>
        (*dtor) (); 
    92f8:	e0bfff17 	ldw	r2,-4(fp)
    92fc:	10800017 	ldw	r2,0(r2)
    9300:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10bfff04 	addi	r2,r2,-4
    930c:	e0bfff15 	stw	r2,-4(fp)
    9310:	e0ffff17 	ldw	r3,-4(fp)
    9314:	00800074 	movhi	r2,1
    9318:	10a77504 	addi	r2,r2,-25132
    931c:	18bff62e 	bgeu	r3,r2,92f8 <_gp+0xffff7210>
        (*dtor) (); 
}
    9320:	0001883a 	nop
    9324:	e037883a 	mov	sp,fp
    9328:	dfc00117 	ldw	ra,4(sp)
    932c:	df000017 	ldw	fp,0(sp)
    9330:	dec00204 	addi	sp,sp,8
    9334:	f800283a 	ret

00009338 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9338:	defffe04 	addi	sp,sp,-8
    933c:	dfc00115 	stw	ra,4(sp)
    9340:	df000015 	stw	fp,0(sp)
    9344:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9348:	01420004 	movi	r5,2048
    934c:	0009883a 	mov	r4,zero
    9350:	00099c40 	call	99c4 <alt_icache_flush>
#endif
}
    9354:	0001883a 	nop
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    936c:	defff904 	addi	sp,sp,-28
    9370:	dfc00615 	stw	ra,24(sp)
    9374:	df000515 	stw	fp,20(sp)
    9378:	df000504 	addi	fp,sp,20
    937c:	e13ffc15 	stw	r4,-16(fp)
    9380:	e17ffd15 	stw	r5,-12(fp)
    9384:	e1bffe15 	stw	r6,-8(fp)
    9388:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    938c:	e1bfff17 	ldw	r6,-4(fp)
    9390:	e17ffe17 	ldw	r5,-8(fp)
    9394:	e13ffd17 	ldw	r4,-12(fp)
    9398:	00095ac0 	call	95ac <open>
    939c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    93a0:	e0bffb17 	ldw	r2,-20(fp)
    93a4:	10001c16 	blt	r2,zero,9418 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    93a8:	00800074 	movhi	r2,1
    93ac:	10a7da04 	addi	r2,r2,-24728
    93b0:	e0fffb17 	ldw	r3,-20(fp)
    93b4:	18c00324 	muli	r3,r3,12
    93b8:	10c5883a 	add	r2,r2,r3
    93bc:	10c00017 	ldw	r3,0(r2)
    93c0:	e0bffc17 	ldw	r2,-16(fp)
    93c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    93c8:	00800074 	movhi	r2,1
    93cc:	10a7da04 	addi	r2,r2,-24728
    93d0:	e0fffb17 	ldw	r3,-20(fp)
    93d4:	18c00324 	muli	r3,r3,12
    93d8:	10c5883a 	add	r2,r2,r3
    93dc:	10800104 	addi	r2,r2,4
    93e0:	10c00017 	ldw	r3,0(r2)
    93e4:	e0bffc17 	ldw	r2,-16(fp)
    93e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    93ec:	00800074 	movhi	r2,1
    93f0:	10a7da04 	addi	r2,r2,-24728
    93f4:	e0fffb17 	ldw	r3,-20(fp)
    93f8:	18c00324 	muli	r3,r3,12
    93fc:	10c5883a 	add	r2,r2,r3
    9400:	10800204 	addi	r2,r2,8
    9404:	10c00017 	ldw	r3,0(r2)
    9408:	e0bffc17 	ldw	r2,-16(fp)
    940c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9410:	e13ffb17 	ldw	r4,-20(fp)
    9414:	00097000 	call	9700 <alt_release_fd>
  }
} 
    9418:	0001883a 	nop
    941c:	e037883a 	mov	sp,fp
    9420:	dfc00117 	ldw	ra,4(sp)
    9424:	df000017 	ldw	fp,0(sp)
    9428:	dec00204 	addi	sp,sp,8
    942c:	f800283a 	ret

00009430 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9430:	defffb04 	addi	sp,sp,-20
    9434:	dfc00415 	stw	ra,16(sp)
    9438:	df000315 	stw	fp,12(sp)
    943c:	df000304 	addi	fp,sp,12
    9440:	e13ffd15 	stw	r4,-12(fp)
    9444:	e17ffe15 	stw	r5,-8(fp)
    9448:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    944c:	01c07fc4 	movi	r7,511
    9450:	01800044 	movi	r6,1
    9454:	e17ffd17 	ldw	r5,-12(fp)
    9458:	01000074 	movhi	r4,1
    945c:	2127dd04 	addi	r4,r4,-24716
    9460:	000936c0 	call	936c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9464:	01c07fc4 	movi	r7,511
    9468:	000d883a 	mov	r6,zero
    946c:	e17ffe17 	ldw	r5,-8(fp)
    9470:	01000074 	movhi	r4,1
    9474:	2127da04 	addi	r4,r4,-24728
    9478:	000936c0 	call	936c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    947c:	01c07fc4 	movi	r7,511
    9480:	01800044 	movi	r6,1
    9484:	e17fff17 	ldw	r5,-4(fp)
    9488:	01000074 	movhi	r4,1
    948c:	2127e004 	addi	r4,r4,-24704
    9490:	000936c0 	call	936c <alt_open_fd>
}  
    9494:	0001883a 	nop
    9498:	e037883a 	mov	sp,fp
    949c:	dfc00117 	ldw	ra,4(sp)
    94a0:	df000017 	ldw	fp,0(sp)
    94a4:	dec00204 	addi	sp,sp,8
    94a8:	f800283a 	ret

000094ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    94ac:	defffe04 	addi	sp,sp,-8
    94b0:	dfc00115 	stw	ra,4(sp)
    94b4:	df000015 	stw	fp,0(sp)
    94b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    94bc:	d0a00717 	ldw	r2,-32740(gp)
    94c0:	10000326 	beq	r2,zero,94d0 <alt_get_errno+0x24>
    94c4:	d0a00717 	ldw	r2,-32740(gp)
    94c8:	103ee83a 	callr	r2
    94cc:	00000106 	br	94d4 <alt_get_errno+0x28>
    94d0:	d0a0bd04 	addi	r2,gp,-32012
}
    94d4:	e037883a 	mov	sp,fp
    94d8:	dfc00117 	ldw	ra,4(sp)
    94dc:	df000017 	ldw	fp,0(sp)
    94e0:	dec00204 	addi	sp,sp,8
    94e4:	f800283a 	ret

000094e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    94e8:	defffd04 	addi	sp,sp,-12
    94ec:	df000215 	stw	fp,8(sp)
    94f0:	df000204 	addi	fp,sp,8
    94f4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    94f8:	e0bfff17 	ldw	r2,-4(fp)
    94fc:	10800217 	ldw	r2,8(r2)
    9500:	10d00034 	orhi	r3,r2,16384
    9504:	e0bfff17 	ldw	r2,-4(fp)
    9508:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    950c:	e03ffe15 	stw	zero,-8(fp)
    9510:	00001d06 	br	9588 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9514:	00800074 	movhi	r2,1
    9518:	10a7da04 	addi	r2,r2,-24728
    951c:	e0fffe17 	ldw	r3,-8(fp)
    9520:	18c00324 	muli	r3,r3,12
    9524:	10c5883a 	add	r2,r2,r3
    9528:	10c00017 	ldw	r3,0(r2)
    952c:	e0bfff17 	ldw	r2,-4(fp)
    9530:	10800017 	ldw	r2,0(r2)
    9534:	1880111e 	bne	r3,r2,957c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9538:	00800074 	movhi	r2,1
    953c:	10a7da04 	addi	r2,r2,-24728
    9540:	e0fffe17 	ldw	r3,-8(fp)
    9544:	18c00324 	muli	r3,r3,12
    9548:	10c5883a 	add	r2,r2,r3
    954c:	10800204 	addi	r2,r2,8
    9550:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9554:	1000090e 	bge	r2,zero,957c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9558:	e0bffe17 	ldw	r2,-8(fp)
    955c:	10c00324 	muli	r3,r2,12
    9560:	00800074 	movhi	r2,1
    9564:	10a7da04 	addi	r2,r2,-24728
    9568:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    956c:	e0bfff17 	ldw	r2,-4(fp)
    9570:	18800226 	beq	r3,r2,957c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9574:	00bffcc4 	movi	r2,-13
    9578:	00000806 	br	959c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    957c:	e0bffe17 	ldw	r2,-8(fp)
    9580:	10800044 	addi	r2,r2,1
    9584:	e0bffe15 	stw	r2,-8(fp)
    9588:	d0a00617 	ldw	r2,-32744(gp)
    958c:	1007883a 	mov	r3,r2
    9590:	e0bffe17 	ldw	r2,-8(fp)
    9594:	18bfdf2e 	bgeu	r3,r2,9514 <_gp+0xffff742c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9598:	0005883a 	mov	r2,zero
}
    959c:	e037883a 	mov	sp,fp
    95a0:	df000017 	ldw	fp,0(sp)
    95a4:	dec00104 	addi	sp,sp,4
    95a8:	f800283a 	ret

000095ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    95ac:	defff604 	addi	sp,sp,-40
    95b0:	dfc00915 	stw	ra,36(sp)
    95b4:	df000815 	stw	fp,32(sp)
    95b8:	df000804 	addi	fp,sp,32
    95bc:	e13ffd15 	stw	r4,-12(fp)
    95c0:	e17ffe15 	stw	r5,-8(fp)
    95c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    95c8:	00bfffc4 	movi	r2,-1
    95cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    95d0:	00bffb44 	movi	r2,-19
    95d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    95d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    95dc:	d1600404 	addi	r5,gp,-32752
    95e0:	e13ffd17 	ldw	r4,-12(fp)
    95e4:	00097880 	call	9788 <alt_find_dev>
    95e8:	e0bff815 	stw	r2,-32(fp)
    95ec:	e0bff817 	ldw	r2,-32(fp)
    95f0:	1000051e 	bne	r2,zero,9608 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    95f4:	e13ffd17 	ldw	r4,-12(fp)
    95f8:	00098180 	call	9818 <alt_find_file>
    95fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9600:	00800044 	movi	r2,1
    9604:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9608:	e0bff817 	ldw	r2,-32(fp)
    960c:	10002926 	beq	r2,zero,96b4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9610:	e13ff817 	ldw	r4,-32(fp)
    9614:	00099200 	call	9920 <alt_get_fd>
    9618:	e0bff915 	stw	r2,-28(fp)
    961c:	e0bff917 	ldw	r2,-28(fp)
    9620:	1000030e 	bge	r2,zero,9630 <open+0x84>
    {
      status = index;
    9624:	e0bff917 	ldw	r2,-28(fp)
    9628:	e0bffa15 	stw	r2,-24(fp)
    962c:	00002306 	br	96bc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    9630:	e0bff917 	ldw	r2,-28(fp)
    9634:	10c00324 	muli	r3,r2,12
    9638:	00800074 	movhi	r2,1
    963c:	10a7da04 	addi	r2,r2,-24728
    9640:	1885883a 	add	r2,r3,r2
    9644:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9648:	e0fffe17 	ldw	r3,-8(fp)
    964c:	00900034 	movhi	r2,16384
    9650:	10bfffc4 	addi	r2,r2,-1
    9654:	1886703a 	and	r3,r3,r2
    9658:	e0bffc17 	ldw	r2,-16(fp)
    965c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9660:	e0bffb17 	ldw	r2,-20(fp)
    9664:	1000051e 	bne	r2,zero,967c <open+0xd0>
    9668:	e13ffc17 	ldw	r4,-16(fp)
    966c:	00094e80 	call	94e8 <alt_file_locked>
    9670:	e0bffa15 	stw	r2,-24(fp)
    9674:	e0bffa17 	ldw	r2,-24(fp)
    9678:	10001016 	blt	r2,zero,96bc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    967c:	e0bff817 	ldw	r2,-32(fp)
    9680:	10800317 	ldw	r2,12(r2)
    9684:	10000826 	beq	r2,zero,96a8 <open+0xfc>
    9688:	e0bff817 	ldw	r2,-32(fp)
    968c:	10800317 	ldw	r2,12(r2)
    9690:	e1ffff17 	ldw	r7,-4(fp)
    9694:	e1bffe17 	ldw	r6,-8(fp)
    9698:	e17ffd17 	ldw	r5,-12(fp)
    969c:	e13ffc17 	ldw	r4,-16(fp)
    96a0:	103ee83a 	callr	r2
    96a4:	00000106 	br	96ac <open+0x100>
    96a8:	0005883a 	mov	r2,zero
    96ac:	e0bffa15 	stw	r2,-24(fp)
    96b0:	00000206 	br	96bc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    96b4:	00bffb44 	movi	r2,-19
    96b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    96bc:	e0bffa17 	ldw	r2,-24(fp)
    96c0:	1000090e 	bge	r2,zero,96e8 <open+0x13c>
  {
    alt_release_fd (index);  
    96c4:	e13ff917 	ldw	r4,-28(fp)
    96c8:	00097000 	call	9700 <alt_release_fd>
    ALT_ERRNO = -status;
    96cc:	00094ac0 	call	94ac <alt_get_errno>
    96d0:	1007883a 	mov	r3,r2
    96d4:	e0bffa17 	ldw	r2,-24(fp)
    96d8:	0085c83a 	sub	r2,zero,r2
    96dc:	18800015 	stw	r2,0(r3)
    return -1;
    96e0:	00bfffc4 	movi	r2,-1
    96e4:	00000106 	br	96ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    96e8:	e0bff917 	ldw	r2,-28(fp)
}
    96ec:	e037883a 	mov	sp,fp
    96f0:	dfc00117 	ldw	ra,4(sp)
    96f4:	df000017 	ldw	fp,0(sp)
    96f8:	dec00204 	addi	sp,sp,8
    96fc:	f800283a 	ret

00009700 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9700:	defffe04 	addi	sp,sp,-8
    9704:	df000115 	stw	fp,4(sp)
    9708:	df000104 	addi	fp,sp,4
    970c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9710:	e0bfff17 	ldw	r2,-4(fp)
    9714:	108000d0 	cmplti	r2,r2,3
    9718:	10000d1e 	bne	r2,zero,9750 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    971c:	00800074 	movhi	r2,1
    9720:	10a7da04 	addi	r2,r2,-24728
    9724:	e0ffff17 	ldw	r3,-4(fp)
    9728:	18c00324 	muli	r3,r3,12
    972c:	10c5883a 	add	r2,r2,r3
    9730:	10800204 	addi	r2,r2,8
    9734:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9738:	00800074 	movhi	r2,1
    973c:	10a7da04 	addi	r2,r2,-24728
    9740:	e0ffff17 	ldw	r3,-4(fp)
    9744:	18c00324 	muli	r3,r3,12
    9748:	10c5883a 	add	r2,r2,r3
    974c:	10000015 	stw	zero,0(r2)
  }
}
    9750:	0001883a 	nop
    9754:	e037883a 	mov	sp,fp
    9758:	df000017 	ldw	fp,0(sp)
    975c:	dec00104 	addi	sp,sp,4
    9760:	f800283a 	ret

00009764 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9764:	deffff04 	addi	sp,sp,-4
    9768:	df000015 	stw	fp,0(sp)
    976c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9770:	000170fa 	wrctl	ienable,zero
}
    9774:	0001883a 	nop
    9778:	e037883a 	mov	sp,fp
    977c:	df000017 	ldw	fp,0(sp)
    9780:	dec00104 	addi	sp,sp,4
    9784:	f800283a 	ret

00009788 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9788:	defffa04 	addi	sp,sp,-24
    978c:	dfc00515 	stw	ra,20(sp)
    9790:	df000415 	stw	fp,16(sp)
    9794:	df000404 	addi	fp,sp,16
    9798:	e13ffe15 	stw	r4,-8(fp)
    979c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	10800017 	ldw	r2,0(r2)
    97a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    97ac:	e13ffe17 	ldw	r4,-8(fp)
    97b0:	00082040 	call	8204 <strlen>
    97b4:	10800044 	addi	r2,r2,1
    97b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    97bc:	00000d06 	br	97f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    97c0:	e0bffc17 	ldw	r2,-16(fp)
    97c4:	10800217 	ldw	r2,8(r2)
    97c8:	e0fffd17 	ldw	r3,-12(fp)
    97cc:	180d883a 	mov	r6,r3
    97d0:	e17ffe17 	ldw	r5,-8(fp)
    97d4:	1009883a 	mov	r4,r2
    97d8:	0009a880 	call	9a88 <memcmp>
    97dc:	1000021e 	bne	r2,zero,97e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    97e0:	e0bffc17 	ldw	r2,-16(fp)
    97e4:	00000706 	br	9804 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    97e8:	e0bffc17 	ldw	r2,-16(fp)
    97ec:	10800017 	ldw	r2,0(r2)
    97f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    97f4:	e0fffc17 	ldw	r3,-16(fp)
    97f8:	e0bfff17 	ldw	r2,-4(fp)
    97fc:	18bff01e 	bne	r3,r2,97c0 <_gp+0xffff76d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9800:	0005883a 	mov	r2,zero
}
    9804:	e037883a 	mov	sp,fp
    9808:	dfc00117 	ldw	ra,4(sp)
    980c:	df000017 	ldw	fp,0(sp)
    9810:	dec00204 	addi	sp,sp,8
    9814:	f800283a 	ret

00009818 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9818:	defffb04 	addi	sp,sp,-20
    981c:	dfc00415 	stw	ra,16(sp)
    9820:	df000315 	stw	fp,12(sp)
    9824:	df000304 	addi	fp,sp,12
    9828:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    982c:	d0a00217 	ldw	r2,-32760(gp)
    9830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9834:	00003106 	br	98fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9838:	e0bffd17 	ldw	r2,-12(fp)
    983c:	10800217 	ldw	r2,8(r2)
    9840:	1009883a 	mov	r4,r2
    9844:	00082040 	call	8204 <strlen>
    9848:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	10c00217 	ldw	r3,8(r2)
    9854:	e0bffe17 	ldw	r2,-8(fp)
    9858:	10bfffc4 	addi	r2,r2,-1
    985c:	1885883a 	add	r2,r3,r2
    9860:	10800003 	ldbu	r2,0(r2)
    9864:	10803fcc 	andi	r2,r2,255
    9868:	1080201c 	xori	r2,r2,128
    986c:	10bfe004 	addi	r2,r2,-128
    9870:	10800bd8 	cmpnei	r2,r2,47
    9874:	1000031e 	bne	r2,zero,9884 <alt_find_file+0x6c>
    {
      len -= 1;
    9878:	e0bffe17 	ldw	r2,-8(fp)
    987c:	10bfffc4 	addi	r2,r2,-1
    9880:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9884:	e0bffe17 	ldw	r2,-8(fp)
    9888:	e0ffff17 	ldw	r3,-4(fp)
    988c:	1885883a 	add	r2,r3,r2
    9890:	10800003 	ldbu	r2,0(r2)
    9894:	10803fcc 	andi	r2,r2,255
    9898:	1080201c 	xori	r2,r2,128
    989c:	10bfe004 	addi	r2,r2,-128
    98a0:	10800be0 	cmpeqi	r2,r2,47
    98a4:	1000081e 	bne	r2,zero,98c8 <alt_find_file+0xb0>
    98a8:	e0bffe17 	ldw	r2,-8(fp)
    98ac:	e0ffff17 	ldw	r3,-4(fp)
    98b0:	1885883a 	add	r2,r3,r2
    98b4:	10800003 	ldbu	r2,0(r2)
    98b8:	10803fcc 	andi	r2,r2,255
    98bc:	1080201c 	xori	r2,r2,128
    98c0:	10bfe004 	addi	r2,r2,-128
    98c4:	10000a1e 	bne	r2,zero,98f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    98c8:	e0bffd17 	ldw	r2,-12(fp)
    98cc:	10800217 	ldw	r2,8(r2)
    98d0:	e0fffe17 	ldw	r3,-8(fp)
    98d4:	180d883a 	mov	r6,r3
    98d8:	e17fff17 	ldw	r5,-4(fp)
    98dc:	1009883a 	mov	r4,r2
    98e0:	0009a880 	call	9a88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    98e4:	1000021e 	bne	r2,zero,98f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    98e8:	e0bffd17 	ldw	r2,-12(fp)
    98ec:	00000706 	br	990c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    98f0:	e0bffd17 	ldw	r2,-12(fp)
    98f4:	10800017 	ldw	r2,0(r2)
    98f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    98fc:	e0fffd17 	ldw	r3,-12(fp)
    9900:	d0a00204 	addi	r2,gp,-32760
    9904:	18bfcc1e 	bne	r3,r2,9838 <_gp+0xffff7750>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9908:	0005883a 	mov	r2,zero
}
    990c:	e037883a 	mov	sp,fp
    9910:	dfc00117 	ldw	ra,4(sp)
    9914:	df000017 	ldw	fp,0(sp)
    9918:	dec00204 	addi	sp,sp,8
    991c:	f800283a 	ret

00009920 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9920:	defffc04 	addi	sp,sp,-16
    9924:	df000315 	stw	fp,12(sp)
    9928:	df000304 	addi	fp,sp,12
    992c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9930:	00bffa04 	movi	r2,-24
    9934:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9938:	e03ffd15 	stw	zero,-12(fp)
    993c:	00001906 	br	99a4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    9940:	00800074 	movhi	r2,1
    9944:	10a7da04 	addi	r2,r2,-24728
    9948:	e0fffd17 	ldw	r3,-12(fp)
    994c:	18c00324 	muli	r3,r3,12
    9950:	10c5883a 	add	r2,r2,r3
    9954:	10800017 	ldw	r2,0(r2)
    9958:	10000f1e 	bne	r2,zero,9998 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    995c:	00800074 	movhi	r2,1
    9960:	10a7da04 	addi	r2,r2,-24728
    9964:	e0fffd17 	ldw	r3,-12(fp)
    9968:	18c00324 	muli	r3,r3,12
    996c:	10c5883a 	add	r2,r2,r3
    9970:	e0ffff17 	ldw	r3,-4(fp)
    9974:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9978:	d0e00617 	ldw	r3,-32744(gp)
    997c:	e0bffd17 	ldw	r2,-12(fp)
    9980:	1880020e 	bge	r3,r2,998c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    9984:	e0bffd17 	ldw	r2,-12(fp)
    9988:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    998c:	e0bffd17 	ldw	r2,-12(fp)
    9990:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9994:	00000606 	br	99b0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9998:	e0bffd17 	ldw	r2,-12(fp)
    999c:	10800044 	addi	r2,r2,1
    99a0:	e0bffd15 	stw	r2,-12(fp)
    99a4:	e0bffd17 	ldw	r2,-12(fp)
    99a8:	10800810 	cmplti	r2,r2,32
    99ac:	103fe41e 	bne	r2,zero,9940 <_gp+0xffff7858>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    99b0:	e0bffe17 	ldw	r2,-8(fp)
}
    99b4:	e037883a 	mov	sp,fp
    99b8:	df000017 	ldw	fp,0(sp)
    99bc:	dec00104 	addi	sp,sp,4
    99c0:	f800283a 	ret

000099c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    99c4:	defffb04 	addi	sp,sp,-20
    99c8:	df000415 	stw	fp,16(sp)
    99cc:	df000404 	addi	fp,sp,16
    99d0:	e13ffe15 	stw	r4,-8(fp)
    99d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    99d8:	e0bfff17 	ldw	r2,-4(fp)
    99dc:	10820070 	cmpltui	r2,r2,2049
    99e0:	1000021e 	bne	r2,zero,99ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    99e4:	00820004 	movi	r2,2048
    99e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    99ec:	e0fffe17 	ldw	r3,-8(fp)
    99f0:	e0bfff17 	ldw	r2,-4(fp)
    99f4:	1885883a 	add	r2,r3,r2
    99f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    99fc:	e0bffe17 	ldw	r2,-8(fp)
    9a00:	e0bffc15 	stw	r2,-16(fp)
    9a04:	00000506 	br	9a1c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9a08:	e0bffc17 	ldw	r2,-16(fp)
    9a0c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	10800804 	addi	r2,r2,32
    9a18:	e0bffc15 	stw	r2,-16(fp)
    9a1c:	e0fffc17 	ldw	r3,-16(fp)
    9a20:	e0bffd17 	ldw	r2,-12(fp)
    9a24:	18bff836 	bltu	r3,r2,9a08 <_gp+0xffff7920>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9a28:	e0bffe17 	ldw	r2,-8(fp)
    9a2c:	108007cc 	andi	r2,r2,31
    9a30:	10000226 	beq	r2,zero,9a3c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9a34:	e0bffc17 	ldw	r2,-16(fp)
    9a38:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    9a3c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9a40:	0001883a 	nop
    9a44:	e037883a 	mov	sp,fp
    9a48:	df000017 	ldw	fp,0(sp)
    9a4c:	dec00104 	addi	sp,sp,4
    9a50:	f800283a 	ret

00009a54 <atexit>:
    9a54:	200b883a 	mov	r5,r4
    9a58:	000f883a 	mov	r7,zero
    9a5c:	000d883a 	mov	r6,zero
    9a60:	0009883a 	mov	r4,zero
    9a64:	0009ab81 	jmpi	9ab8 <__register_exitproc>

00009a68 <exit>:
    9a68:	defffe04 	addi	sp,sp,-8
    9a6c:	000b883a 	mov	r5,zero
    9a70:	dc000015 	stw	r16,0(sp)
    9a74:	dfc00115 	stw	ra,4(sp)
    9a78:	2021883a 	mov	r16,r4
    9a7c:	0009c100 	call	9c10 <__call_exitprocs>
    9a80:	8009883a 	mov	r4,r16
    9a84:	0009da00 	call	9da0 <_exit>

00009a88 <memcmp>:
    9a88:	218d883a 	add	r6,r4,r6
    9a8c:	21800826 	beq	r4,r6,9ab0 <memcmp+0x28>
    9a90:	20800003 	ldbu	r2,0(r4)
    9a94:	28c00003 	ldbu	r3,0(r5)
    9a98:	10c00226 	beq	r2,r3,9aa4 <memcmp+0x1c>
    9a9c:	10c5c83a 	sub	r2,r2,r3
    9aa0:	f800283a 	ret
    9aa4:	21000044 	addi	r4,r4,1
    9aa8:	29400044 	addi	r5,r5,1
    9aac:	003ff706 	br	9a8c <_gp+0xffff79a4>
    9ab0:	0005883a 	mov	r2,zero
    9ab4:	f800283a 	ret

00009ab8 <__register_exitproc>:
    9ab8:	00800074 	movhi	r2,1
    9abc:	10a83a04 	addi	r2,r2,-24344
    9ac0:	10c00017 	ldw	r3,0(r2)
    9ac4:	defff904 	addi	sp,sp,-28
    9ac8:	dc000015 	stw	r16,0(sp)
    9acc:	1c000c17 	ldw	r16,48(r3)
    9ad0:	dd400515 	stw	r21,20(sp)
    9ad4:	dd000415 	stw	r20,16(sp)
    9ad8:	dcc00315 	stw	r19,12(sp)
    9adc:	dc800215 	stw	r18,8(sp)
    9ae0:	dc400115 	stw	r17,4(sp)
    9ae4:	dfc00615 	stw	ra,24(sp)
    9ae8:	202b883a 	mov	r21,r4
    9aec:	2823883a 	mov	r17,r5
    9af0:	3027883a 	mov	r19,r6
    9af4:	3825883a 	mov	r18,r7
    9af8:	1029883a 	mov	r20,r2
    9afc:	8000021e 	bne	r16,zero,9b08 <__register_exitproc+0x50>
    9b00:	1c000d04 	addi	r16,r3,52
    9b04:	1c000c15 	stw	r16,48(r3)
    9b08:	80800117 	ldw	r2,4(r16)
    9b0c:	00c007c4 	movi	r3,31
    9b10:	1880110e 	bge	r3,r2,9b58 <__register_exitproc+0xa0>
    9b14:	00800034 	movhi	r2,0
    9b18:	10800004 	addi	r2,r2,0
    9b1c:	1000021e 	bne	r2,zero,9b28 <__register_exitproc+0x70>
    9b20:	00bfffc4 	movi	r2,-1
    9b24:	00003106 	br	9bec <__register_exitproc+0x134>
    9b28:	01002304 	movi	r4,140
    9b2c:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    9b30:	1021883a 	mov	r16,r2
    9b34:	103ffa26 	beq	r2,zero,9b20 <_gp+0xffff7a38>
    9b38:	10000115 	stw	zero,4(r2)
    9b3c:	a0800017 	ldw	r2,0(r20)
    9b40:	10c00c17 	ldw	r3,48(r2)
    9b44:	80c00015 	stw	r3,0(r16)
    9b48:	14000c15 	stw	r16,48(r2)
    9b4c:	80002215 	stw	zero,136(r16)
    9b50:	a8001d26 	beq	r21,zero,9bc8 <__register_exitproc+0x110>
    9b54:	00000606 	br	9b70 <__register_exitproc+0xb8>
    9b58:	a8001b26 	beq	r21,zero,9bc8 <__register_exitproc+0x110>
    9b5c:	80802217 	ldw	r2,136(r16)
    9b60:	1000091e 	bne	r2,zero,9b88 <__register_exitproc+0xd0>
    9b64:	00800034 	movhi	r2,0
    9b68:	10800004 	addi	r2,r2,0
    9b6c:	103fec26 	beq	r2,zero,9b20 <_gp+0xffff7a38>
    9b70:	01004204 	movi	r4,264
    9b74:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    9b78:	103fe926 	beq	r2,zero,9b20 <_gp+0xffff7a38>
    9b7c:	10004015 	stw	zero,256(r2)
    9b80:	10004115 	stw	zero,260(r2)
    9b84:	80802215 	stw	r2,136(r16)
    9b88:	81400117 	ldw	r5,4(r16)
    9b8c:	01000044 	movi	r4,1
    9b90:	2947883a 	add	r3,r5,r5
    9b94:	18c7883a 	add	r3,r3,r3
    9b98:	10c7883a 	add	r3,r2,r3
    9b9c:	1cc00015 	stw	r19,0(r3)
    9ba0:	2148983a 	sll	r4,r4,r5
    9ba4:	11404017 	ldw	r5,256(r2)
    9ba8:	290ab03a 	or	r5,r5,r4
    9bac:	11404015 	stw	r5,256(r2)
    9bb0:	1c802015 	stw	r18,128(r3)
    9bb4:	00c00084 	movi	r3,2
    9bb8:	a8c0031e 	bne	r21,r3,9bc8 <__register_exitproc+0x110>
    9bbc:	10c04117 	ldw	r3,260(r2)
    9bc0:	1908b03a 	or	r4,r3,r4
    9bc4:	11004115 	stw	r4,260(r2)
    9bc8:	80800117 	ldw	r2,4(r16)
    9bcc:	10c00044 	addi	r3,r2,1
    9bd0:	10800084 	addi	r2,r2,2
    9bd4:	1085883a 	add	r2,r2,r2
    9bd8:	1085883a 	add	r2,r2,r2
    9bdc:	80c00115 	stw	r3,4(r16)
    9be0:	80a1883a 	add	r16,r16,r2
    9be4:	84400015 	stw	r17,0(r16)
    9be8:	0005883a 	mov	r2,zero
    9bec:	dfc00617 	ldw	ra,24(sp)
    9bf0:	dd400517 	ldw	r21,20(sp)
    9bf4:	dd000417 	ldw	r20,16(sp)
    9bf8:	dcc00317 	ldw	r19,12(sp)
    9bfc:	dc800217 	ldw	r18,8(sp)
    9c00:	dc400117 	ldw	r17,4(sp)
    9c04:	dc000017 	ldw	r16,0(sp)
    9c08:	dec00704 	addi	sp,sp,28
    9c0c:	f800283a 	ret

00009c10 <__call_exitprocs>:
    9c10:	defff504 	addi	sp,sp,-44
    9c14:	dd000515 	stw	r20,20(sp)
    9c18:	05000074 	movhi	r20,1
    9c1c:	dc800315 	stw	r18,12(sp)
    9c20:	dfc00a15 	stw	ra,40(sp)
    9c24:	df000915 	stw	fp,36(sp)
    9c28:	ddc00815 	stw	r23,32(sp)
    9c2c:	dd800715 	stw	r22,28(sp)
    9c30:	dd400615 	stw	r21,24(sp)
    9c34:	dcc00415 	stw	r19,16(sp)
    9c38:	dc400215 	stw	r17,8(sp)
    9c3c:	dc000115 	stw	r16,4(sp)
    9c40:	d9000015 	stw	r4,0(sp)
    9c44:	2825883a 	mov	r18,r5
    9c48:	a5283a04 	addi	r20,r20,-24344
    9c4c:	a4400017 	ldw	r17,0(r20)
    9c50:	8cc00c17 	ldw	r19,48(r17)
    9c54:	8c400c04 	addi	r17,r17,48
    9c58:	98004526 	beq	r19,zero,9d70 <__call_exitprocs+0x160>
    9c5c:	9c000117 	ldw	r16,4(r19)
    9c60:	00900034 	movhi	r2,16384
    9c64:	10bfffc4 	addi	r2,r2,-1
    9c68:	9d402217 	ldw	r21,136(r19)
    9c6c:	85bfffc4 	addi	r22,r16,-1
    9c70:	80a1883a 	add	r16,r16,r2
    9c74:	8421883a 	add	r16,r16,r16
    9c78:	8421883a 	add	r16,r16,r16
    9c7c:	ac2f883a 	add	r23,r21,r16
    9c80:	84000204 	addi	r16,r16,8
    9c84:	9c21883a 	add	r16,r19,r16
    9c88:	b0002716 	blt	r22,zero,9d28 <__call_exitprocs+0x118>
    9c8c:	90000726 	beq	r18,zero,9cac <__call_exitprocs+0x9c>
    9c90:	a800041e 	bne	r21,zero,9ca4 <__call_exitprocs+0x94>
    9c94:	b5bfffc4 	addi	r22,r22,-1
    9c98:	bdffff04 	addi	r23,r23,-4
    9c9c:	843fff04 	addi	r16,r16,-4
    9ca0:	003ff906 	br	9c88 <_gp+0xffff7ba0>
    9ca4:	b9002017 	ldw	r4,128(r23)
    9ca8:	913ffa1e 	bne	r18,r4,9c94 <_gp+0xffff7bac>
    9cac:	99000117 	ldw	r4,4(r19)
    9cb0:	82000017 	ldw	r8,0(r16)
    9cb4:	213fffc4 	addi	r4,r4,-1
    9cb8:	b100021e 	bne	r22,r4,9cc4 <__call_exitprocs+0xb4>
    9cbc:	9d800115 	stw	r22,4(r19)
    9cc0:	00000106 	br	9cc8 <__call_exitprocs+0xb8>
    9cc4:	80000015 	stw	zero,0(r16)
    9cc8:	403ff226 	beq	r8,zero,9c94 <_gp+0xffff7bac>
    9ccc:	9f000117 	ldw	fp,4(r19)
    9cd0:	a8000526 	beq	r21,zero,9ce8 <__call_exitprocs+0xd8>
    9cd4:	00800044 	movi	r2,1
    9cd8:	1592983a 	sll	r9,r2,r22
    9cdc:	a9404017 	ldw	r5,256(r21)
    9ce0:	494a703a 	and	r5,r9,r5
    9ce4:	2800021e 	bne	r5,zero,9cf0 <__call_exitprocs+0xe0>
    9ce8:	403ee83a 	callr	r8
    9cec:	00000906 	br	9d14 <__call_exitprocs+0x104>
    9cf0:	a9004117 	ldw	r4,260(r21)
    9cf4:	4908703a 	and	r4,r9,r4
    9cf8:	2000041e 	bne	r4,zero,9d0c <__call_exitprocs+0xfc>
    9cfc:	b9400017 	ldw	r5,0(r23)
    9d00:	d9000017 	ldw	r4,0(sp)
    9d04:	403ee83a 	callr	r8
    9d08:	00000206 	br	9d14 <__call_exitprocs+0x104>
    9d0c:	b9000017 	ldw	r4,0(r23)
    9d10:	403ee83a 	callr	r8
    9d14:	99000117 	ldw	r4,4(r19)
    9d18:	e13fcc1e 	bne	fp,r4,9c4c <_gp+0xffff7b64>
    9d1c:	89000017 	ldw	r4,0(r17)
    9d20:	993fdc26 	beq	r19,r4,9c94 <_gp+0xffff7bac>
    9d24:	003fc906 	br	9c4c <_gp+0xffff7b64>
    9d28:	00800034 	movhi	r2,0
    9d2c:	10800004 	addi	r2,r2,0
    9d30:	10000f26 	beq	r2,zero,9d70 <__call_exitprocs+0x160>
    9d34:	99400117 	ldw	r5,4(r19)
    9d38:	99000017 	ldw	r4,0(r19)
    9d3c:	2800091e 	bne	r5,zero,9d64 <__call_exitprocs+0x154>
    9d40:	20000826 	beq	r4,zero,9d64 <__call_exitprocs+0x154>
    9d44:	89000015 	stw	r4,0(r17)
    9d48:	a8000226 	beq	r21,zero,9d54 <__call_exitprocs+0x144>
    9d4c:	a809883a 	mov	r4,r21
    9d50:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    9d54:	9809883a 	mov	r4,r19
    9d58:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    9d5c:	8cc00017 	ldw	r19,0(r17)
    9d60:	003fbd06 	br	9c58 <_gp+0xffff7b70>
    9d64:	9823883a 	mov	r17,r19
    9d68:	2027883a 	mov	r19,r4
    9d6c:	003fba06 	br	9c58 <_gp+0xffff7b70>
    9d70:	dfc00a17 	ldw	ra,40(sp)
    9d74:	df000917 	ldw	fp,36(sp)
    9d78:	ddc00817 	ldw	r23,32(sp)
    9d7c:	dd800717 	ldw	r22,28(sp)
    9d80:	dd400617 	ldw	r21,24(sp)
    9d84:	dd000517 	ldw	r20,20(sp)
    9d88:	dcc00417 	ldw	r19,16(sp)
    9d8c:	dc800317 	ldw	r18,12(sp)
    9d90:	dc400217 	ldw	r17,8(sp)
    9d94:	dc000117 	ldw	r16,4(sp)
    9d98:	dec00b04 	addi	sp,sp,44
    9d9c:	f800283a 	ret

00009da0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9da0:	defffd04 	addi	sp,sp,-12
    9da4:	df000215 	stw	fp,8(sp)
    9da8:	df000204 	addi	fp,sp,8
    9dac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9db0:	0001883a 	nop
    9db4:	e0bfff17 	ldw	r2,-4(fp)
    9db8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9dbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9dc0:	10000226 	beq	r2,zero,9dcc <_exit+0x2c>
    ALT_SIM_FAIL();
    9dc4:	002af070 	cmpltui	zero,zero,43969
    9dc8:	00000106 	br	9dd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    9dcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9dd0:	003fff06 	br	9dd0 <_gp+0xffff7ce8>
