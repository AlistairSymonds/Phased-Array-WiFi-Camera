
WiPhase_SW.elf:     file format elf32-littlenios2
WiPhase_SW.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002754 memsz 0x00002754 flags r-x
    LOAD off    0x00003774 vaddr 0x0000a774 paddr 0x0000aa54 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003d34 vaddr 0x0000ad34 paddr 0x0000ad34 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000024a8  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000009c  0000a6d8  0000a6d8  000036d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000a774  0000aa54  00003774  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000ad34  0000ad34  00003d34  2**2
                  ALLOC, SMALL_DATA
  6 .ram_onchip   00000000  0000ae54  0000ae54  00003a54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000678  00000000  00000000  00003a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008448  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e47  00000000  00000000  0000c538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000331b  00000000  00000000  0000f37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c18  00000000  00000000  0001269c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001eac  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015da  00000000  00000000  00015160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001673c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c0  00000000  00000000  00016750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001856e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00018571  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018577  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018578  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00018579  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001857d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00018581  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00018585  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001858e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00018597  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000185a0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000068  00000000  00000000  000185b1  2**0
                  CONTENTS, READONLY
 29 .jdi          000041c0  00000000  00000000  00018619  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000603b0  00000000  00000000  0001c7d9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000a6d8 l    d  .rodata	00000000 .rodata
0000a774 l    d  .rwdata	00000000 .rwdata
0000ad34 l    d  .bss	00000000 .bss
0000ae54 l    d  .ram_onchip	00000000 .ram_onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WiPhase_SW_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 eth_init.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008534 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a774 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008dd4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008f3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009078 l     F .text	00000034 alt_dev_reg
0000a854 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000937c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00009470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000095a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000095d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009a30 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009b90 l     F .text	0000003c alt_get_errno
00009bcc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ad50 g     O .bss	00000004 alt_instruction_exception_handler
00008ec0 g     F .text	0000007c alt_main
00008484 g     F .text	00000080 _puts_r
0000ad54 g     O .bss	00000100 alt_irq
0000aa54 g       *ABS*	00000000 __flash_rwdata_start
00008438 g     F .text	0000004c printf
0000a03c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad34 g     O .bss	00000004 errno
0000ad3c g     O .bss	00000004 alt_argv
00012a28 g       *ABS*	00000000 _gp
0000a8a8 g     O .rwdata	00000180 alt_fd_list
0000a060 g     F .text	00000090 alt_find_dev
00009b14 g     F .text	0000007c alt_io_redirect
0000a6d8 g       *ABS*	00000000 __DTOR_END__
00008504 g     F .text	00000014 puts
0000a2bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000091fc g     F .text	000000ec altera_avalon_jtag_uart_read
000083fc g     F .text	0000003c _printf_r
00008cf0 g     F .text	00000064 .hidden __udivsi3
0000aa40 g     O .rwdata	00000004 alt_max_fd
0000aa28 g     O .rwdata	00000004 _global_impure_ptr
0000ae54 g       *ABS*	00000000 __bss_end
00009940 g     F .text	000000f0 alt_iic_isr_register
00009f34 g     F .text	00000108 alt_tick
000098f4 g     F .text	0000004c alt_ic_irq_enabled
00009e98 g     F .text	0000009c alt_alarm_stop
0000ad44 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000a880 g     O .rwdata	00000028 alt_dev_null
00009584 g     F .text	00000020 alt_dcache_flush_all
0000aa54 g       *ABS*	00000000 __ram_rwdata_end
0000aa38 g     O .rwdata	00000008 alt_dev_list
00008f78 g     F .text	00000100 write
0000a774 g       *ABS*	00000000 __ram_rodata_end
00008d54 g     F .text	00000058 .hidden __umodsi3
0000ae54 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000a6d8 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000093f4 g     F .text	0000007c alt_avalon_timer_sc_init
000092e8 g     F .text	00000094 altera_avalon_jtag_uart_write
00008000 g       *ABS*	00000000 __alt_mem_ram_onchip
000085a0 g     F .text	0000052c ___vfprintf_internal_r
0000a514 g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
0000ad48 g     O .bss	00000004 _alt_tick_rate
0000ad4c g     O .bss	00000004 _alt_nticks
000090e4 g     F .text	00000058 alt_sys_init
0000a3bc g     F .text	00000158 __register_exitproc
00008dac g     F .text	00000028 .hidden __mulsi3
0000a774 g       *ABS*	00000000 __ram_rwdata_start
0000a6d8 g       *ABS*	00000000 __ram_rodata_start
0000913c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a1f8 g     F .text	000000c4 alt_get_fd
0000a38c g     F .text	00000030 memcmp
0000ae54 g       *ABS*	00000000 __alt_stack_base
0000a0f0 g     F .text	00000108 alt_find_file
0000960c g     F .text	000000a4 alt_dev_llist_insert
00008ae8 g     F .text	000000b8 __sfvwrite_small_dev
0000ad34 g       *ABS*	00000000 __bss_start
00008390 g     F .text	0000006c main
0000ad40 g     O .bss	00000004 alt_envp
0000919c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000aa44 g     O .rwdata	00000004 alt_errno
00008bf8 g     F .text	00000084 .hidden __divsi3
0000a6d8 g       *ABS*	00000000 __CTOR_END__
0000a6d8 g       *ABS*	00000000 __flash_rodata_start
0000a6d8 g       *ABS*	00000000 __DTOR_LIST__
000090ac g     F .text	00000038 alt_irq_init
00009e14 g     F .text	00000084 alt_release_fd
0000a358 g     F .text	00000014 atexit
00008ba0 g     F .text	00000058 _write_r
0000aa2c g     O .rwdata	00000004 _impure_ptr
0000ad38 g     O .bss	00000004 alt_argc
00009710 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000aa30 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009790 g     F .text	00000050 alt_ic_isr_register
0000aa54 g       *ABS*	00000000 _edata
0000ae54 g       *ABS*	00000000 _end
0000826c g     F .text	00000124 init_eth
00008230 g       *ABS*	00000000 __ram_exceptions_end
00009868 g     F .text	0000008c alt_ic_irq_disable
0000a36c g     F .text	00000020 exit
00008c7c g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a6a4 g     F .text	00000034 _exit
00008518 g     F .text	0000001c strlen
00009cb8 g     F .text	0000015c open
00009770 g     F .text	00000020 alt_icache_flush_all
0000aa48 g     O .rwdata	00000004 alt_priority_mask
000097e0 g     F .text	00000088 alt_ic_irq_enable
00008acc g     F .text	0000001c __vfprintf_internal
0000aa4c g     O .rwdata	00000008 alt_alarm_list
000096b0 g     F .text	00000060 _do_ctors
000094ac g     F .text	000000d8 close
00008e3c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ab5504 	addi	r2,r2,-21164
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ab5504 	addi	r2,r2,-21164
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff5704>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff56f8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0ca17 	ldw	r2,-31960(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0ca17 	ldw	r2,-31960(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d68a8a14 	ori	gp,gp,10792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10ab4d14 	ori	r2,r2,44340

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18eb9514 	ori	r3,r3,44628

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff582c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	0008e3c0 	call	8e3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	0008ec00 	call	8ec0 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff5840>

0000826c <init_eth>:

#define MDIO_ADDR 0x0A



int init_eth(uint8_t* mac){
    826c:	defffb04 	addi	sp,sp,-20
    8270:	dfc00415 	stw	ra,16(sp)
    8274:	df000315 	stw	fp,12(sp)
    8278:	df000304 	addi	fp,sp,12
    827c:	e13fff15 	stw	r4,-4(fp)
	printf("I am ethernet!\n");
    8280:	01000074 	movhi	r4,1
    8284:	2129b604 	addi	r4,r4,-22824
    8288:	00085040 	call	8504 <puts>

	uint32_t * eth_base_reg;
	eth_base_reg = (uint32_t*)ETH_BASE;
    828c:	00800074 	movhi	r2,1
    8290:	10840004 	addi	r2,r2,4096
    8294:	e0bffd15 	stw	r2,-12(fp)



	printf("Eth reg %X \n", eth_base_reg[2]);
    8298:	e0bffd17 	ldw	r2,-12(fp)
    829c:	10800204 	addi	r2,r2,8
    82a0:	10800017 	ldw	r2,0(r2)
    82a4:	100b883a 	mov	r5,r2
    82a8:	01000074 	movhi	r4,1
    82ac:	2129ba04 	addi	r4,r4,-22808
    82b0:	00084380 	call	8438 <printf>

	eth_base_reg[3] = 0x17231c00;
    82b4:	e0bffd17 	ldw	r2,-12(fp)
    82b8:	10c00304 	addi	r3,r2,12
    82bc:	0085c8f4 	movhi	r2,5923
    82c0:	10870004 	addi	r2,r2,7168
    82c4:	18800015 	stw	r2,0(r3)
	eth_base_reg[4] = 0x0000CB4a;
    82c8:	e0bffd17 	ldw	r2,-12(fp)
    82cc:	10800404 	addi	r2,r2,16
    82d0:	00f2d294 	movui	r3,52042
    82d4:	10c00015 	stw	r3,0(r2)

	printf("mac 0 reg %X \n", eth_base_reg[3]);
    82d8:	e0bffd17 	ldw	r2,-12(fp)
    82dc:	10800304 	addi	r2,r2,12
    82e0:	10800017 	ldw	r2,0(r2)
    82e4:	100b883a 	mov	r5,r2
    82e8:	01000074 	movhi	r4,1
    82ec:	2129be04 	addi	r4,r4,-22792
    82f0:	00084380 	call	8438 <printf>
	printf("mac 1 reg %X \n", eth_base_reg[4]);
    82f4:	e0bffd17 	ldw	r2,-12(fp)
    82f8:	10800404 	addi	r2,r2,16
    82fc:	10800017 	ldw	r2,0(r2)
    8300:	100b883a 	mov	r5,r2
    8304:	01000074 	movhi	r4,1
    8308:	2129c204 	addi	r4,r4,-22776
    830c:	00084380 	call	8438 <printf>


	uint32_t mac_config = 0x0;
    8310:	e03ffe15 	stw	zero,-8(fp)
	mac_config = 0x00802220;
    8314:	00802034 	movhi	r2,128
    8318:	10888804 	addi	r2,r2,8736
    831c:	e0bffe15 	stw	r2,-8(fp)
	eth_base_reg[2] = mac_config;
    8320:	e0bffd17 	ldw	r2,-12(fp)
    8324:	10800204 	addi	r2,r2,8
    8328:	e0fffe17 	ldw	r3,-8(fp)
    832c:	10c00015 	stw	r3,0(r2)
	while(eth_base_reg[2] >> 13 != 0){
    8330:	0001883a 	nop
    8334:	e0bffd17 	ldw	r2,-12(fp)
    8338:	10800204 	addi	r2,r2,8
    833c:	10800017 	ldw	r2,0(r2)
    8340:	1004d37a 	srli	r2,r2,13
    8344:	103ffb1e 	bne	r2,zero,8334 <_gp+0xffff590c>
		//wait
	}
	eth_base_reg[2] = 0x00800223;
    8348:	e0bffd17 	ldw	r2,-12(fp)
    834c:	10c00204 	addi	r3,r2,8
    8350:	00802034 	movhi	r2,128
    8354:	108088c4 	addi	r2,r2,547
    8358:	18800015 	stw	r2,0(r3)

	//Desktop mac 30-5A-3A-E1-2D-AF
	printf("MAC enabled, reg %X \n", eth_base_reg[2]);
    835c:	e0bffd17 	ldw	r2,-12(fp)
    8360:	10800204 	addi	r2,r2,8
    8364:	10800017 	ldw	r2,0(r2)
    8368:	100b883a 	mov	r5,r2
    836c:	01000074 	movhi	r4,1
    8370:	2129c604 	addi	r4,r4,-22760
    8374:	00084380 	call	8438 <printf>

	return 0;
    8378:	0005883a 	mov	r2,zero

}
    837c:	e037883a 	mov	sp,fp
    8380:	dfc00117 	ldw	ra,4(sp)
    8384:	df000017 	ldw	fp,0(sp)
    8388:	dec00204 	addi	sp,sp,8
    838c:	f800283a 	ret

00008390 <main>:
#include <stdio.h>
#include "system.h"
#include "eth_init.h"

int main()
{
    8390:	defffc04 	addi	sp,sp,-16
    8394:	dfc00315 	stw	ra,12(sp)
    8398:	df000215 	stw	fp,8(sp)
    839c:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
    83a0:	01000074 	movhi	r4,1
    83a4:	2129cc04 	addi	r4,r4,-22736
    83a8:	00085040 	call	8504 <puts>

  uint8_t mac_addr[6] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB};
    83ac:	00800044 	movi	r2,1
    83b0:	e0bffe05 	stb	r2,-8(fp)
    83b4:	008008c4 	movi	r2,35
    83b8:	e0bffe45 	stb	r2,-7(fp)
    83bc:	00801144 	movi	r2,69
    83c0:	e0bffe85 	stb	r2,-6(fp)
    83c4:	008019c4 	movi	r2,103
    83c8:	e0bffec5 	stb	r2,-5(fp)
    83cc:	00bfe244 	movi	r2,-119
    83d0:	e0bfff05 	stb	r2,-4(fp)
    83d4:	00bfeac4 	movi	r2,-85
    83d8:	e0bfff45 	stb	r2,-3(fp)

  init_eth(&mac_addr);
    83dc:	e13ffe04 	addi	r4,fp,-8
    83e0:	000826c0 	call	826c <init_eth>
  return 0;
    83e4:	0005883a 	mov	r2,zero
}
    83e8:	e037883a 	mov	sp,fp
    83ec:	dfc00117 	ldw	ra,4(sp)
    83f0:	df000017 	ldw	fp,0(sp)
    83f4:	dec00204 	addi	sp,sp,8
    83f8:	f800283a 	ret

000083fc <_printf_r>:
    83fc:	defffd04 	addi	sp,sp,-12
    8400:	dfc00015 	stw	ra,0(sp)
    8404:	d9800115 	stw	r6,4(sp)
    8408:	d9c00215 	stw	r7,8(sp)
    840c:	20c00217 	ldw	r3,8(r4)
    8410:	01800074 	movhi	r6,1
    8414:	31a2ba04 	addi	r6,r6,-29976
    8418:	19800115 	stw	r6,4(r3)
    841c:	280d883a 	mov	r6,r5
    8420:	21400217 	ldw	r5,8(r4)
    8424:	d9c00104 	addi	r7,sp,4
    8428:	00085a00 	call	85a0 <___vfprintf_internal_r>
    842c:	dfc00017 	ldw	ra,0(sp)
    8430:	dec00304 	addi	sp,sp,12
    8434:	f800283a 	ret

00008438 <printf>:
    8438:	defffc04 	addi	sp,sp,-16
    843c:	dfc00015 	stw	ra,0(sp)
    8440:	d9400115 	stw	r5,4(sp)
    8444:	d9800215 	stw	r6,8(sp)
    8448:	d9c00315 	stw	r7,12(sp)
    844c:	00800074 	movhi	r2,1
    8450:	10aa8b04 	addi	r2,r2,-21972
    8454:	10800017 	ldw	r2,0(r2)
    8458:	01400074 	movhi	r5,1
    845c:	2962ba04 	addi	r5,r5,-29976
    8460:	10c00217 	ldw	r3,8(r2)
    8464:	d9800104 	addi	r6,sp,4
    8468:	19400115 	stw	r5,4(r3)
    846c:	200b883a 	mov	r5,r4
    8470:	11000217 	ldw	r4,8(r2)
    8474:	0008acc0 	call	8acc <__vfprintf_internal>
    8478:	dfc00017 	ldw	ra,0(sp)
    847c:	dec00404 	addi	sp,sp,16
    8480:	f800283a 	ret

00008484 <_puts_r>:
    8484:	defffd04 	addi	sp,sp,-12
    8488:	dc000015 	stw	r16,0(sp)
    848c:	2021883a 	mov	r16,r4
    8490:	2809883a 	mov	r4,r5
    8494:	dfc00215 	stw	ra,8(sp)
    8498:	dc400115 	stw	r17,4(sp)
    849c:	2823883a 	mov	r17,r5
    84a0:	00085180 	call	8518 <strlen>
    84a4:	81400217 	ldw	r5,8(r16)
    84a8:	01000074 	movhi	r4,1
    84ac:	2122ba04 	addi	r4,r4,-29976
    84b0:	29000115 	stw	r4,4(r5)
    84b4:	100f883a 	mov	r7,r2
    84b8:	880d883a 	mov	r6,r17
    84bc:	8009883a 	mov	r4,r16
    84c0:	0008ae80 	call	8ae8 <__sfvwrite_small_dev>
    84c4:	00ffffc4 	movi	r3,-1
    84c8:	10c00926 	beq	r2,r3,84f0 <_puts_r+0x6c>
    84cc:	81400217 	ldw	r5,8(r16)
    84d0:	01800074 	movhi	r6,1
    84d4:	01c00044 	movi	r7,1
    84d8:	28800117 	ldw	r2,4(r5)
    84dc:	31a9d104 	addi	r6,r6,-22716
    84e0:	8009883a 	mov	r4,r16
    84e4:	103ee83a 	callr	r2
    84e8:	10bfffe0 	cmpeqi	r2,r2,-1
    84ec:	0085c83a 	sub	r2,zero,r2
    84f0:	dfc00217 	ldw	ra,8(sp)
    84f4:	dc400117 	ldw	r17,4(sp)
    84f8:	dc000017 	ldw	r16,0(sp)
    84fc:	dec00304 	addi	sp,sp,12
    8500:	f800283a 	ret

00008504 <puts>:
    8504:	00800074 	movhi	r2,1
    8508:	10aa8b04 	addi	r2,r2,-21972
    850c:	200b883a 	mov	r5,r4
    8510:	11000017 	ldw	r4,0(r2)
    8514:	00084841 	jmpi	8484 <_puts_r>

00008518 <strlen>:
    8518:	2005883a 	mov	r2,r4
    851c:	10c00007 	ldb	r3,0(r2)
    8520:	18000226 	beq	r3,zero,852c <strlen+0x14>
    8524:	10800044 	addi	r2,r2,1
    8528:	003ffc06 	br	851c <_gp+0xffff5af4>
    852c:	1105c83a 	sub	r2,r2,r4
    8530:	f800283a 	ret

00008534 <print_repeat>:
    8534:	defffb04 	addi	sp,sp,-20
    8538:	dc800315 	stw	r18,12(sp)
    853c:	dc400215 	stw	r17,8(sp)
    8540:	dc000115 	stw	r16,4(sp)
    8544:	dfc00415 	stw	ra,16(sp)
    8548:	2025883a 	mov	r18,r4
    854c:	2823883a 	mov	r17,r5
    8550:	d9800005 	stb	r6,0(sp)
    8554:	3821883a 	mov	r16,r7
    8558:	04000a0e 	bge	zero,r16,8584 <print_repeat+0x50>
    855c:	88800117 	ldw	r2,4(r17)
    8560:	01c00044 	movi	r7,1
    8564:	d80d883a 	mov	r6,sp
    8568:	880b883a 	mov	r5,r17
    856c:	9009883a 	mov	r4,r18
    8570:	103ee83a 	callr	r2
    8574:	843fffc4 	addi	r16,r16,-1
    8578:	103ff726 	beq	r2,zero,8558 <_gp+0xffff5b30>
    857c:	00bfffc4 	movi	r2,-1
    8580:	00000106 	br	8588 <print_repeat+0x54>
    8584:	0005883a 	mov	r2,zero
    8588:	dfc00417 	ldw	ra,16(sp)
    858c:	dc800317 	ldw	r18,12(sp)
    8590:	dc400217 	ldw	r17,8(sp)
    8594:	dc000117 	ldw	r16,4(sp)
    8598:	dec00504 	addi	sp,sp,20
    859c:	f800283a 	ret

000085a0 <___vfprintf_internal_r>:
    85a0:	deffe504 	addi	sp,sp,-108
    85a4:	d8c00804 	addi	r3,sp,32
    85a8:	ddc01815 	stw	r23,96(sp)
    85ac:	dd801715 	stw	r22,92(sp)
    85b0:	dd401615 	stw	r21,88(sp)
    85b4:	dd001515 	stw	r20,84(sp)
    85b8:	dcc01415 	stw	r19,80(sp)
    85bc:	dc801315 	stw	r18,76(sp)
    85c0:	dc401215 	stw	r17,72(sp)
    85c4:	dc001115 	stw	r16,68(sp)
    85c8:	dfc01a15 	stw	ra,104(sp)
    85cc:	df001915 	stw	fp,100(sp)
    85d0:	2029883a 	mov	r20,r4
    85d4:	2823883a 	mov	r17,r5
    85d8:	382d883a 	mov	r22,r7
    85dc:	d9800f15 	stw	r6,60(sp)
    85e0:	0021883a 	mov	r16,zero
    85e4:	d8000e15 	stw	zero,56(sp)
    85e8:	d8000a15 	stw	zero,40(sp)
    85ec:	002b883a 	mov	r21,zero
    85f0:	0027883a 	mov	r19,zero
    85f4:	0025883a 	mov	r18,zero
    85f8:	d8000c15 	stw	zero,48(sp)
    85fc:	d8000b15 	stw	zero,44(sp)
    8600:	002f883a 	mov	r23,zero
    8604:	d8c00915 	stw	r3,36(sp)
    8608:	d8c00f17 	ldw	r3,60(sp)
    860c:	19000003 	ldbu	r4,0(r3)
    8610:	20803fcc 	andi	r2,r4,255
    8614:	1080201c 	xori	r2,r2,128
    8618:	10bfe004 	addi	r2,r2,-128
    861c:	10011e26 	beq	r2,zero,8a98 <___vfprintf_internal_r+0x4f8>
    8620:	00c00044 	movi	r3,1
    8624:	b8c01426 	beq	r23,r3,8678 <___vfprintf_internal_r+0xd8>
    8628:	1dc00216 	blt	r3,r23,8634 <___vfprintf_internal_r+0x94>
    862c:	b8000626 	beq	r23,zero,8648 <___vfprintf_internal_r+0xa8>
    8630:	00011506 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8634:	01400084 	movi	r5,2
    8638:	b9401d26 	beq	r23,r5,86b0 <___vfprintf_internal_r+0x110>
    863c:	014000c4 	movi	r5,3
    8640:	b9402b26 	beq	r23,r5,86f0 <___vfprintf_internal_r+0x150>
    8644:	00011006 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8648:	01400944 	movi	r5,37
    864c:	1140fc26 	beq	r2,r5,8a40 <___vfprintf_internal_r+0x4a0>
    8650:	88800117 	ldw	r2,4(r17)
    8654:	d9000005 	stb	r4,0(sp)
    8658:	01c00044 	movi	r7,1
    865c:	d80d883a 	mov	r6,sp
    8660:	880b883a 	mov	r5,r17
    8664:	a009883a 	mov	r4,r20
    8668:	103ee83a 	callr	r2
    866c:	1000d81e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    8670:	84000044 	addi	r16,r16,1
    8674:	00010406 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8678:	01400c04 	movi	r5,48
    867c:	1140fa26 	beq	r2,r5,8a68 <___vfprintf_internal_r+0x4c8>
    8680:	01400944 	movi	r5,37
    8684:	11400a1e 	bne	r2,r5,86b0 <___vfprintf_internal_r+0x110>
    8688:	d8800005 	stb	r2,0(sp)
    868c:	88800117 	ldw	r2,4(r17)
    8690:	b80f883a 	mov	r7,r23
    8694:	d80d883a 	mov	r6,sp
    8698:	880b883a 	mov	r5,r17
    869c:	a009883a 	mov	r4,r20
    86a0:	103ee83a 	callr	r2
    86a4:	1000ca1e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    86a8:	84000044 	addi	r16,r16,1
    86ac:	0000f506 	br	8a84 <___vfprintf_internal_r+0x4e4>
    86b0:	25fff404 	addi	r23,r4,-48
    86b4:	bdc03fcc 	andi	r23,r23,255
    86b8:	00c00244 	movi	r3,9
    86bc:	1dc00936 	bltu	r3,r23,86e4 <___vfprintf_internal_r+0x144>
    86c0:	00bfffc4 	movi	r2,-1
    86c4:	90800426 	beq	r18,r2,86d8 <___vfprintf_internal_r+0x138>
    86c8:	01400284 	movi	r5,10
    86cc:	9009883a 	mov	r4,r18
    86d0:	0008dac0 	call	8dac <__mulsi3>
    86d4:	00000106 	br	86dc <___vfprintf_internal_r+0x13c>
    86d8:	0005883a 	mov	r2,zero
    86dc:	b8a5883a 	add	r18,r23,r2
    86e0:	0000e206 	br	8a6c <___vfprintf_internal_r+0x4cc>
    86e4:	01400b84 	movi	r5,46
    86e8:	1140e426 	beq	r2,r5,8a7c <___vfprintf_internal_r+0x4dc>
    86ec:	05c00084 	movi	r23,2
    86f0:	213ff404 	addi	r4,r4,-48
    86f4:	27003fcc 	andi	fp,r4,255
    86f8:	00c00244 	movi	r3,9
    86fc:	1f000936 	bltu	r3,fp,8724 <___vfprintf_internal_r+0x184>
    8700:	00bfffc4 	movi	r2,-1
    8704:	98800426 	beq	r19,r2,8718 <___vfprintf_internal_r+0x178>
    8708:	01400284 	movi	r5,10
    870c:	9809883a 	mov	r4,r19
    8710:	0008dac0 	call	8dac <__mulsi3>
    8714:	00000106 	br	871c <___vfprintf_internal_r+0x17c>
    8718:	0005883a 	mov	r2,zero
    871c:	e0a7883a 	add	r19,fp,r2
    8720:	0000d906 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8724:	00c01b04 	movi	r3,108
    8728:	10c0d226 	beq	r2,r3,8a74 <___vfprintf_internal_r+0x4d4>
    872c:	013fffc4 	movi	r4,-1
    8730:	99000226 	beq	r19,r4,873c <___vfprintf_internal_r+0x19c>
    8734:	d8000b15 	stw	zero,44(sp)
    8738:	00000106 	br	8740 <___vfprintf_internal_r+0x1a0>
    873c:	04c00044 	movi	r19,1
    8740:	01001a44 	movi	r4,105
    8744:	11001626 	beq	r2,r4,87a0 <___vfprintf_internal_r+0x200>
    8748:	20800916 	blt	r4,r2,8770 <___vfprintf_internal_r+0x1d0>
    874c:	010018c4 	movi	r4,99
    8750:	11008826 	beq	r2,r4,8974 <___vfprintf_internal_r+0x3d4>
    8754:	01001904 	movi	r4,100
    8758:	11001126 	beq	r2,r4,87a0 <___vfprintf_internal_r+0x200>
    875c:	01001604 	movi	r4,88
    8760:	1100c81e 	bne	r2,r4,8a84 <___vfprintf_internal_r+0x4e4>
    8764:	00c00044 	movi	r3,1
    8768:	d8c00e15 	stw	r3,56(sp)
    876c:	00001506 	br	87c4 <___vfprintf_internal_r+0x224>
    8770:	01001cc4 	movi	r4,115
    8774:	11009826 	beq	r2,r4,89d8 <___vfprintf_internal_r+0x438>
    8778:	20800416 	blt	r4,r2,878c <___vfprintf_internal_r+0x1ec>
    877c:	01001bc4 	movi	r4,111
    8780:	1100c01e 	bne	r2,r4,8a84 <___vfprintf_internal_r+0x4e4>
    8784:	05400204 	movi	r21,8
    8788:	00000f06 	br	87c8 <___vfprintf_internal_r+0x228>
    878c:	01001d44 	movi	r4,117
    8790:	11000d26 	beq	r2,r4,87c8 <___vfprintf_internal_r+0x228>
    8794:	01001e04 	movi	r4,120
    8798:	11000a26 	beq	r2,r4,87c4 <___vfprintf_internal_r+0x224>
    879c:	0000b906 	br	8a84 <___vfprintf_internal_r+0x4e4>
    87a0:	d8c00a17 	ldw	r3,40(sp)
    87a4:	b7000104 	addi	fp,r22,4
    87a8:	18000726 	beq	r3,zero,87c8 <___vfprintf_internal_r+0x228>
    87ac:	df000d15 	stw	fp,52(sp)
    87b0:	b5c00017 	ldw	r23,0(r22)
    87b4:	b800080e 	bge	r23,zero,87d8 <___vfprintf_internal_r+0x238>
    87b8:	05efc83a 	sub	r23,zero,r23
    87bc:	02400044 	movi	r9,1
    87c0:	00000606 	br	87dc <___vfprintf_internal_r+0x23c>
    87c4:	05400404 	movi	r21,16
    87c8:	b0c00104 	addi	r3,r22,4
    87cc:	d8c00d15 	stw	r3,52(sp)
    87d0:	b5c00017 	ldw	r23,0(r22)
    87d4:	d8000a15 	stw	zero,40(sp)
    87d8:	0013883a 	mov	r9,zero
    87dc:	d839883a 	mov	fp,sp
    87e0:	b8001726 	beq	r23,zero,8840 <___vfprintf_internal_r+0x2a0>
    87e4:	a80b883a 	mov	r5,r21
    87e8:	b809883a 	mov	r4,r23
    87ec:	da401015 	stw	r9,64(sp)
    87f0:	0008cf00 	call	8cf0 <__udivsi3>
    87f4:	a80b883a 	mov	r5,r21
    87f8:	1009883a 	mov	r4,r2
    87fc:	102d883a 	mov	r22,r2
    8800:	0008dac0 	call	8dac <__mulsi3>
    8804:	b885c83a 	sub	r2,r23,r2
    8808:	00c00244 	movi	r3,9
    880c:	da401017 	ldw	r9,64(sp)
    8810:	18800216 	blt	r3,r2,881c <___vfprintf_internal_r+0x27c>
    8814:	10800c04 	addi	r2,r2,48
    8818:	00000506 	br	8830 <___vfprintf_internal_r+0x290>
    881c:	d8c00e17 	ldw	r3,56(sp)
    8820:	18000226 	beq	r3,zero,882c <___vfprintf_internal_r+0x28c>
    8824:	10800dc4 	addi	r2,r2,55
    8828:	00000106 	br	8830 <___vfprintf_internal_r+0x290>
    882c:	108015c4 	addi	r2,r2,87
    8830:	e0800005 	stb	r2,0(fp)
    8834:	b02f883a 	mov	r23,r22
    8838:	e7000044 	addi	fp,fp,1
    883c:	003fe806 	br	87e0 <_gp+0xffff5db8>
    8840:	e6efc83a 	sub	r23,fp,sp
    8844:	9dc5c83a 	sub	r2,r19,r23
    8848:	0080090e 	bge	zero,r2,8870 <___vfprintf_internal_r+0x2d0>
    884c:	e085883a 	add	r2,fp,r2
    8850:	01400c04 	movi	r5,48
    8854:	d8c00917 	ldw	r3,36(sp)
    8858:	e009883a 	mov	r4,fp
    885c:	e0c0032e 	bgeu	fp,r3,886c <___vfprintf_internal_r+0x2cc>
    8860:	e7000044 	addi	fp,fp,1
    8864:	21400005 	stb	r5,0(r4)
    8868:	e0bffa1e 	bne	fp,r2,8854 <_gp+0xffff5e2c>
    886c:	e6efc83a 	sub	r23,fp,sp
    8870:	d8c00b17 	ldw	r3,44(sp)
    8874:	4dd1883a 	add	r8,r9,r23
    8878:	922dc83a 	sub	r22,r18,r8
    887c:	18001626 	beq	r3,zero,88d8 <___vfprintf_internal_r+0x338>
    8880:	48000a26 	beq	r9,zero,88ac <___vfprintf_internal_r+0x30c>
    8884:	00800b44 	movi	r2,45
    8888:	d8800805 	stb	r2,32(sp)
    888c:	88800117 	ldw	r2,4(r17)
    8890:	01c00044 	movi	r7,1
    8894:	d9800804 	addi	r6,sp,32
    8898:	880b883a 	mov	r5,r17
    889c:	a009883a 	mov	r4,r20
    88a0:	103ee83a 	callr	r2
    88a4:	10004a1e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    88a8:	84000044 	addi	r16,r16,1
    88ac:	0580070e 	bge	zero,r22,88cc <___vfprintf_internal_r+0x32c>
    88b0:	b00f883a 	mov	r7,r22
    88b4:	01800c04 	movi	r6,48
    88b8:	880b883a 	mov	r5,r17
    88bc:	a009883a 	mov	r4,r20
    88c0:	00085340 	call	8534 <print_repeat>
    88c4:	1000421e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    88c8:	85a1883a 	add	r16,r16,r22
    88cc:	e02d883a 	mov	r22,fp
    88d0:	bf2fc83a 	sub	r23,r23,fp
    88d4:	00002006 	br	8958 <___vfprintf_internal_r+0x3b8>
    88d8:	0580090e 	bge	zero,r22,8900 <___vfprintf_internal_r+0x360>
    88dc:	b00f883a 	mov	r7,r22
    88e0:	01800804 	movi	r6,32
    88e4:	880b883a 	mov	r5,r17
    88e8:	a009883a 	mov	r4,r20
    88ec:	da401015 	stw	r9,64(sp)
    88f0:	00085340 	call	8534 <print_repeat>
    88f4:	da401017 	ldw	r9,64(sp)
    88f8:	1000351e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    88fc:	85a1883a 	add	r16,r16,r22
    8900:	483ff226 	beq	r9,zero,88cc <_gp+0xffff5ea4>
    8904:	00800b44 	movi	r2,45
    8908:	d8800805 	stb	r2,32(sp)
    890c:	88800117 	ldw	r2,4(r17)
    8910:	01c00044 	movi	r7,1
    8914:	d9800804 	addi	r6,sp,32
    8918:	880b883a 	mov	r5,r17
    891c:	a009883a 	mov	r4,r20
    8920:	103ee83a 	callr	r2
    8924:	10002a1e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    8928:	84000044 	addi	r16,r16,1
    892c:	003fe706 	br	88cc <_gp+0xffff5ea4>
    8930:	b5bfffc4 	addi	r22,r22,-1
    8934:	b0800003 	ldbu	r2,0(r22)
    8938:	01c00044 	movi	r7,1
    893c:	d9800804 	addi	r6,sp,32
    8940:	d8800805 	stb	r2,32(sp)
    8944:	88800117 	ldw	r2,4(r17)
    8948:	880b883a 	mov	r5,r17
    894c:	a009883a 	mov	r4,r20
    8950:	103ee83a 	callr	r2
    8954:	10001e1e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    8958:	8585c83a 	sub	r2,r16,r22
    895c:	b5c9883a 	add	r4,r22,r23
    8960:	e085883a 	add	r2,fp,r2
    8964:	013ff216 	blt	zero,r4,8930 <_gp+0xffff5f08>
    8968:	1021883a 	mov	r16,r2
    896c:	dd800d17 	ldw	r22,52(sp)
    8970:	00004406 	br	8a84 <___vfprintf_internal_r+0x4e4>
    8974:	00800044 	movi	r2,1
    8978:	1480080e 	bge	r2,r18,899c <___vfprintf_internal_r+0x3fc>
    897c:	95ffffc4 	addi	r23,r18,-1
    8980:	b80f883a 	mov	r7,r23
    8984:	01800804 	movi	r6,32
    8988:	880b883a 	mov	r5,r17
    898c:	a009883a 	mov	r4,r20
    8990:	00085340 	call	8534 <print_repeat>
    8994:	10000e1e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    8998:	85e1883a 	add	r16,r16,r23
    899c:	b0800017 	ldw	r2,0(r22)
    89a0:	01c00044 	movi	r7,1
    89a4:	d80d883a 	mov	r6,sp
    89a8:	d8800005 	stb	r2,0(sp)
    89ac:	88800117 	ldw	r2,4(r17)
    89b0:	880b883a 	mov	r5,r17
    89b4:	a009883a 	mov	r4,r20
    89b8:	b5c00104 	addi	r23,r22,4
    89bc:	103ee83a 	callr	r2
    89c0:	1000031e 	bne	r2,zero,89d0 <___vfprintf_internal_r+0x430>
    89c4:	84000044 	addi	r16,r16,1
    89c8:	b82d883a 	mov	r22,r23
    89cc:	00002d06 	br	8a84 <___vfprintf_internal_r+0x4e4>
    89d0:	00bfffc4 	movi	r2,-1
    89d4:	00003106 	br	8a9c <___vfprintf_internal_r+0x4fc>
    89d8:	b5c00017 	ldw	r23,0(r22)
    89dc:	b7000104 	addi	fp,r22,4
    89e0:	b809883a 	mov	r4,r23
    89e4:	00085180 	call	8518 <strlen>
    89e8:	9091c83a 	sub	r8,r18,r2
    89ec:	102d883a 	mov	r22,r2
    89f0:	0200090e 	bge	zero,r8,8a18 <___vfprintf_internal_r+0x478>
    89f4:	400f883a 	mov	r7,r8
    89f8:	01800804 	movi	r6,32
    89fc:	880b883a 	mov	r5,r17
    8a00:	a009883a 	mov	r4,r20
    8a04:	da001015 	stw	r8,64(sp)
    8a08:	00085340 	call	8534 <print_repeat>
    8a0c:	da001017 	ldw	r8,64(sp)
    8a10:	103fef1e 	bne	r2,zero,89d0 <_gp+0xffff5fa8>
    8a14:	8221883a 	add	r16,r16,r8
    8a18:	88800117 	ldw	r2,4(r17)
    8a1c:	b00f883a 	mov	r7,r22
    8a20:	b80d883a 	mov	r6,r23
    8a24:	880b883a 	mov	r5,r17
    8a28:	a009883a 	mov	r4,r20
    8a2c:	103ee83a 	callr	r2
    8a30:	103fe71e 	bne	r2,zero,89d0 <_gp+0xffff5fa8>
    8a34:	85a1883a 	add	r16,r16,r22
    8a38:	e02d883a 	mov	r22,fp
    8a3c:	00001106 	br	8a84 <___vfprintf_internal_r+0x4e4>
    8a40:	00c00044 	movi	r3,1
    8a44:	04ffffc4 	movi	r19,-1
    8a48:	d8000e15 	stw	zero,56(sp)
    8a4c:	d8c00a15 	stw	r3,40(sp)
    8a50:	05400284 	movi	r21,10
    8a54:	9825883a 	mov	r18,r19
    8a58:	d8000c15 	stw	zero,48(sp)
    8a5c:	d8000b15 	stw	zero,44(sp)
    8a60:	182f883a 	mov	r23,r3
    8a64:	00000806 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8a68:	ddc00b15 	stw	r23,44(sp)
    8a6c:	05c00084 	movi	r23,2
    8a70:	00000506 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8a74:	00c00044 	movi	r3,1
    8a78:	d8c00c15 	stw	r3,48(sp)
    8a7c:	05c000c4 	movi	r23,3
    8a80:	00000106 	br	8a88 <___vfprintf_internal_r+0x4e8>
    8a84:	002f883a 	mov	r23,zero
    8a88:	d8c00f17 	ldw	r3,60(sp)
    8a8c:	18c00044 	addi	r3,r3,1
    8a90:	d8c00f15 	stw	r3,60(sp)
    8a94:	003edc06 	br	8608 <_gp+0xffff5be0>
    8a98:	8005883a 	mov	r2,r16
    8a9c:	dfc01a17 	ldw	ra,104(sp)
    8aa0:	df001917 	ldw	fp,100(sp)
    8aa4:	ddc01817 	ldw	r23,96(sp)
    8aa8:	dd801717 	ldw	r22,92(sp)
    8aac:	dd401617 	ldw	r21,88(sp)
    8ab0:	dd001517 	ldw	r20,84(sp)
    8ab4:	dcc01417 	ldw	r19,80(sp)
    8ab8:	dc801317 	ldw	r18,76(sp)
    8abc:	dc401217 	ldw	r17,72(sp)
    8ac0:	dc001117 	ldw	r16,68(sp)
    8ac4:	dec01b04 	addi	sp,sp,108
    8ac8:	f800283a 	ret

00008acc <__vfprintf_internal>:
    8acc:	00800074 	movhi	r2,1
    8ad0:	10aa8b04 	addi	r2,r2,-21972
    8ad4:	300f883a 	mov	r7,r6
    8ad8:	280d883a 	mov	r6,r5
    8adc:	200b883a 	mov	r5,r4
    8ae0:	11000017 	ldw	r4,0(r2)
    8ae4:	00085a01 	jmpi	85a0 <___vfprintf_internal_r>

00008ae8 <__sfvwrite_small_dev>:
    8ae8:	2880000b 	ldhu	r2,0(r5)
    8aec:	1080020c 	andi	r2,r2,8
    8af0:	10002126 	beq	r2,zero,8b78 <__sfvwrite_small_dev+0x90>
    8af4:	2880008f 	ldh	r2,2(r5)
    8af8:	defffa04 	addi	sp,sp,-24
    8afc:	dc000015 	stw	r16,0(sp)
    8b00:	dfc00515 	stw	ra,20(sp)
    8b04:	dd000415 	stw	r20,16(sp)
    8b08:	dcc00315 	stw	r19,12(sp)
    8b0c:	dc800215 	stw	r18,8(sp)
    8b10:	dc400115 	stw	r17,4(sp)
    8b14:	2821883a 	mov	r16,r5
    8b18:	10001216 	blt	r2,zero,8b64 <__sfvwrite_small_dev+0x7c>
    8b1c:	2027883a 	mov	r19,r4
    8b20:	3025883a 	mov	r18,r6
    8b24:	3823883a 	mov	r17,r7
    8b28:	05010004 	movi	r20,1024
    8b2c:	04400b0e 	bge	zero,r17,8b5c <__sfvwrite_small_dev+0x74>
    8b30:	880f883a 	mov	r7,r17
    8b34:	a440010e 	bge	r20,r17,8b3c <__sfvwrite_small_dev+0x54>
    8b38:	01c10004 	movi	r7,1024
    8b3c:	8140008f 	ldh	r5,2(r16)
    8b40:	900d883a 	mov	r6,r18
    8b44:	9809883a 	mov	r4,r19
    8b48:	0008ba00 	call	8ba0 <_write_r>
    8b4c:	0080050e 	bge	zero,r2,8b64 <__sfvwrite_small_dev+0x7c>
    8b50:	88a3c83a 	sub	r17,r17,r2
    8b54:	90a5883a 	add	r18,r18,r2
    8b58:	003ff406 	br	8b2c <_gp+0xffff6104>
    8b5c:	0005883a 	mov	r2,zero
    8b60:	00000706 	br	8b80 <__sfvwrite_small_dev+0x98>
    8b64:	8080000b 	ldhu	r2,0(r16)
    8b68:	10801014 	ori	r2,r2,64
    8b6c:	8080000d 	sth	r2,0(r16)
    8b70:	00bfffc4 	movi	r2,-1
    8b74:	00000206 	br	8b80 <__sfvwrite_small_dev+0x98>
    8b78:	00bfffc4 	movi	r2,-1
    8b7c:	f800283a 	ret
    8b80:	dfc00517 	ldw	ra,20(sp)
    8b84:	dd000417 	ldw	r20,16(sp)
    8b88:	dcc00317 	ldw	r19,12(sp)
    8b8c:	dc800217 	ldw	r18,8(sp)
    8b90:	dc400117 	ldw	r17,4(sp)
    8b94:	dc000017 	ldw	r16,0(sp)
    8b98:	dec00604 	addi	sp,sp,24
    8b9c:	f800283a 	ret

00008ba0 <_write_r>:
    8ba0:	defffd04 	addi	sp,sp,-12
    8ba4:	dc000015 	stw	r16,0(sp)
    8ba8:	04000074 	movhi	r16,1
    8bac:	dc400115 	stw	r17,4(sp)
    8bb0:	842b4d04 	addi	r16,r16,-21196
    8bb4:	2023883a 	mov	r17,r4
    8bb8:	2809883a 	mov	r4,r5
    8bbc:	300b883a 	mov	r5,r6
    8bc0:	380d883a 	mov	r6,r7
    8bc4:	dfc00215 	stw	ra,8(sp)
    8bc8:	80000015 	stw	zero,0(r16)
    8bcc:	0008f780 	call	8f78 <write>
    8bd0:	00ffffc4 	movi	r3,-1
    8bd4:	10c0031e 	bne	r2,r3,8be4 <_write_r+0x44>
    8bd8:	80c00017 	ldw	r3,0(r16)
    8bdc:	18000126 	beq	r3,zero,8be4 <_write_r+0x44>
    8be0:	88c00015 	stw	r3,0(r17)
    8be4:	dfc00217 	ldw	ra,8(sp)
    8be8:	dc400117 	ldw	r17,4(sp)
    8bec:	dc000017 	ldw	r16,0(sp)
    8bf0:	dec00304 	addi	sp,sp,12
    8bf4:	f800283a 	ret

00008bf8 <__divsi3>:
    8bf8:	20001b16 	blt	r4,zero,8c68 <__divsi3+0x70>
    8bfc:	000f883a 	mov	r7,zero
    8c00:	28001616 	blt	r5,zero,8c5c <__divsi3+0x64>
    8c04:	200d883a 	mov	r6,r4
    8c08:	29001a2e 	bgeu	r5,r4,8c74 <__divsi3+0x7c>
    8c0c:	00800804 	movi	r2,32
    8c10:	00c00044 	movi	r3,1
    8c14:	00000106 	br	8c1c <__divsi3+0x24>
    8c18:	10000d26 	beq	r2,zero,8c50 <__divsi3+0x58>
    8c1c:	294b883a 	add	r5,r5,r5
    8c20:	10bfffc4 	addi	r2,r2,-1
    8c24:	18c7883a 	add	r3,r3,r3
    8c28:	293ffb36 	bltu	r5,r4,8c18 <_gp+0xffff61f0>
    8c2c:	0005883a 	mov	r2,zero
    8c30:	18000726 	beq	r3,zero,8c50 <__divsi3+0x58>
    8c34:	0005883a 	mov	r2,zero
    8c38:	31400236 	bltu	r6,r5,8c44 <__divsi3+0x4c>
    8c3c:	314dc83a 	sub	r6,r6,r5
    8c40:	10c4b03a 	or	r2,r2,r3
    8c44:	1806d07a 	srli	r3,r3,1
    8c48:	280ad07a 	srli	r5,r5,1
    8c4c:	183ffa1e 	bne	r3,zero,8c38 <_gp+0xffff6210>
    8c50:	38000126 	beq	r7,zero,8c58 <__divsi3+0x60>
    8c54:	0085c83a 	sub	r2,zero,r2
    8c58:	f800283a 	ret
    8c5c:	014bc83a 	sub	r5,zero,r5
    8c60:	39c0005c 	xori	r7,r7,1
    8c64:	003fe706 	br	8c04 <_gp+0xffff61dc>
    8c68:	0109c83a 	sub	r4,zero,r4
    8c6c:	01c00044 	movi	r7,1
    8c70:	003fe306 	br	8c00 <_gp+0xffff61d8>
    8c74:	00c00044 	movi	r3,1
    8c78:	003fee06 	br	8c34 <_gp+0xffff620c>

00008c7c <__modsi3>:
    8c7c:	20001716 	blt	r4,zero,8cdc <__modsi3+0x60>
    8c80:	000f883a 	mov	r7,zero
    8c84:	2005883a 	mov	r2,r4
    8c88:	28001216 	blt	r5,zero,8cd4 <__modsi3+0x58>
    8c8c:	2900162e 	bgeu	r5,r4,8ce8 <__modsi3+0x6c>
    8c90:	01800804 	movi	r6,32
    8c94:	00c00044 	movi	r3,1
    8c98:	00000106 	br	8ca0 <__modsi3+0x24>
    8c9c:	30000a26 	beq	r6,zero,8cc8 <__modsi3+0x4c>
    8ca0:	294b883a 	add	r5,r5,r5
    8ca4:	31bfffc4 	addi	r6,r6,-1
    8ca8:	18c7883a 	add	r3,r3,r3
    8cac:	293ffb36 	bltu	r5,r4,8c9c <_gp+0xffff6274>
    8cb0:	18000526 	beq	r3,zero,8cc8 <__modsi3+0x4c>
    8cb4:	1806d07a 	srli	r3,r3,1
    8cb8:	11400136 	bltu	r2,r5,8cc0 <__modsi3+0x44>
    8cbc:	1145c83a 	sub	r2,r2,r5
    8cc0:	280ad07a 	srli	r5,r5,1
    8cc4:	183ffb1e 	bne	r3,zero,8cb4 <_gp+0xffff628c>
    8cc8:	38000126 	beq	r7,zero,8cd0 <__modsi3+0x54>
    8ccc:	0085c83a 	sub	r2,zero,r2
    8cd0:	f800283a 	ret
    8cd4:	014bc83a 	sub	r5,zero,r5
    8cd8:	003fec06 	br	8c8c <_gp+0xffff6264>
    8cdc:	0109c83a 	sub	r4,zero,r4
    8ce0:	01c00044 	movi	r7,1
    8ce4:	003fe706 	br	8c84 <_gp+0xffff625c>
    8ce8:	00c00044 	movi	r3,1
    8cec:	003ff106 	br	8cb4 <_gp+0xffff628c>

00008cf0 <__udivsi3>:
    8cf0:	200d883a 	mov	r6,r4
    8cf4:	2900152e 	bgeu	r5,r4,8d4c <__udivsi3+0x5c>
    8cf8:	28001416 	blt	r5,zero,8d4c <__udivsi3+0x5c>
    8cfc:	00800804 	movi	r2,32
    8d00:	00c00044 	movi	r3,1
    8d04:	00000206 	br	8d10 <__udivsi3+0x20>
    8d08:	10000e26 	beq	r2,zero,8d44 <__udivsi3+0x54>
    8d0c:	28000516 	blt	r5,zero,8d24 <__udivsi3+0x34>
    8d10:	294b883a 	add	r5,r5,r5
    8d14:	10bfffc4 	addi	r2,r2,-1
    8d18:	18c7883a 	add	r3,r3,r3
    8d1c:	293ffa36 	bltu	r5,r4,8d08 <_gp+0xffff62e0>
    8d20:	18000826 	beq	r3,zero,8d44 <__udivsi3+0x54>
    8d24:	0005883a 	mov	r2,zero
    8d28:	31400236 	bltu	r6,r5,8d34 <__udivsi3+0x44>
    8d2c:	314dc83a 	sub	r6,r6,r5
    8d30:	10c4b03a 	or	r2,r2,r3
    8d34:	1806d07a 	srli	r3,r3,1
    8d38:	280ad07a 	srli	r5,r5,1
    8d3c:	183ffa1e 	bne	r3,zero,8d28 <_gp+0xffff6300>
    8d40:	f800283a 	ret
    8d44:	0005883a 	mov	r2,zero
    8d48:	f800283a 	ret
    8d4c:	00c00044 	movi	r3,1
    8d50:	003ff406 	br	8d24 <_gp+0xffff62fc>

00008d54 <__umodsi3>:
    8d54:	2005883a 	mov	r2,r4
    8d58:	2900122e 	bgeu	r5,r4,8da4 <__umodsi3+0x50>
    8d5c:	28001116 	blt	r5,zero,8da4 <__umodsi3+0x50>
    8d60:	01800804 	movi	r6,32
    8d64:	00c00044 	movi	r3,1
    8d68:	00000206 	br	8d74 <__umodsi3+0x20>
    8d6c:	30000c26 	beq	r6,zero,8da0 <__umodsi3+0x4c>
    8d70:	28000516 	blt	r5,zero,8d88 <__umodsi3+0x34>
    8d74:	294b883a 	add	r5,r5,r5
    8d78:	31bfffc4 	addi	r6,r6,-1
    8d7c:	18c7883a 	add	r3,r3,r3
    8d80:	293ffa36 	bltu	r5,r4,8d6c <_gp+0xffff6344>
    8d84:	18000626 	beq	r3,zero,8da0 <__umodsi3+0x4c>
    8d88:	1806d07a 	srli	r3,r3,1
    8d8c:	11400136 	bltu	r2,r5,8d94 <__umodsi3+0x40>
    8d90:	1145c83a 	sub	r2,r2,r5
    8d94:	280ad07a 	srli	r5,r5,1
    8d98:	183ffb1e 	bne	r3,zero,8d88 <_gp+0xffff6360>
    8d9c:	f800283a 	ret
    8da0:	f800283a 	ret
    8da4:	00c00044 	movi	r3,1
    8da8:	003ff706 	br	8d88 <_gp+0xffff6360>

00008dac <__mulsi3>:
    8dac:	0005883a 	mov	r2,zero
    8db0:	20000726 	beq	r4,zero,8dd0 <__mulsi3+0x24>
    8db4:	20c0004c 	andi	r3,r4,1
    8db8:	2008d07a 	srli	r4,r4,1
    8dbc:	18000126 	beq	r3,zero,8dc4 <__mulsi3+0x18>
    8dc0:	1145883a 	add	r2,r2,r5
    8dc4:	294b883a 	add	r5,r5,r5
    8dc8:	203ffa1e 	bne	r4,zero,8db4 <_gp+0xffff638c>
    8dcc:	f800283a 	ret
    8dd0:	f800283a 	ret

00008dd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8dd4:	defffc04 	addi	sp,sp,-16
    8dd8:	df000315 	stw	fp,12(sp)
    8ddc:	df000304 	addi	fp,sp,12
    8de0:	e13ffd15 	stw	r4,-12(fp)
    8de4:	e17ffe15 	stw	r5,-8(fp)
    8de8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8dec:	e0fffe17 	ldw	r3,-8(fp)
    8df0:	e0bffd17 	ldw	r2,-12(fp)
    8df4:	18800c26 	beq	r3,r2,8e28 <alt_load_section+0x54>
  {
    while( to != end )
    8df8:	00000806 	br	8e1c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8dfc:	e0bffe17 	ldw	r2,-8(fp)
    8e00:	10c00104 	addi	r3,r2,4
    8e04:	e0fffe15 	stw	r3,-8(fp)
    8e08:	e0fffd17 	ldw	r3,-12(fp)
    8e0c:	19000104 	addi	r4,r3,4
    8e10:	e13ffd15 	stw	r4,-12(fp)
    8e14:	18c00017 	ldw	r3,0(r3)
    8e18:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e1c:	e0fffe17 	ldw	r3,-8(fp)
    8e20:	e0bfff17 	ldw	r2,-4(fp)
    8e24:	18bff51e 	bne	r3,r2,8dfc <_gp+0xffff63d4>
    {
      *to++ = *from++;
    }
  }
}
    8e28:	0001883a 	nop
    8e2c:	e037883a 	mov	sp,fp
    8e30:	df000017 	ldw	fp,0(sp)
    8e34:	dec00104 	addi	sp,sp,4
    8e38:	f800283a 	ret

00008e3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e3c:	defffe04 	addi	sp,sp,-8
    8e40:	dfc00115 	stw	ra,4(sp)
    8e44:	df000015 	stw	fp,0(sp)
    8e48:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8e4c:	01800074 	movhi	r6,1
    8e50:	31aa9504 	addi	r6,r6,-21932
    8e54:	01400074 	movhi	r5,1
    8e58:	2969dd04 	addi	r5,r5,-22668
    8e5c:	01000074 	movhi	r4,1
    8e60:	212a9504 	addi	r4,r4,-21932
    8e64:	0008dd40 	call	8dd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8e68:	01800074 	movhi	r6,1
    8e6c:	31a08c04 	addi	r6,r6,-32208
    8e70:	01400074 	movhi	r5,1
    8e74:	29600804 	addi	r5,r5,-32736
    8e78:	01000074 	movhi	r4,1
    8e7c:	21200804 	addi	r4,r4,-32736
    8e80:	0008dd40 	call	8dd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8e84:	01800074 	movhi	r6,1
    8e88:	31a9dd04 	addi	r6,r6,-22668
    8e8c:	01400074 	movhi	r5,1
    8e90:	2969b604 	addi	r5,r5,-22824
    8e94:	01000074 	movhi	r4,1
    8e98:	2129b604 	addi	r4,r4,-22824
    8e9c:	0008dd40 	call	8dd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8ea0:	00095840 	call	9584 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8ea4:	00097700 	call	9770 <alt_icache_flush_all>
}
    8ea8:	0001883a 	nop
    8eac:	e037883a 	mov	sp,fp
    8eb0:	dfc00117 	ldw	ra,4(sp)
    8eb4:	df000017 	ldw	fp,0(sp)
    8eb8:	dec00204 	addi	sp,sp,8
    8ebc:	f800283a 	ret

00008ec0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ec0:	defffd04 	addi	sp,sp,-12
    8ec4:	dfc00215 	stw	ra,8(sp)
    8ec8:	df000115 	stw	fp,4(sp)
    8ecc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ed0:	0009883a 	mov	r4,zero
    8ed4:	00090ac0 	call	90ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8ed8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8edc:	00090e40 	call	90e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8ee0:	01800074 	movhi	r6,1
    8ee4:	31a9d204 	addi	r6,r6,-22712
    8ee8:	01400074 	movhi	r5,1
    8eec:	2969d204 	addi	r5,r5,-22712
    8ef0:	01000074 	movhi	r4,1
    8ef4:	2129d204 	addi	r4,r4,-22712
    8ef8:	0009b140 	call	9b14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8efc:	00096b00 	call	96b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8f00:	01000074 	movhi	r4,1
    8f04:	2125c404 	addi	r4,r4,-26864
    8f08:	000a3580 	call	a358 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8f0c:	d0a0c417 	ldw	r2,-31984(gp)
    8f10:	d0e0c517 	ldw	r3,-31980(gp)
    8f14:	d120c617 	ldw	r4,-31976(gp)
    8f18:	200d883a 	mov	r6,r4
    8f1c:	180b883a 	mov	r5,r3
    8f20:	1009883a 	mov	r4,r2
    8f24:	00083900 	call	8390 <main>
    8f28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8f2c:	01000044 	movi	r4,1
    8f30:	00094ac0 	call	94ac <close>
  exit (result);
    8f34:	e13fff17 	ldw	r4,-4(fp)
    8f38:	000a36c0 	call	a36c <exit>

00008f3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8f3c:	defffe04 	addi	sp,sp,-8
    8f40:	dfc00115 	stw	ra,4(sp)
    8f44:	df000015 	stw	fp,0(sp)
    8f48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8f4c:	d0a00717 	ldw	r2,-32740(gp)
    8f50:	10000326 	beq	r2,zero,8f60 <alt_get_errno+0x24>
    8f54:	d0a00717 	ldw	r2,-32740(gp)
    8f58:	103ee83a 	callr	r2
    8f5c:	00000106 	br	8f64 <alt_get_errno+0x28>
    8f60:	d0a0c304 	addi	r2,gp,-31988
}
    8f64:	e037883a 	mov	sp,fp
    8f68:	dfc00117 	ldw	ra,4(sp)
    8f6c:	df000017 	ldw	fp,0(sp)
    8f70:	dec00204 	addi	sp,sp,8
    8f74:	f800283a 	ret

00008f78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8f78:	defff904 	addi	sp,sp,-28
    8f7c:	dfc00615 	stw	ra,24(sp)
    8f80:	df000515 	stw	fp,20(sp)
    8f84:	df000504 	addi	fp,sp,20
    8f88:	e13ffd15 	stw	r4,-12(fp)
    8f8c:	e17ffe15 	stw	r5,-8(fp)
    8f90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8f94:	e0bffd17 	ldw	r2,-12(fp)
    8f98:	10000816 	blt	r2,zero,8fbc <write+0x44>
    8f9c:	01400304 	movi	r5,12
    8fa0:	e13ffd17 	ldw	r4,-12(fp)
    8fa4:	0008dac0 	call	8dac <__mulsi3>
    8fa8:	1007883a 	mov	r3,r2
    8fac:	00800074 	movhi	r2,1
    8fb0:	10aa2a04 	addi	r2,r2,-22360
    8fb4:	1885883a 	add	r2,r3,r2
    8fb8:	00000106 	br	8fc0 <write+0x48>
    8fbc:	0005883a 	mov	r2,zero
    8fc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8fc4:	e0bffb17 	ldw	r2,-20(fp)
    8fc8:	10002126 	beq	r2,zero,9050 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8fcc:	e0bffb17 	ldw	r2,-20(fp)
    8fd0:	10800217 	ldw	r2,8(r2)
    8fd4:	108000cc 	andi	r2,r2,3
    8fd8:	10001826 	beq	r2,zero,903c <write+0xc4>
    8fdc:	e0bffb17 	ldw	r2,-20(fp)
    8fe0:	10800017 	ldw	r2,0(r2)
    8fe4:	10800617 	ldw	r2,24(r2)
    8fe8:	10001426 	beq	r2,zero,903c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8fec:	e0bffb17 	ldw	r2,-20(fp)
    8ff0:	10800017 	ldw	r2,0(r2)
    8ff4:	10800617 	ldw	r2,24(r2)
    8ff8:	e0ffff17 	ldw	r3,-4(fp)
    8ffc:	180d883a 	mov	r6,r3
    9000:	e17ffe17 	ldw	r5,-8(fp)
    9004:	e13ffb17 	ldw	r4,-20(fp)
    9008:	103ee83a 	callr	r2
    900c:	e0bffc15 	stw	r2,-16(fp)
    9010:	e0bffc17 	ldw	r2,-16(fp)
    9014:	1000070e 	bge	r2,zero,9034 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9018:	0008f3c0 	call	8f3c <alt_get_errno>
    901c:	1007883a 	mov	r3,r2
    9020:	e0bffc17 	ldw	r2,-16(fp)
    9024:	0085c83a 	sub	r2,zero,r2
    9028:	18800015 	stw	r2,0(r3)
        return -1;
    902c:	00bfffc4 	movi	r2,-1
    9030:	00000c06 	br	9064 <write+0xec>
      }
      return rval;
    9034:	e0bffc17 	ldw	r2,-16(fp)
    9038:	00000a06 	br	9064 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    903c:	0008f3c0 	call	8f3c <alt_get_errno>
    9040:	1007883a 	mov	r3,r2
    9044:	00800344 	movi	r2,13
    9048:	18800015 	stw	r2,0(r3)
    904c:	00000406 	br	9060 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9050:	0008f3c0 	call	8f3c <alt_get_errno>
    9054:	1007883a 	mov	r3,r2
    9058:	00801444 	movi	r2,81
    905c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9060:	00bfffc4 	movi	r2,-1
}
    9064:	e037883a 	mov	sp,fp
    9068:	dfc00117 	ldw	ra,4(sp)
    906c:	df000017 	ldw	fp,0(sp)
    9070:	dec00204 	addi	sp,sp,8
    9074:	f800283a 	ret

00009078 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9078:	defffd04 	addi	sp,sp,-12
    907c:	dfc00215 	stw	ra,8(sp)
    9080:	df000115 	stw	fp,4(sp)
    9084:	df000104 	addi	fp,sp,4
    9088:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    908c:	d1600404 	addi	r5,gp,-32752
    9090:	e13fff17 	ldw	r4,-4(fp)
    9094:	000960c0 	call	960c <alt_dev_llist_insert>
}
    9098:	e037883a 	mov	sp,fp
    909c:	dfc00117 	ldw	ra,4(sp)
    90a0:	df000017 	ldw	fp,0(sp)
    90a4:	dec00204 	addi	sp,sp,8
    90a8:	f800283a 	ret

000090ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    90ac:	defffd04 	addi	sp,sp,-12
    90b0:	dfc00215 	stw	ra,8(sp)
    90b4:	df000115 	stw	fp,4(sp)
    90b8:	df000104 	addi	fp,sp,4
    90bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_V2, cpu_v2);
    90c0:	000a03c0 	call	a03c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    90c4:	00800044 	movi	r2,1
    90c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    90cc:	0001883a 	nop
    90d0:	e037883a 	mov	sp,fp
    90d4:	dfc00117 	ldw	ra,4(sp)
    90d8:	df000017 	ldw	fp,0(sp)
    90dc:	dec00204 	addi	sp,sp,8
    90e0:	f800283a 	ret

000090e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    90e4:	defffe04 	addi	sp,sp,-8
    90e8:	dfc00115 	stw	ra,4(sp)
    90ec:	df000015 	stw	fp,0(sp)
    90f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    90f4:	01c0fa04 	movi	r7,1000
    90f8:	01800044 	movi	r6,1
    90fc:	000b883a 	mov	r5,zero
    9100:	01000074 	movhi	r4,1
    9104:	21050804 	addi	r4,r4,5152
    9108:	00093f40 	call	93f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    910c:	01000074 	movhi	r4,1
    9110:	212a1504 	addi	r4,r4,-22444
    9114:	00090780 	call	9078 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    9118:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    911c:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETH, eth);
    9120:	0001883a 	nop
}
    9124:	0001883a 	nop
    9128:	e037883a 	mov	sp,fp
    912c:	dfc00117 	ldw	ra,4(sp)
    9130:	df000017 	ldw	fp,0(sp)
    9134:	dec00204 	addi	sp,sp,8
    9138:	f800283a 	ret

0000913c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    913c:	defffa04 	addi	sp,sp,-24
    9140:	dfc00515 	stw	ra,20(sp)
    9144:	df000415 	stw	fp,16(sp)
    9148:	df000404 	addi	fp,sp,16
    914c:	e13ffd15 	stw	r4,-12(fp)
    9150:	e17ffe15 	stw	r5,-8(fp)
    9154:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9158:	e0bffd17 	ldw	r2,-12(fp)
    915c:	10800017 	ldw	r2,0(r2)
    9160:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9164:	e0bffc17 	ldw	r2,-16(fp)
    9168:	10c00a04 	addi	r3,r2,40
    916c:	e0bffd17 	ldw	r2,-12(fp)
    9170:	10800217 	ldw	r2,8(r2)
    9174:	100f883a 	mov	r7,r2
    9178:	e1bfff17 	ldw	r6,-4(fp)
    917c:	e17ffe17 	ldw	r5,-8(fp)
    9180:	1809883a 	mov	r4,r3
    9184:	00091fc0 	call	91fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9188:	e037883a 	mov	sp,fp
    918c:	dfc00117 	ldw	ra,4(sp)
    9190:	df000017 	ldw	fp,0(sp)
    9194:	dec00204 	addi	sp,sp,8
    9198:	f800283a 	ret

0000919c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    919c:	defffa04 	addi	sp,sp,-24
    91a0:	dfc00515 	stw	ra,20(sp)
    91a4:	df000415 	stw	fp,16(sp)
    91a8:	df000404 	addi	fp,sp,16
    91ac:	e13ffd15 	stw	r4,-12(fp)
    91b0:	e17ffe15 	stw	r5,-8(fp)
    91b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    91b8:	e0bffd17 	ldw	r2,-12(fp)
    91bc:	10800017 	ldw	r2,0(r2)
    91c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    91c4:	e0bffc17 	ldw	r2,-16(fp)
    91c8:	10c00a04 	addi	r3,r2,40
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	10800217 	ldw	r2,8(r2)
    91d4:	100f883a 	mov	r7,r2
    91d8:	e1bfff17 	ldw	r6,-4(fp)
    91dc:	e17ffe17 	ldw	r5,-8(fp)
    91e0:	1809883a 	mov	r4,r3
    91e4:	00092e80 	call	92e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    91e8:	e037883a 	mov	sp,fp
    91ec:	dfc00117 	ldw	ra,4(sp)
    91f0:	df000017 	ldw	fp,0(sp)
    91f4:	dec00204 	addi	sp,sp,8
    91f8:	f800283a 	ret

000091fc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    91fc:	defff704 	addi	sp,sp,-36
    9200:	df000815 	stw	fp,32(sp)
    9204:	df000804 	addi	fp,sp,32
    9208:	e13ffc15 	stw	r4,-16(fp)
    920c:	e17ffd15 	stw	r5,-12(fp)
    9210:	e1bffe15 	stw	r6,-8(fp)
    9214:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9218:	e0bffc17 	ldw	r2,-16(fp)
    921c:	10800017 	ldw	r2,0(r2)
    9220:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9224:	e0bffd17 	ldw	r2,-12(fp)
    9228:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    922c:	e0bffe17 	ldw	r2,-8(fp)
    9230:	e0fffd17 	ldw	r3,-12(fp)
    9234:	1885883a 	add	r2,r3,r2
    9238:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    923c:	00001206 	br	9288 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9240:	e0bff917 	ldw	r2,-28(fp)
    9244:	10800037 	ldwio	r2,0(r2)
    9248:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    924c:	e0bffb17 	ldw	r2,-20(fp)
    9250:	10a0000c 	andi	r2,r2,32768
    9254:	10000626 	beq	r2,zero,9270 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9258:	e0bff817 	ldw	r2,-32(fp)
    925c:	10c00044 	addi	r3,r2,1
    9260:	e0fff815 	stw	r3,-32(fp)
    9264:	e0fffb17 	ldw	r3,-20(fp)
    9268:	10c00005 	stb	r3,0(r2)
    926c:	00000606 	br	9288 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9270:	e0fff817 	ldw	r3,-32(fp)
    9274:	e0bffd17 	ldw	r2,-12(fp)
    9278:	1880071e 	bne	r3,r2,9298 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    927c:	e0bfff17 	ldw	r2,-4(fp)
    9280:	1090000c 	andi	r2,r2,16384
    9284:	1000061e 	bne	r2,zero,92a0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9288:	e0fff817 	ldw	r3,-32(fp)
    928c:	e0bffa17 	ldw	r2,-24(fp)
    9290:	18bfeb36 	bltu	r3,r2,9240 <_gp+0xffff6818>
    9294:	00000306 	br	92a4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9298:	0001883a 	nop
    929c:	00000106 	br	92a4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    92a0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    92a4:	e0fff817 	ldw	r3,-32(fp)
    92a8:	e0bffd17 	ldw	r2,-12(fp)
    92ac:	18800426 	beq	r3,r2,92c0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    92b0:	e0fff817 	ldw	r3,-32(fp)
    92b4:	e0bffd17 	ldw	r2,-12(fp)
    92b8:	1885c83a 	sub	r2,r3,r2
    92bc:	00000606 	br	92d8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	1090000c 	andi	r2,r2,16384
    92c8:	10000226 	beq	r2,zero,92d4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    92cc:	00bffd44 	movi	r2,-11
    92d0:	00000106 	br	92d8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    92d4:	00bffec4 	movi	r2,-5
}
    92d8:	e037883a 	mov	sp,fp
    92dc:	df000017 	ldw	fp,0(sp)
    92e0:	dec00104 	addi	sp,sp,4
    92e4:	f800283a 	ret

000092e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    92e8:	defff904 	addi	sp,sp,-28
    92ec:	df000615 	stw	fp,24(sp)
    92f0:	df000604 	addi	fp,sp,24
    92f4:	e13ffc15 	stw	r4,-16(fp)
    92f8:	e17ffd15 	stw	r5,-12(fp)
    92fc:	e1bffe15 	stw	r6,-8(fp)
    9300:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9304:	e0bffc17 	ldw	r2,-16(fp)
    9308:	10800017 	ldw	r2,0(r2)
    930c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9310:	e0bffe17 	ldw	r2,-8(fp)
    9314:	e0fffd17 	ldw	r3,-12(fp)
    9318:	1885883a 	add	r2,r3,r2
    931c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9320:	00000e06 	br	935c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9324:	e0bffa17 	ldw	r2,-24(fp)
    9328:	10800104 	addi	r2,r2,4
    932c:	10800037 	ldwio	r2,0(r2)
    9330:	10bfffec 	andhi	r2,r2,65535
    9334:	10000926 	beq	r2,zero,935c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9338:	e0fffa17 	ldw	r3,-24(fp)
    933c:	e0bffd17 	ldw	r2,-12(fp)
    9340:	11000044 	addi	r4,r2,1
    9344:	e13ffd15 	stw	r4,-12(fp)
    9348:	10800003 	ldbu	r2,0(r2)
    934c:	10803fcc 	andi	r2,r2,255
    9350:	1080201c 	xori	r2,r2,128
    9354:	10bfe004 	addi	r2,r2,-128
    9358:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    935c:	e0fffd17 	ldw	r3,-12(fp)
    9360:	e0bffb17 	ldw	r2,-20(fp)
    9364:	18bfef36 	bltu	r3,r2,9324 <_gp+0xffff68fc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9368:	e0bffe17 	ldw	r2,-8(fp)
}
    936c:	e037883a 	mov	sp,fp
    9370:	df000017 	ldw	fp,0(sp)
    9374:	dec00104 	addi	sp,sp,4
    9378:	f800283a 	ret

0000937c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    937c:	defffa04 	addi	sp,sp,-24
    9380:	dfc00515 	stw	ra,20(sp)
    9384:	df000415 	stw	fp,16(sp)
    9388:	df000404 	addi	fp,sp,16
    938c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9390:	0007883a 	mov	r3,zero
    9394:	e0bfff17 	ldw	r2,-4(fp)
    9398:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    939c:	e0bfff17 	ldw	r2,-4(fp)
    93a0:	10800104 	addi	r2,r2,4
    93a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93a8:	0005303a 	rdctl	r2,status
    93ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93b0:	e0fffd17 	ldw	r3,-12(fp)
    93b4:	00bfff84 	movi	r2,-2
    93b8:	1884703a 	and	r2,r3,r2
    93bc:	1001703a 	wrctl	status,r2
  
  return context;
    93c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    93c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    93c8:	0009f340 	call	9f34 <alt_tick>
    93cc:	e0bffc17 	ldw	r2,-16(fp)
    93d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93d4:	e0bffe17 	ldw	r2,-8(fp)
    93d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    93dc:	0001883a 	nop
    93e0:	e037883a 	mov	sp,fp
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret

000093f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    93f4:	defff804 	addi	sp,sp,-32
    93f8:	dfc00715 	stw	ra,28(sp)
    93fc:	df000615 	stw	fp,24(sp)
    9400:	df000604 	addi	fp,sp,24
    9404:	e13ffc15 	stw	r4,-16(fp)
    9408:	e17ffd15 	stw	r5,-12(fp)
    940c:	e1bffe15 	stw	r6,-8(fp)
    9410:	e1ffff15 	stw	r7,-4(fp)
    9414:	e0bfff17 	ldw	r2,-4(fp)
    9418:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    941c:	d0a0c817 	ldw	r2,-31968(gp)
    9420:	1000021e 	bne	r2,zero,942c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    9424:	e0bffb17 	ldw	r2,-20(fp)
    9428:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    942c:	e0bffc17 	ldw	r2,-16(fp)
    9430:	10800104 	addi	r2,r2,4
    9434:	00c001c4 	movi	r3,7
    9438:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    943c:	d8000015 	stw	zero,0(sp)
    9440:	e1fffc17 	ldw	r7,-16(fp)
    9444:	01800074 	movhi	r6,1
    9448:	31a4df04 	addi	r6,r6,-27780
    944c:	e17ffe17 	ldw	r5,-8(fp)
    9450:	e13ffd17 	ldw	r4,-12(fp)
    9454:	00097900 	call	9790 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9458:	0001883a 	nop
    945c:	e037883a 	mov	sp,fp
    9460:	dfc00117 	ldw	ra,4(sp)
    9464:	df000017 	ldw	fp,0(sp)
    9468:	dec00204 	addi	sp,sp,8
    946c:	f800283a 	ret

00009470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9470:	defffe04 	addi	sp,sp,-8
    9474:	dfc00115 	stw	ra,4(sp)
    9478:	df000015 	stw	fp,0(sp)
    947c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9480:	d0a00717 	ldw	r2,-32740(gp)
    9484:	10000326 	beq	r2,zero,9494 <alt_get_errno+0x24>
    9488:	d0a00717 	ldw	r2,-32740(gp)
    948c:	103ee83a 	callr	r2
    9490:	00000106 	br	9498 <alt_get_errno+0x28>
    9494:	d0a0c304 	addi	r2,gp,-31988
}
    9498:	e037883a 	mov	sp,fp
    949c:	dfc00117 	ldw	ra,4(sp)
    94a0:	df000017 	ldw	fp,0(sp)
    94a4:	dec00204 	addi	sp,sp,8
    94a8:	f800283a 	ret

000094ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    94ac:	defffb04 	addi	sp,sp,-20
    94b0:	dfc00415 	stw	ra,16(sp)
    94b4:	df000315 	stw	fp,12(sp)
    94b8:	df000304 	addi	fp,sp,12
    94bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    94c0:	e0bfff17 	ldw	r2,-4(fp)
    94c4:	10000816 	blt	r2,zero,94e8 <close+0x3c>
    94c8:	01400304 	movi	r5,12
    94cc:	e13fff17 	ldw	r4,-4(fp)
    94d0:	0008dac0 	call	8dac <__mulsi3>
    94d4:	1007883a 	mov	r3,r2
    94d8:	00800074 	movhi	r2,1
    94dc:	10aa2a04 	addi	r2,r2,-22360
    94e0:	1885883a 	add	r2,r3,r2
    94e4:	00000106 	br	94ec <close+0x40>
    94e8:	0005883a 	mov	r2,zero
    94ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    94f0:	e0bffd17 	ldw	r2,-12(fp)
    94f4:	10001926 	beq	r2,zero,955c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    94f8:	e0bffd17 	ldw	r2,-12(fp)
    94fc:	10800017 	ldw	r2,0(r2)
    9500:	10800417 	ldw	r2,16(r2)
    9504:	10000626 	beq	r2,zero,9520 <close+0x74>
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	10800017 	ldw	r2,0(r2)
    9510:	10800417 	ldw	r2,16(r2)
    9514:	e13ffd17 	ldw	r4,-12(fp)
    9518:	103ee83a 	callr	r2
    951c:	00000106 	br	9524 <close+0x78>
    9520:	0005883a 	mov	r2,zero
    9524:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9528:	e13fff17 	ldw	r4,-4(fp)
    952c:	0009e140 	call	9e14 <alt_release_fd>
    if (rval < 0)
    9530:	e0bffe17 	ldw	r2,-8(fp)
    9534:	1000070e 	bge	r2,zero,9554 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9538:	00094700 	call	9470 <alt_get_errno>
    953c:	1007883a 	mov	r3,r2
    9540:	e0bffe17 	ldw	r2,-8(fp)
    9544:	0085c83a 	sub	r2,zero,r2
    9548:	18800015 	stw	r2,0(r3)
      return -1;
    954c:	00bfffc4 	movi	r2,-1
    9550:	00000706 	br	9570 <close+0xc4>
    }
    return 0;
    9554:	0005883a 	mov	r2,zero
    9558:	00000506 	br	9570 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    955c:	00094700 	call	9470 <alt_get_errno>
    9560:	1007883a 	mov	r3,r2
    9564:	00801444 	movi	r2,81
    9568:	18800015 	stw	r2,0(r3)
    return -1;
    956c:	00bfffc4 	movi	r2,-1
  }
}
    9570:	e037883a 	mov	sp,fp
    9574:	dfc00117 	ldw	ra,4(sp)
    9578:	df000017 	ldw	fp,0(sp)
    957c:	dec00204 	addi	sp,sp,8
    9580:	f800283a 	ret

00009584 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9584:	deffff04 	addi	sp,sp,-4
    9588:	df000015 	stw	fp,0(sp)
    958c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9590:	0001883a 	nop
    9594:	e037883a 	mov	sp,fp
    9598:	df000017 	ldw	fp,0(sp)
    959c:	dec00104 	addi	sp,sp,4
    95a0:	f800283a 	ret

000095a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    95a4:	defffc04 	addi	sp,sp,-16
    95a8:	df000315 	stw	fp,12(sp)
    95ac:	df000304 	addi	fp,sp,12
    95b0:	e13ffd15 	stw	r4,-12(fp)
    95b4:	e17ffe15 	stw	r5,-8(fp)
    95b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    95bc:	e0bfff17 	ldw	r2,-4(fp)
}
    95c0:	e037883a 	mov	sp,fp
    95c4:	df000017 	ldw	fp,0(sp)
    95c8:	dec00104 	addi	sp,sp,4
    95cc:	f800283a 	ret

000095d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95d0:	defffe04 	addi	sp,sp,-8
    95d4:	dfc00115 	stw	ra,4(sp)
    95d8:	df000015 	stw	fp,0(sp)
    95dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    95e0:	d0a00717 	ldw	r2,-32740(gp)
    95e4:	10000326 	beq	r2,zero,95f4 <alt_get_errno+0x24>
    95e8:	d0a00717 	ldw	r2,-32740(gp)
    95ec:	103ee83a 	callr	r2
    95f0:	00000106 	br	95f8 <alt_get_errno+0x28>
    95f4:	d0a0c304 	addi	r2,gp,-31988
}
    95f8:	e037883a 	mov	sp,fp
    95fc:	dfc00117 	ldw	ra,4(sp)
    9600:	df000017 	ldw	fp,0(sp)
    9604:	dec00204 	addi	sp,sp,8
    9608:	f800283a 	ret

0000960c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    960c:	defffa04 	addi	sp,sp,-24
    9610:	dfc00515 	stw	ra,20(sp)
    9614:	df000415 	stw	fp,16(sp)
    9618:	df000404 	addi	fp,sp,16
    961c:	e13ffe15 	stw	r4,-8(fp)
    9620:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9624:	e0bffe17 	ldw	r2,-8(fp)
    9628:	10000326 	beq	r2,zero,9638 <alt_dev_llist_insert+0x2c>
    962c:	e0bffe17 	ldw	r2,-8(fp)
    9630:	10800217 	ldw	r2,8(r2)
    9634:	1000061e 	bne	r2,zero,9650 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9638:	00095d00 	call	95d0 <alt_get_errno>
    963c:	1007883a 	mov	r3,r2
    9640:	00800584 	movi	r2,22
    9644:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9648:	00bffa84 	movi	r2,-22
    964c:	00001306 	br	969c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9650:	e0bffe17 	ldw	r2,-8(fp)
    9654:	e0ffff17 	ldw	r3,-4(fp)
    9658:	e0fffc15 	stw	r3,-16(fp)
    965c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9660:	e0bffd17 	ldw	r2,-12(fp)
    9664:	e0fffc17 	ldw	r3,-16(fp)
    9668:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    966c:	e0bffc17 	ldw	r2,-16(fp)
    9670:	10c00017 	ldw	r3,0(r2)
    9674:	e0bffd17 	ldw	r2,-12(fp)
    9678:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    967c:	e0bffc17 	ldw	r2,-16(fp)
    9680:	10800017 	ldw	r2,0(r2)
    9684:	e0fffd17 	ldw	r3,-12(fp)
    9688:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    968c:	e0bffc17 	ldw	r2,-16(fp)
    9690:	e0fffd17 	ldw	r3,-12(fp)
    9694:	10c00015 	stw	r3,0(r2)

  return 0;  
    9698:	0005883a 	mov	r2,zero
}
    969c:	e037883a 	mov	sp,fp
    96a0:	dfc00117 	ldw	ra,4(sp)
    96a4:	df000017 	ldw	fp,0(sp)
    96a8:	dec00204 	addi	sp,sp,8
    96ac:	f800283a 	ret

000096b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    96b0:	defffd04 	addi	sp,sp,-12
    96b4:	dfc00215 	stw	ra,8(sp)
    96b8:	df000115 	stw	fp,4(sp)
    96bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    96c0:	00800074 	movhi	r2,1
    96c4:	10a9b504 	addi	r2,r2,-22828
    96c8:	e0bfff15 	stw	r2,-4(fp)
    96cc:	00000606 	br	96e8 <_do_ctors+0x38>
        (*ctor) (); 
    96d0:	e0bfff17 	ldw	r2,-4(fp)
    96d4:	10800017 	ldw	r2,0(r2)
    96d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    96dc:	e0bfff17 	ldw	r2,-4(fp)
    96e0:	10bfff04 	addi	r2,r2,-4
    96e4:	e0bfff15 	stw	r2,-4(fp)
    96e8:	e0ffff17 	ldw	r3,-4(fp)
    96ec:	00800074 	movhi	r2,1
    96f0:	10a9b604 	addi	r2,r2,-22824
    96f4:	18bff62e 	bgeu	r3,r2,96d0 <_gp+0xffff6ca8>
        (*ctor) (); 
}
    96f8:	0001883a 	nop
    96fc:	e037883a 	mov	sp,fp
    9700:	dfc00117 	ldw	ra,4(sp)
    9704:	df000017 	ldw	fp,0(sp)
    9708:	dec00204 	addi	sp,sp,8
    970c:	f800283a 	ret

00009710 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9710:	defffd04 	addi	sp,sp,-12
    9714:	dfc00215 	stw	ra,8(sp)
    9718:	df000115 	stw	fp,4(sp)
    971c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9720:	00800074 	movhi	r2,1
    9724:	10a9b504 	addi	r2,r2,-22828
    9728:	e0bfff15 	stw	r2,-4(fp)
    972c:	00000606 	br	9748 <_do_dtors+0x38>
        (*dtor) (); 
    9730:	e0bfff17 	ldw	r2,-4(fp)
    9734:	10800017 	ldw	r2,0(r2)
    9738:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    973c:	e0bfff17 	ldw	r2,-4(fp)
    9740:	10bfff04 	addi	r2,r2,-4
    9744:	e0bfff15 	stw	r2,-4(fp)
    9748:	e0ffff17 	ldw	r3,-4(fp)
    974c:	00800074 	movhi	r2,1
    9750:	10a9b604 	addi	r2,r2,-22824
    9754:	18bff62e 	bgeu	r3,r2,9730 <_gp+0xffff6d08>
        (*dtor) (); 
}
    9758:	0001883a 	nop
    975c:	e037883a 	mov	sp,fp
    9760:	dfc00117 	ldw	ra,4(sp)
    9764:	df000017 	ldw	fp,0(sp)
    9768:	dec00204 	addi	sp,sp,8
    976c:	f800283a 	ret

00009770 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9770:	deffff04 	addi	sp,sp,-4
    9774:	df000015 	stw	fp,0(sp)
    9778:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    977c:	0001883a 	nop
    9780:	e037883a 	mov	sp,fp
    9784:	df000017 	ldw	fp,0(sp)
    9788:	dec00104 	addi	sp,sp,4
    978c:	f800283a 	ret

00009790 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9790:	defff904 	addi	sp,sp,-28
    9794:	dfc00615 	stw	ra,24(sp)
    9798:	df000515 	stw	fp,20(sp)
    979c:	df000504 	addi	fp,sp,20
    97a0:	e13ffc15 	stw	r4,-16(fp)
    97a4:	e17ffd15 	stw	r5,-12(fp)
    97a8:	e1bffe15 	stw	r6,-8(fp)
    97ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    97b0:	e0800217 	ldw	r2,8(fp)
    97b4:	d8800015 	stw	r2,0(sp)
    97b8:	e1ffff17 	ldw	r7,-4(fp)
    97bc:	e1bffe17 	ldw	r6,-8(fp)
    97c0:	e17ffd17 	ldw	r5,-12(fp)
    97c4:	e13ffc17 	ldw	r4,-16(fp)
    97c8:	00099400 	call	9940 <alt_iic_isr_register>
}  
    97cc:	e037883a 	mov	sp,fp
    97d0:	dfc00117 	ldw	ra,4(sp)
    97d4:	df000017 	ldw	fp,0(sp)
    97d8:	dec00204 	addi	sp,sp,8
    97dc:	f800283a 	ret

000097e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    97e0:	defff904 	addi	sp,sp,-28
    97e4:	df000615 	stw	fp,24(sp)
    97e8:	df000604 	addi	fp,sp,24
    97ec:	e13ffe15 	stw	r4,-8(fp)
    97f0:	e17fff15 	stw	r5,-4(fp)
    97f4:	e0bfff17 	ldw	r2,-4(fp)
    97f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    97fc:	0005303a 	rdctl	r2,status
    9800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9804:	e0fffb17 	ldw	r3,-20(fp)
    9808:	00bfff84 	movi	r2,-2
    980c:	1884703a 	and	r2,r3,r2
    9810:	1001703a 	wrctl	status,r2
  
  return context;
    9814:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9818:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    981c:	00c00044 	movi	r3,1
    9820:	e0bffa17 	ldw	r2,-24(fp)
    9824:	1884983a 	sll	r2,r3,r2
    9828:	1007883a 	mov	r3,r2
    982c:	d0a0c717 	ldw	r2,-31972(gp)
    9830:	1884b03a 	or	r2,r3,r2
    9834:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9838:	d0a0c717 	ldw	r2,-31972(gp)
    983c:	100170fa 	wrctl	ienable,r2
    9840:	e0bffc17 	ldw	r2,-16(fp)
    9844:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9850:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9854:	0001883a 	nop
}
    9858:	e037883a 	mov	sp,fp
    985c:	df000017 	ldw	fp,0(sp)
    9860:	dec00104 	addi	sp,sp,4
    9864:	f800283a 	ret

00009868 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9868:	defff904 	addi	sp,sp,-28
    986c:	df000615 	stw	fp,24(sp)
    9870:	df000604 	addi	fp,sp,24
    9874:	e13ffe15 	stw	r4,-8(fp)
    9878:	e17fff15 	stw	r5,-4(fp)
    987c:	e0bfff17 	ldw	r2,-4(fp)
    9880:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9884:	0005303a 	rdctl	r2,status
    9888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    988c:	e0fffb17 	ldw	r3,-20(fp)
    9890:	00bfff84 	movi	r2,-2
    9894:	1884703a 	and	r2,r3,r2
    9898:	1001703a 	wrctl	status,r2
  
  return context;
    989c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    98a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    98a4:	00c00044 	movi	r3,1
    98a8:	e0bffa17 	ldw	r2,-24(fp)
    98ac:	1884983a 	sll	r2,r3,r2
    98b0:	0084303a 	nor	r2,zero,r2
    98b4:	1007883a 	mov	r3,r2
    98b8:	d0a0c717 	ldw	r2,-31972(gp)
    98bc:	1884703a 	and	r2,r3,r2
    98c0:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    98c4:	d0a0c717 	ldw	r2,-31972(gp)
    98c8:	100170fa 	wrctl	ienable,r2
    98cc:	e0bffc17 	ldw	r2,-16(fp)
    98d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98d4:	e0bffd17 	ldw	r2,-12(fp)
    98d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    98dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    98e0:	0001883a 	nop
}
    98e4:	e037883a 	mov	sp,fp
    98e8:	df000017 	ldw	fp,0(sp)
    98ec:	dec00104 	addi	sp,sp,4
    98f0:	f800283a 	ret

000098f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    98f4:	defffc04 	addi	sp,sp,-16
    98f8:	df000315 	stw	fp,12(sp)
    98fc:	df000304 	addi	fp,sp,12
    9900:	e13ffe15 	stw	r4,-8(fp)
    9904:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9908:	000530fa 	rdctl	r2,ienable
    990c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9910:	00c00044 	movi	r3,1
    9914:	e0bfff17 	ldw	r2,-4(fp)
    9918:	1884983a 	sll	r2,r3,r2
    991c:	1007883a 	mov	r3,r2
    9920:	e0bffd17 	ldw	r2,-12(fp)
    9924:	1884703a 	and	r2,r3,r2
    9928:	1004c03a 	cmpne	r2,r2,zero
    992c:	10803fcc 	andi	r2,r2,255
}
    9930:	e037883a 	mov	sp,fp
    9934:	df000017 	ldw	fp,0(sp)
    9938:	dec00104 	addi	sp,sp,4
    993c:	f800283a 	ret

00009940 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9940:	defff504 	addi	sp,sp,-44
    9944:	dfc00a15 	stw	ra,40(sp)
    9948:	df000915 	stw	fp,36(sp)
    994c:	df000904 	addi	fp,sp,36
    9950:	e13ffc15 	stw	r4,-16(fp)
    9954:	e17ffd15 	stw	r5,-12(fp)
    9958:	e1bffe15 	stw	r6,-8(fp)
    995c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9960:	00bffa84 	movi	r2,-22
    9964:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9968:	e0bffd17 	ldw	r2,-12(fp)
    996c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9970:	e0bff817 	ldw	r2,-32(fp)
    9974:	10800808 	cmpgei	r2,r2,32
    9978:	1000271e 	bne	r2,zero,9a18 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    997c:	0005303a 	rdctl	r2,status
    9980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9984:	e0fffb17 	ldw	r3,-20(fp)
    9988:	00bfff84 	movi	r2,-2
    998c:	1884703a 	and	r2,r3,r2
    9990:	1001703a 	wrctl	status,r2
  
  return context;
    9994:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9998:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    999c:	00800074 	movhi	r2,1
    99a0:	10ab5504 	addi	r2,r2,-21164
    99a4:	e0fff817 	ldw	r3,-32(fp)
    99a8:	180690fa 	slli	r3,r3,3
    99ac:	10c5883a 	add	r2,r2,r3
    99b0:	e0fffe17 	ldw	r3,-8(fp)
    99b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    99b8:	00800074 	movhi	r2,1
    99bc:	10ab5504 	addi	r2,r2,-21164
    99c0:	e0fff817 	ldw	r3,-32(fp)
    99c4:	180690fa 	slli	r3,r3,3
    99c8:	10c5883a 	add	r2,r2,r3
    99cc:	10800104 	addi	r2,r2,4
    99d0:	e0ffff17 	ldw	r3,-4(fp)
    99d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    99d8:	e0bffe17 	ldw	r2,-8(fp)
    99dc:	10000526 	beq	r2,zero,99f4 <alt_iic_isr_register+0xb4>
    99e0:	e0bff817 	ldw	r2,-32(fp)
    99e4:	100b883a 	mov	r5,r2
    99e8:	e13ffc17 	ldw	r4,-16(fp)
    99ec:	00097e00 	call	97e0 <alt_ic_irq_enable>
    99f0:	00000406 	br	9a04 <alt_iic_isr_register+0xc4>
    99f4:	e0bff817 	ldw	r2,-32(fp)
    99f8:	100b883a 	mov	r5,r2
    99fc:	e13ffc17 	ldw	r4,-16(fp)
    9a00:	00098680 	call	9868 <alt_ic_irq_disable>
    9a04:	e0bff715 	stw	r2,-36(fp)
    9a08:	e0bffa17 	ldw	r2,-24(fp)
    9a0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a10:	e0bff917 	ldw	r2,-28(fp)
    9a14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9a18:	e0bff717 	ldw	r2,-36(fp)
}
    9a1c:	e037883a 	mov	sp,fp
    9a20:	dfc00117 	ldw	ra,4(sp)
    9a24:	df000017 	ldw	fp,0(sp)
    9a28:	dec00204 	addi	sp,sp,8
    9a2c:	f800283a 	ret

00009a30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9a30:	defff804 	addi	sp,sp,-32
    9a34:	dfc00715 	stw	ra,28(sp)
    9a38:	df000615 	stw	fp,24(sp)
    9a3c:	dc000515 	stw	r16,20(sp)
    9a40:	df000604 	addi	fp,sp,24
    9a44:	e13ffb15 	stw	r4,-20(fp)
    9a48:	e17ffc15 	stw	r5,-16(fp)
    9a4c:	e1bffd15 	stw	r6,-12(fp)
    9a50:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9a54:	e1bffe17 	ldw	r6,-8(fp)
    9a58:	e17ffd17 	ldw	r5,-12(fp)
    9a5c:	e13ffc17 	ldw	r4,-16(fp)
    9a60:	0009cb80 	call	9cb8 <open>
    9a64:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9a68:	e0bffa17 	ldw	r2,-24(fp)
    9a6c:	10002216 	blt	r2,zero,9af8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9a70:	04000074 	movhi	r16,1
    9a74:	842a2a04 	addi	r16,r16,-22360
    9a78:	e0bffa17 	ldw	r2,-24(fp)
    9a7c:	01400304 	movi	r5,12
    9a80:	1009883a 	mov	r4,r2
    9a84:	0008dac0 	call	8dac <__mulsi3>
    9a88:	8085883a 	add	r2,r16,r2
    9a8c:	10c00017 	ldw	r3,0(r2)
    9a90:	e0bffb17 	ldw	r2,-20(fp)
    9a94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9a98:	04000074 	movhi	r16,1
    9a9c:	842a2a04 	addi	r16,r16,-22360
    9aa0:	e0bffa17 	ldw	r2,-24(fp)
    9aa4:	01400304 	movi	r5,12
    9aa8:	1009883a 	mov	r4,r2
    9aac:	0008dac0 	call	8dac <__mulsi3>
    9ab0:	8085883a 	add	r2,r16,r2
    9ab4:	10800104 	addi	r2,r2,4
    9ab8:	10c00017 	ldw	r3,0(r2)
    9abc:	e0bffb17 	ldw	r2,-20(fp)
    9ac0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9ac4:	04000074 	movhi	r16,1
    9ac8:	842a2a04 	addi	r16,r16,-22360
    9acc:	e0bffa17 	ldw	r2,-24(fp)
    9ad0:	01400304 	movi	r5,12
    9ad4:	1009883a 	mov	r4,r2
    9ad8:	0008dac0 	call	8dac <__mulsi3>
    9adc:	8085883a 	add	r2,r16,r2
    9ae0:	10800204 	addi	r2,r2,8
    9ae4:	10c00017 	ldw	r3,0(r2)
    9ae8:	e0bffb17 	ldw	r2,-20(fp)
    9aec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9af0:	e13ffa17 	ldw	r4,-24(fp)
    9af4:	0009e140 	call	9e14 <alt_release_fd>
  }
} 
    9af8:	0001883a 	nop
    9afc:	e6ffff04 	addi	sp,fp,-4
    9b00:	dfc00217 	ldw	ra,8(sp)
    9b04:	df000117 	ldw	fp,4(sp)
    9b08:	dc000017 	ldw	r16,0(sp)
    9b0c:	dec00304 	addi	sp,sp,12
    9b10:	f800283a 	ret

00009b14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9b14:	defffb04 	addi	sp,sp,-20
    9b18:	dfc00415 	stw	ra,16(sp)
    9b1c:	df000315 	stw	fp,12(sp)
    9b20:	df000304 	addi	fp,sp,12
    9b24:	e13ffd15 	stw	r4,-12(fp)
    9b28:	e17ffe15 	stw	r5,-8(fp)
    9b2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9b30:	01c07fc4 	movi	r7,511
    9b34:	01800044 	movi	r6,1
    9b38:	e17ffd17 	ldw	r5,-12(fp)
    9b3c:	01000074 	movhi	r4,1
    9b40:	212a2d04 	addi	r4,r4,-22348
    9b44:	0009a300 	call	9a30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9b48:	01c07fc4 	movi	r7,511
    9b4c:	000d883a 	mov	r6,zero
    9b50:	e17ffe17 	ldw	r5,-8(fp)
    9b54:	01000074 	movhi	r4,1
    9b58:	212a2a04 	addi	r4,r4,-22360
    9b5c:	0009a300 	call	9a30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9b60:	01c07fc4 	movi	r7,511
    9b64:	01800044 	movi	r6,1
    9b68:	e17fff17 	ldw	r5,-4(fp)
    9b6c:	01000074 	movhi	r4,1
    9b70:	212a3004 	addi	r4,r4,-22336
    9b74:	0009a300 	call	9a30 <alt_open_fd>
}  
    9b78:	0001883a 	nop
    9b7c:	e037883a 	mov	sp,fp
    9b80:	dfc00117 	ldw	ra,4(sp)
    9b84:	df000017 	ldw	fp,0(sp)
    9b88:	dec00204 	addi	sp,sp,8
    9b8c:	f800283a 	ret

00009b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b90:	defffe04 	addi	sp,sp,-8
    9b94:	dfc00115 	stw	ra,4(sp)
    9b98:	df000015 	stw	fp,0(sp)
    9b9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9ba0:	d0a00717 	ldw	r2,-32740(gp)
    9ba4:	10000326 	beq	r2,zero,9bb4 <alt_get_errno+0x24>
    9ba8:	d0a00717 	ldw	r2,-32740(gp)
    9bac:	103ee83a 	callr	r2
    9bb0:	00000106 	br	9bb8 <alt_get_errno+0x28>
    9bb4:	d0a0c304 	addi	r2,gp,-31988
}
    9bb8:	e037883a 	mov	sp,fp
    9bbc:	dfc00117 	ldw	ra,4(sp)
    9bc0:	df000017 	ldw	fp,0(sp)
    9bc4:	dec00204 	addi	sp,sp,8
    9bc8:	f800283a 	ret

00009bcc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9bcc:	defffb04 	addi	sp,sp,-20
    9bd0:	dfc00415 	stw	ra,16(sp)
    9bd4:	df000315 	stw	fp,12(sp)
    9bd8:	dc000215 	stw	r16,8(sp)
    9bdc:	df000304 	addi	fp,sp,12
    9be0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9be4:	e0bffe17 	ldw	r2,-8(fp)
    9be8:	10800217 	ldw	r2,8(r2)
    9bec:	10d00034 	orhi	r3,r2,16384
    9bf0:	e0bffe17 	ldw	r2,-8(fp)
    9bf4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bf8:	e03ffd15 	stw	zero,-12(fp)
    9bfc:	00002306 	br	9c8c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9c00:	04000074 	movhi	r16,1
    9c04:	842a2a04 	addi	r16,r16,-22360
    9c08:	e0bffd17 	ldw	r2,-12(fp)
    9c0c:	01400304 	movi	r5,12
    9c10:	1009883a 	mov	r4,r2
    9c14:	0008dac0 	call	8dac <__mulsi3>
    9c18:	8085883a 	add	r2,r16,r2
    9c1c:	10c00017 	ldw	r3,0(r2)
    9c20:	e0bffe17 	ldw	r2,-8(fp)
    9c24:	10800017 	ldw	r2,0(r2)
    9c28:	1880151e 	bne	r3,r2,9c80 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9c2c:	04000074 	movhi	r16,1
    9c30:	842a2a04 	addi	r16,r16,-22360
    9c34:	e0bffd17 	ldw	r2,-12(fp)
    9c38:	01400304 	movi	r5,12
    9c3c:	1009883a 	mov	r4,r2
    9c40:	0008dac0 	call	8dac <__mulsi3>
    9c44:	8085883a 	add	r2,r16,r2
    9c48:	10800204 	addi	r2,r2,8
    9c4c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9c50:	10000b0e 	bge	r2,zero,9c80 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9c54:	01400304 	movi	r5,12
    9c58:	e13ffd17 	ldw	r4,-12(fp)
    9c5c:	0008dac0 	call	8dac <__mulsi3>
    9c60:	1007883a 	mov	r3,r2
    9c64:	00800074 	movhi	r2,1
    9c68:	10aa2a04 	addi	r2,r2,-22360
    9c6c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9c70:	e0bffe17 	ldw	r2,-8(fp)
    9c74:	18800226 	beq	r3,r2,9c80 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9c78:	00bffcc4 	movi	r2,-13
    9c7c:	00000806 	br	9ca0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9c80:	e0bffd17 	ldw	r2,-12(fp)
    9c84:	10800044 	addi	r2,r2,1
    9c88:	e0bffd15 	stw	r2,-12(fp)
    9c8c:	d0a00617 	ldw	r2,-32744(gp)
    9c90:	1007883a 	mov	r3,r2
    9c94:	e0bffd17 	ldw	r2,-12(fp)
    9c98:	18bfd92e 	bgeu	r3,r2,9c00 <_gp+0xffff71d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9c9c:	0005883a 	mov	r2,zero
}
    9ca0:	e6ffff04 	addi	sp,fp,-4
    9ca4:	dfc00217 	ldw	ra,8(sp)
    9ca8:	df000117 	ldw	fp,4(sp)
    9cac:	dc000017 	ldw	r16,0(sp)
    9cb0:	dec00304 	addi	sp,sp,12
    9cb4:	f800283a 	ret

00009cb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9cb8:	defff604 	addi	sp,sp,-40
    9cbc:	dfc00915 	stw	ra,36(sp)
    9cc0:	df000815 	stw	fp,32(sp)
    9cc4:	df000804 	addi	fp,sp,32
    9cc8:	e13ffd15 	stw	r4,-12(fp)
    9ccc:	e17ffe15 	stw	r5,-8(fp)
    9cd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9cd4:	00bfffc4 	movi	r2,-1
    9cd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9cdc:	00bffb44 	movi	r2,-19
    9ce0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9ce4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9ce8:	d1600404 	addi	r5,gp,-32752
    9cec:	e13ffd17 	ldw	r4,-12(fp)
    9cf0:	000a0600 	call	a060 <alt_find_dev>
    9cf4:	e0bff815 	stw	r2,-32(fp)
    9cf8:	e0bff817 	ldw	r2,-32(fp)
    9cfc:	1000051e 	bne	r2,zero,9d14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9d00:	e13ffd17 	ldw	r4,-12(fp)
    9d04:	000a0f00 	call	a0f0 <alt_find_file>
    9d08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9d0c:	00800044 	movi	r2,1
    9d10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9d14:	e0bff817 	ldw	r2,-32(fp)
    9d18:	10002b26 	beq	r2,zero,9dc8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9d1c:	e13ff817 	ldw	r4,-32(fp)
    9d20:	000a1f80 	call	a1f8 <alt_get_fd>
    9d24:	e0bff915 	stw	r2,-28(fp)
    9d28:	e0bff917 	ldw	r2,-28(fp)
    9d2c:	1000030e 	bge	r2,zero,9d3c <open+0x84>
    {
      status = index;
    9d30:	e0bff917 	ldw	r2,-28(fp)
    9d34:	e0bffa15 	stw	r2,-24(fp)
    9d38:	00002506 	br	9dd0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9d3c:	01400304 	movi	r5,12
    9d40:	e13ff917 	ldw	r4,-28(fp)
    9d44:	0008dac0 	call	8dac <__mulsi3>
    9d48:	1007883a 	mov	r3,r2
    9d4c:	00800074 	movhi	r2,1
    9d50:	10aa2a04 	addi	r2,r2,-22360
    9d54:	1885883a 	add	r2,r3,r2
    9d58:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9d5c:	e0fffe17 	ldw	r3,-8(fp)
    9d60:	00900034 	movhi	r2,16384
    9d64:	10bfffc4 	addi	r2,r2,-1
    9d68:	1886703a 	and	r3,r3,r2
    9d6c:	e0bffc17 	ldw	r2,-16(fp)
    9d70:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9d74:	e0bffb17 	ldw	r2,-20(fp)
    9d78:	1000051e 	bne	r2,zero,9d90 <open+0xd8>
    9d7c:	e13ffc17 	ldw	r4,-16(fp)
    9d80:	0009bcc0 	call	9bcc <alt_file_locked>
    9d84:	e0bffa15 	stw	r2,-24(fp)
    9d88:	e0bffa17 	ldw	r2,-24(fp)
    9d8c:	10001016 	blt	r2,zero,9dd0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9d90:	e0bff817 	ldw	r2,-32(fp)
    9d94:	10800317 	ldw	r2,12(r2)
    9d98:	10000826 	beq	r2,zero,9dbc <open+0x104>
    9d9c:	e0bff817 	ldw	r2,-32(fp)
    9da0:	10800317 	ldw	r2,12(r2)
    9da4:	e1ffff17 	ldw	r7,-4(fp)
    9da8:	e1bffe17 	ldw	r6,-8(fp)
    9dac:	e17ffd17 	ldw	r5,-12(fp)
    9db0:	e13ffc17 	ldw	r4,-16(fp)
    9db4:	103ee83a 	callr	r2
    9db8:	00000106 	br	9dc0 <open+0x108>
    9dbc:	0005883a 	mov	r2,zero
    9dc0:	e0bffa15 	stw	r2,-24(fp)
    9dc4:	00000206 	br	9dd0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9dc8:	00bffb44 	movi	r2,-19
    9dcc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9dd0:	e0bffa17 	ldw	r2,-24(fp)
    9dd4:	1000090e 	bge	r2,zero,9dfc <open+0x144>
  {
    alt_release_fd (index);  
    9dd8:	e13ff917 	ldw	r4,-28(fp)
    9ddc:	0009e140 	call	9e14 <alt_release_fd>
    ALT_ERRNO = -status;
    9de0:	0009b900 	call	9b90 <alt_get_errno>
    9de4:	1007883a 	mov	r3,r2
    9de8:	e0bffa17 	ldw	r2,-24(fp)
    9dec:	0085c83a 	sub	r2,zero,r2
    9df0:	18800015 	stw	r2,0(r3)
    return -1;
    9df4:	00bfffc4 	movi	r2,-1
    9df8:	00000106 	br	9e00 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9dfc:	e0bff917 	ldw	r2,-28(fp)
}
    9e00:	e037883a 	mov	sp,fp
    9e04:	dfc00117 	ldw	ra,4(sp)
    9e08:	df000017 	ldw	fp,0(sp)
    9e0c:	dec00204 	addi	sp,sp,8
    9e10:	f800283a 	ret

00009e14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9e14:	defffc04 	addi	sp,sp,-16
    9e18:	dfc00315 	stw	ra,12(sp)
    9e1c:	df000215 	stw	fp,8(sp)
    9e20:	dc000115 	stw	r16,4(sp)
    9e24:	df000204 	addi	fp,sp,8
    9e28:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9e2c:	e0bffe17 	ldw	r2,-8(fp)
    9e30:	108000d0 	cmplti	r2,r2,3
    9e34:	1000111e 	bne	r2,zero,9e7c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9e38:	04000074 	movhi	r16,1
    9e3c:	842a2a04 	addi	r16,r16,-22360
    9e40:	e0bffe17 	ldw	r2,-8(fp)
    9e44:	01400304 	movi	r5,12
    9e48:	1009883a 	mov	r4,r2
    9e4c:	0008dac0 	call	8dac <__mulsi3>
    9e50:	8085883a 	add	r2,r16,r2
    9e54:	10800204 	addi	r2,r2,8
    9e58:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9e5c:	04000074 	movhi	r16,1
    9e60:	842a2a04 	addi	r16,r16,-22360
    9e64:	e0bffe17 	ldw	r2,-8(fp)
    9e68:	01400304 	movi	r5,12
    9e6c:	1009883a 	mov	r4,r2
    9e70:	0008dac0 	call	8dac <__mulsi3>
    9e74:	8085883a 	add	r2,r16,r2
    9e78:	10000015 	stw	zero,0(r2)
  }
}
    9e7c:	0001883a 	nop
    9e80:	e6ffff04 	addi	sp,fp,-4
    9e84:	dfc00217 	ldw	ra,8(sp)
    9e88:	df000117 	ldw	fp,4(sp)
    9e8c:	dc000017 	ldw	r16,0(sp)
    9e90:	dec00304 	addi	sp,sp,12
    9e94:	f800283a 	ret

00009e98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9e98:	defffa04 	addi	sp,sp,-24
    9e9c:	df000515 	stw	fp,20(sp)
    9ea0:	df000504 	addi	fp,sp,20
    9ea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ea8:	0005303a 	rdctl	r2,status
    9eac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9eb0:	e0fffc17 	ldw	r3,-16(fp)
    9eb4:	00bfff84 	movi	r2,-2
    9eb8:	1884703a 	and	r2,r3,r2
    9ebc:	1001703a 	wrctl	status,r2
  
  return context;
    9ec0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9ec4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    9ec8:	e0bfff17 	ldw	r2,-4(fp)
    9ecc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9ed0:	e0bffd17 	ldw	r2,-12(fp)
    9ed4:	10800017 	ldw	r2,0(r2)
    9ed8:	e0fffd17 	ldw	r3,-12(fp)
    9edc:	18c00117 	ldw	r3,4(r3)
    9ee0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9ee4:	e0bffd17 	ldw	r2,-12(fp)
    9ee8:	10800117 	ldw	r2,4(r2)
    9eec:	e0fffd17 	ldw	r3,-12(fp)
    9ef0:	18c00017 	ldw	r3,0(r3)
    9ef4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9ef8:	e0bffd17 	ldw	r2,-12(fp)
    9efc:	e0fffd17 	ldw	r3,-12(fp)
    9f00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9f04:	e0bffd17 	ldw	r2,-12(fp)
    9f08:	e0fffd17 	ldw	r3,-12(fp)
    9f0c:	10c00015 	stw	r3,0(r2)
    9f10:	e0bffb17 	ldw	r2,-20(fp)
    9f14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f18:	e0bffe17 	ldw	r2,-8(fp)
    9f1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9f20:	0001883a 	nop
    9f24:	e037883a 	mov	sp,fp
    9f28:	df000017 	ldw	fp,0(sp)
    9f2c:	dec00104 	addi	sp,sp,4
    9f30:	f800283a 	ret

00009f34 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9f34:	defffb04 	addi	sp,sp,-20
    9f38:	dfc00415 	stw	ra,16(sp)
    9f3c:	df000315 	stw	fp,12(sp)
    9f40:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9f44:	d0a00917 	ldw	r2,-32732(gp)
    9f48:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9f4c:	d0a0c917 	ldw	r2,-31964(gp)
    9f50:	10800044 	addi	r2,r2,1
    9f54:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9f58:	00002e06 	br	a014 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
    9f60:	10800017 	ldw	r2,0(r2)
    9f64:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9f68:	e0bffd17 	ldw	r2,-12(fp)
    9f6c:	10800403 	ldbu	r2,16(r2)
    9f70:	10803fcc 	andi	r2,r2,255
    9f74:	10000426 	beq	r2,zero,9f88 <alt_tick+0x54>
    9f78:	d0a0c917 	ldw	r2,-31964(gp)
    9f7c:	1000021e 	bne	r2,zero,9f88 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9f80:	e0bffd17 	ldw	r2,-12(fp)
    9f84:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	10800217 	ldw	r2,8(r2)
    9f90:	d0e0c917 	ldw	r3,-31964(gp)
    9f94:	18801d36 	bltu	r3,r2,a00c <alt_tick+0xd8>
    9f98:	e0bffd17 	ldw	r2,-12(fp)
    9f9c:	10800403 	ldbu	r2,16(r2)
    9fa0:	10803fcc 	andi	r2,r2,255
    9fa4:	1000191e 	bne	r2,zero,a00c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9fa8:	e0bffd17 	ldw	r2,-12(fp)
    9fac:	10800317 	ldw	r2,12(r2)
    9fb0:	e0fffd17 	ldw	r3,-12(fp)
    9fb4:	18c00517 	ldw	r3,20(r3)
    9fb8:	1809883a 	mov	r4,r3
    9fbc:	103ee83a 	callr	r2
    9fc0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9fc4:	e0bfff17 	ldw	r2,-4(fp)
    9fc8:	1000031e 	bne	r2,zero,9fd8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9fcc:	e13ffd17 	ldw	r4,-12(fp)
    9fd0:	0009e980 	call	9e98 <alt_alarm_stop>
    9fd4:	00000d06 	br	a00c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9fd8:	e0bffd17 	ldw	r2,-12(fp)
    9fdc:	10c00217 	ldw	r3,8(r2)
    9fe0:	e0bfff17 	ldw	r2,-4(fp)
    9fe4:	1887883a 	add	r3,r3,r2
    9fe8:	e0bffd17 	ldw	r2,-12(fp)
    9fec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9ff0:	e0bffd17 	ldw	r2,-12(fp)
    9ff4:	10c00217 	ldw	r3,8(r2)
    9ff8:	d0a0c917 	ldw	r2,-31964(gp)
    9ffc:	1880032e 	bgeu	r3,r2,a00c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a000:	e0bffd17 	ldw	r2,-12(fp)
    a004:	00c00044 	movi	r3,1
    a008:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a00c:	e0bffe17 	ldw	r2,-8(fp)
    a010:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a014:	e0fffd17 	ldw	r3,-12(fp)
    a018:	d0a00904 	addi	r2,gp,-32732
    a01c:	18bfcf1e 	bne	r3,r2,9f5c <_gp+0xffff7534>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a020:	0001883a 	nop
}
    a024:	0001883a 	nop
    a028:	e037883a 	mov	sp,fp
    a02c:	dfc00117 	ldw	ra,4(sp)
    a030:	df000017 	ldw	fp,0(sp)
    a034:	dec00204 	addi	sp,sp,8
    a038:	f800283a 	ret

0000a03c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a03c:	deffff04 	addi	sp,sp,-4
    a040:	df000015 	stw	fp,0(sp)
    a044:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a048:	000170fa 	wrctl	ienable,zero
}
    a04c:	0001883a 	nop
    a050:	e037883a 	mov	sp,fp
    a054:	df000017 	ldw	fp,0(sp)
    a058:	dec00104 	addi	sp,sp,4
    a05c:	f800283a 	ret

0000a060 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a060:	defffa04 	addi	sp,sp,-24
    a064:	dfc00515 	stw	ra,20(sp)
    a068:	df000415 	stw	fp,16(sp)
    a06c:	df000404 	addi	fp,sp,16
    a070:	e13ffe15 	stw	r4,-8(fp)
    a074:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a078:	e0bfff17 	ldw	r2,-4(fp)
    a07c:	10800017 	ldw	r2,0(r2)
    a080:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a084:	e13ffe17 	ldw	r4,-8(fp)
    a088:	00085180 	call	8518 <strlen>
    a08c:	10800044 	addi	r2,r2,1
    a090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a094:	00000d06 	br	a0cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a098:	e0bffc17 	ldw	r2,-16(fp)
    a09c:	10800217 	ldw	r2,8(r2)
    a0a0:	e0fffd17 	ldw	r3,-12(fp)
    a0a4:	180d883a 	mov	r6,r3
    a0a8:	e17ffe17 	ldw	r5,-8(fp)
    a0ac:	1009883a 	mov	r4,r2
    a0b0:	000a38c0 	call	a38c <memcmp>
    a0b4:	1000021e 	bne	r2,zero,a0c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a0b8:	e0bffc17 	ldw	r2,-16(fp)
    a0bc:	00000706 	br	a0dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a0c0:	e0bffc17 	ldw	r2,-16(fp)
    a0c4:	10800017 	ldw	r2,0(r2)
    a0c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a0cc:	e0fffc17 	ldw	r3,-16(fp)
    a0d0:	e0bfff17 	ldw	r2,-4(fp)
    a0d4:	18bff01e 	bne	r3,r2,a098 <_gp+0xffff7670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a0d8:	0005883a 	mov	r2,zero
}
    a0dc:	e037883a 	mov	sp,fp
    a0e0:	dfc00117 	ldw	ra,4(sp)
    a0e4:	df000017 	ldw	fp,0(sp)
    a0e8:	dec00204 	addi	sp,sp,8
    a0ec:	f800283a 	ret

0000a0f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a0f0:	defffb04 	addi	sp,sp,-20
    a0f4:	dfc00415 	stw	ra,16(sp)
    a0f8:	df000315 	stw	fp,12(sp)
    a0fc:	df000304 	addi	fp,sp,12
    a100:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a104:	d0a00217 	ldw	r2,-32760(gp)
    a108:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a10c:	00003106 	br	a1d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a110:	e0bffd17 	ldw	r2,-12(fp)
    a114:	10800217 	ldw	r2,8(r2)
    a118:	1009883a 	mov	r4,r2
    a11c:	00085180 	call	8518 <strlen>
    a120:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a124:	e0bffd17 	ldw	r2,-12(fp)
    a128:	10c00217 	ldw	r3,8(r2)
    a12c:	e0bffe17 	ldw	r2,-8(fp)
    a130:	10bfffc4 	addi	r2,r2,-1
    a134:	1885883a 	add	r2,r3,r2
    a138:	10800003 	ldbu	r2,0(r2)
    a13c:	10803fcc 	andi	r2,r2,255
    a140:	1080201c 	xori	r2,r2,128
    a144:	10bfe004 	addi	r2,r2,-128
    a148:	10800bd8 	cmpnei	r2,r2,47
    a14c:	1000031e 	bne	r2,zero,a15c <alt_find_file+0x6c>
    {
      len -= 1;
    a150:	e0bffe17 	ldw	r2,-8(fp)
    a154:	10bfffc4 	addi	r2,r2,-1
    a158:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a15c:	e0bffe17 	ldw	r2,-8(fp)
    a160:	e0ffff17 	ldw	r3,-4(fp)
    a164:	1885883a 	add	r2,r3,r2
    a168:	10800003 	ldbu	r2,0(r2)
    a16c:	10803fcc 	andi	r2,r2,255
    a170:	1080201c 	xori	r2,r2,128
    a174:	10bfe004 	addi	r2,r2,-128
    a178:	10800be0 	cmpeqi	r2,r2,47
    a17c:	1000081e 	bne	r2,zero,a1a0 <alt_find_file+0xb0>
    a180:	e0bffe17 	ldw	r2,-8(fp)
    a184:	e0ffff17 	ldw	r3,-4(fp)
    a188:	1885883a 	add	r2,r3,r2
    a18c:	10800003 	ldbu	r2,0(r2)
    a190:	10803fcc 	andi	r2,r2,255
    a194:	1080201c 	xori	r2,r2,128
    a198:	10bfe004 	addi	r2,r2,-128
    a19c:	10000a1e 	bne	r2,zero,a1c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a1a0:	e0bffd17 	ldw	r2,-12(fp)
    a1a4:	10800217 	ldw	r2,8(r2)
    a1a8:	e0fffe17 	ldw	r3,-8(fp)
    a1ac:	180d883a 	mov	r6,r3
    a1b0:	e17fff17 	ldw	r5,-4(fp)
    a1b4:	1009883a 	mov	r4,r2
    a1b8:	000a38c0 	call	a38c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a1bc:	1000021e 	bne	r2,zero,a1c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a1c0:	e0bffd17 	ldw	r2,-12(fp)
    a1c4:	00000706 	br	a1e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a1c8:	e0bffd17 	ldw	r2,-12(fp)
    a1cc:	10800017 	ldw	r2,0(r2)
    a1d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a1d4:	e0fffd17 	ldw	r3,-12(fp)
    a1d8:	d0a00204 	addi	r2,gp,-32760
    a1dc:	18bfcc1e 	bne	r3,r2,a110 <_gp+0xffff76e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a1e0:	0005883a 	mov	r2,zero
}
    a1e4:	e037883a 	mov	sp,fp
    a1e8:	dfc00117 	ldw	ra,4(sp)
    a1ec:	df000017 	ldw	fp,0(sp)
    a1f0:	dec00204 	addi	sp,sp,8
    a1f4:	f800283a 	ret

0000a1f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a1f8:	defffa04 	addi	sp,sp,-24
    a1fc:	dfc00515 	stw	ra,20(sp)
    a200:	df000415 	stw	fp,16(sp)
    a204:	dc000315 	stw	r16,12(sp)
    a208:	df000404 	addi	fp,sp,16
    a20c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a210:	00bffa04 	movi	r2,-24
    a214:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a218:	e03ffc15 	stw	zero,-16(fp)
    a21c:	00001d06 	br	a294 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a220:	04000074 	movhi	r16,1
    a224:	842a2a04 	addi	r16,r16,-22360
    a228:	e0bffc17 	ldw	r2,-16(fp)
    a22c:	01400304 	movi	r5,12
    a230:	1009883a 	mov	r4,r2
    a234:	0008dac0 	call	8dac <__mulsi3>
    a238:	8085883a 	add	r2,r16,r2
    a23c:	10800017 	ldw	r2,0(r2)
    a240:	1000111e 	bne	r2,zero,a288 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a244:	04000074 	movhi	r16,1
    a248:	842a2a04 	addi	r16,r16,-22360
    a24c:	e0bffc17 	ldw	r2,-16(fp)
    a250:	01400304 	movi	r5,12
    a254:	1009883a 	mov	r4,r2
    a258:	0008dac0 	call	8dac <__mulsi3>
    a25c:	8085883a 	add	r2,r16,r2
    a260:	e0fffe17 	ldw	r3,-8(fp)
    a264:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a268:	d0e00617 	ldw	r3,-32744(gp)
    a26c:	e0bffc17 	ldw	r2,-16(fp)
    a270:	1880020e 	bge	r3,r2,a27c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a274:	e0bffc17 	ldw	r2,-16(fp)
    a278:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a27c:	e0bffc17 	ldw	r2,-16(fp)
    a280:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a284:	00000606 	br	a2a0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a288:	e0bffc17 	ldw	r2,-16(fp)
    a28c:	10800044 	addi	r2,r2,1
    a290:	e0bffc15 	stw	r2,-16(fp)
    a294:	e0bffc17 	ldw	r2,-16(fp)
    a298:	10800810 	cmplti	r2,r2,32
    a29c:	103fe01e 	bne	r2,zero,a220 <_gp+0xffff77f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a2a0:	e0bffd17 	ldw	r2,-12(fp)
}
    a2a4:	e6ffff04 	addi	sp,fp,-4
    a2a8:	dfc00217 	ldw	ra,8(sp)
    a2ac:	df000117 	ldw	fp,4(sp)
    a2b0:	dc000017 	ldw	r16,0(sp)
    a2b4:	dec00304 	addi	sp,sp,12
    a2b8:	f800283a 	ret

0000a2bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a2bc:	defffe04 	addi	sp,sp,-8
    a2c0:	df000115 	stw	fp,4(sp)
    a2c4:	df000104 	addi	fp,sp,4
    a2c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a2cc:	e0bfff17 	ldw	r2,-4(fp)
    a2d0:	10bffe84 	addi	r2,r2,-6
    a2d4:	10c00428 	cmpgeui	r3,r2,16
    a2d8:	18001a1e 	bne	r3,zero,a344 <alt_exception_cause_generated_bad_addr+0x88>
    a2dc:	100690ba 	slli	r3,r2,2
    a2e0:	00800074 	movhi	r2,1
    a2e4:	10a8bd04 	addi	r2,r2,-23820
    a2e8:	1885883a 	add	r2,r3,r2
    a2ec:	10800017 	ldw	r2,0(r2)
    a2f0:	1000683a 	jmp	r2
    a2f4:	0000a334 	movhi	zero,652
    a2f8:	0000a334 	movhi	zero,652
    a2fc:	0000a344 	movi	zero,653
    a300:	0000a344 	movi	zero,653
    a304:	0000a344 	movi	zero,653
    a308:	0000a334 	movhi	zero,652
    a30c:	0000a33c 	xorhi	zero,zero,652
    a310:	0000a344 	movi	zero,653
    a314:	0000a334 	movhi	zero,652
    a318:	0000a334 	movhi	zero,652
    a31c:	0000a344 	movi	zero,653
    a320:	0000a334 	movhi	zero,652
    a324:	0000a33c 	xorhi	zero,zero,652
    a328:	0000a344 	movi	zero,653
    a32c:	0000a344 	movi	zero,653
    a330:	0000a334 	movhi	zero,652
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a334:	00800044 	movi	r2,1
    a338:	00000306 	br	a348 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a33c:	0005883a 	mov	r2,zero
    a340:	00000106 	br	a348 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a344:	0005883a 	mov	r2,zero
  }
}
    a348:	e037883a 	mov	sp,fp
    a34c:	df000017 	ldw	fp,0(sp)
    a350:	dec00104 	addi	sp,sp,4
    a354:	f800283a 	ret

0000a358 <atexit>:
    a358:	200b883a 	mov	r5,r4
    a35c:	000f883a 	mov	r7,zero
    a360:	000d883a 	mov	r6,zero
    a364:	0009883a 	mov	r4,zero
    a368:	000a3bc1 	jmpi	a3bc <__register_exitproc>

0000a36c <exit>:
    a36c:	defffe04 	addi	sp,sp,-8
    a370:	000b883a 	mov	r5,zero
    a374:	dc000015 	stw	r16,0(sp)
    a378:	dfc00115 	stw	ra,4(sp)
    a37c:	2021883a 	mov	r16,r4
    a380:	000a5140 	call	a514 <__call_exitprocs>
    a384:	8009883a 	mov	r4,r16
    a388:	000a6a40 	call	a6a4 <_exit>

0000a38c <memcmp>:
    a38c:	218d883a 	add	r6,r4,r6
    a390:	21800826 	beq	r4,r6,a3b4 <memcmp+0x28>
    a394:	20800003 	ldbu	r2,0(r4)
    a398:	28c00003 	ldbu	r3,0(r5)
    a39c:	10c00226 	beq	r2,r3,a3a8 <memcmp+0x1c>
    a3a0:	10c5c83a 	sub	r2,r2,r3
    a3a4:	f800283a 	ret
    a3a8:	21000044 	addi	r4,r4,1
    a3ac:	29400044 	addi	r5,r5,1
    a3b0:	003ff706 	br	a390 <_gp+0xffff7968>
    a3b4:	0005883a 	mov	r2,zero
    a3b8:	f800283a 	ret

0000a3bc <__register_exitproc>:
    a3bc:	00800074 	movhi	r2,1
    a3c0:	10aa8a04 	addi	r2,r2,-21976
    a3c4:	10c00017 	ldw	r3,0(r2)
    a3c8:	defff904 	addi	sp,sp,-28
    a3cc:	dc000015 	stw	r16,0(sp)
    a3d0:	1c000c17 	ldw	r16,48(r3)
    a3d4:	dd400515 	stw	r21,20(sp)
    a3d8:	dd000415 	stw	r20,16(sp)
    a3dc:	dcc00315 	stw	r19,12(sp)
    a3e0:	dc800215 	stw	r18,8(sp)
    a3e4:	dc400115 	stw	r17,4(sp)
    a3e8:	dfc00615 	stw	ra,24(sp)
    a3ec:	202b883a 	mov	r21,r4
    a3f0:	2823883a 	mov	r17,r5
    a3f4:	3027883a 	mov	r19,r6
    a3f8:	3825883a 	mov	r18,r7
    a3fc:	1029883a 	mov	r20,r2
    a400:	8000021e 	bne	r16,zero,a40c <__register_exitproc+0x50>
    a404:	1c000d04 	addi	r16,r3,52
    a408:	1c000c15 	stw	r16,48(r3)
    a40c:	80800117 	ldw	r2,4(r16)
    a410:	00c007c4 	movi	r3,31
    a414:	1880110e 	bge	r3,r2,a45c <__register_exitproc+0xa0>
    a418:	00800034 	movhi	r2,0
    a41c:	10800004 	addi	r2,r2,0
    a420:	1000021e 	bne	r2,zero,a42c <__register_exitproc+0x70>
    a424:	00bfffc4 	movi	r2,-1
    a428:	00003106 	br	a4f0 <__register_exitproc+0x134>
    a42c:	01002304 	movi	r4,140
    a430:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    a434:	1021883a 	mov	r16,r2
    a438:	103ffa26 	beq	r2,zero,a424 <_gp+0xffff79fc>
    a43c:	10000115 	stw	zero,4(r2)
    a440:	a0800017 	ldw	r2,0(r20)
    a444:	10c00c17 	ldw	r3,48(r2)
    a448:	80c00015 	stw	r3,0(r16)
    a44c:	14000c15 	stw	r16,48(r2)
    a450:	80002215 	stw	zero,136(r16)
    a454:	a8001d26 	beq	r21,zero,a4cc <__register_exitproc+0x110>
    a458:	00000606 	br	a474 <__register_exitproc+0xb8>
    a45c:	a8001b26 	beq	r21,zero,a4cc <__register_exitproc+0x110>
    a460:	80802217 	ldw	r2,136(r16)
    a464:	1000091e 	bne	r2,zero,a48c <__register_exitproc+0xd0>
    a468:	00800034 	movhi	r2,0
    a46c:	10800004 	addi	r2,r2,0
    a470:	103fec26 	beq	r2,zero,a424 <_gp+0xffff79fc>
    a474:	01004204 	movi	r4,264
    a478:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    a47c:	103fe926 	beq	r2,zero,a424 <_gp+0xffff79fc>
    a480:	10004015 	stw	zero,256(r2)
    a484:	10004115 	stw	zero,260(r2)
    a488:	80802215 	stw	r2,136(r16)
    a48c:	81400117 	ldw	r5,4(r16)
    a490:	01000044 	movi	r4,1
    a494:	2947883a 	add	r3,r5,r5
    a498:	18c7883a 	add	r3,r3,r3
    a49c:	10c7883a 	add	r3,r2,r3
    a4a0:	1cc00015 	stw	r19,0(r3)
    a4a4:	2148983a 	sll	r4,r4,r5
    a4a8:	11404017 	ldw	r5,256(r2)
    a4ac:	290ab03a 	or	r5,r5,r4
    a4b0:	11404015 	stw	r5,256(r2)
    a4b4:	1c802015 	stw	r18,128(r3)
    a4b8:	00c00084 	movi	r3,2
    a4bc:	a8c0031e 	bne	r21,r3,a4cc <__register_exitproc+0x110>
    a4c0:	10c04117 	ldw	r3,260(r2)
    a4c4:	1908b03a 	or	r4,r3,r4
    a4c8:	11004115 	stw	r4,260(r2)
    a4cc:	80800117 	ldw	r2,4(r16)
    a4d0:	10c00044 	addi	r3,r2,1
    a4d4:	10800084 	addi	r2,r2,2
    a4d8:	1085883a 	add	r2,r2,r2
    a4dc:	1085883a 	add	r2,r2,r2
    a4e0:	80c00115 	stw	r3,4(r16)
    a4e4:	80a1883a 	add	r16,r16,r2
    a4e8:	84400015 	stw	r17,0(r16)
    a4ec:	0005883a 	mov	r2,zero
    a4f0:	dfc00617 	ldw	ra,24(sp)
    a4f4:	dd400517 	ldw	r21,20(sp)
    a4f8:	dd000417 	ldw	r20,16(sp)
    a4fc:	dcc00317 	ldw	r19,12(sp)
    a500:	dc800217 	ldw	r18,8(sp)
    a504:	dc400117 	ldw	r17,4(sp)
    a508:	dc000017 	ldw	r16,0(sp)
    a50c:	dec00704 	addi	sp,sp,28
    a510:	f800283a 	ret

0000a514 <__call_exitprocs>:
    a514:	defff504 	addi	sp,sp,-44
    a518:	dd000515 	stw	r20,20(sp)
    a51c:	05000074 	movhi	r20,1
    a520:	dc800315 	stw	r18,12(sp)
    a524:	dfc00a15 	stw	ra,40(sp)
    a528:	df000915 	stw	fp,36(sp)
    a52c:	ddc00815 	stw	r23,32(sp)
    a530:	dd800715 	stw	r22,28(sp)
    a534:	dd400615 	stw	r21,24(sp)
    a538:	dcc00415 	stw	r19,16(sp)
    a53c:	dc400215 	stw	r17,8(sp)
    a540:	dc000115 	stw	r16,4(sp)
    a544:	d9000015 	stw	r4,0(sp)
    a548:	2825883a 	mov	r18,r5
    a54c:	a52a8a04 	addi	r20,r20,-21976
    a550:	a4400017 	ldw	r17,0(r20)
    a554:	8cc00c17 	ldw	r19,48(r17)
    a558:	8c400c04 	addi	r17,r17,48
    a55c:	98004526 	beq	r19,zero,a674 <__call_exitprocs+0x160>
    a560:	9c000117 	ldw	r16,4(r19)
    a564:	00900034 	movhi	r2,16384
    a568:	10bfffc4 	addi	r2,r2,-1
    a56c:	9d402217 	ldw	r21,136(r19)
    a570:	85bfffc4 	addi	r22,r16,-1
    a574:	80a1883a 	add	r16,r16,r2
    a578:	8421883a 	add	r16,r16,r16
    a57c:	8421883a 	add	r16,r16,r16
    a580:	ac2f883a 	add	r23,r21,r16
    a584:	84000204 	addi	r16,r16,8
    a588:	9c21883a 	add	r16,r19,r16
    a58c:	b0002716 	blt	r22,zero,a62c <__call_exitprocs+0x118>
    a590:	90000726 	beq	r18,zero,a5b0 <__call_exitprocs+0x9c>
    a594:	a800041e 	bne	r21,zero,a5a8 <__call_exitprocs+0x94>
    a598:	b5bfffc4 	addi	r22,r22,-1
    a59c:	bdffff04 	addi	r23,r23,-4
    a5a0:	843fff04 	addi	r16,r16,-4
    a5a4:	003ff906 	br	a58c <_gp+0xffff7b64>
    a5a8:	b9002017 	ldw	r4,128(r23)
    a5ac:	913ffa1e 	bne	r18,r4,a598 <_gp+0xffff7b70>
    a5b0:	99000117 	ldw	r4,4(r19)
    a5b4:	82000017 	ldw	r8,0(r16)
    a5b8:	213fffc4 	addi	r4,r4,-1
    a5bc:	b100021e 	bne	r22,r4,a5c8 <__call_exitprocs+0xb4>
    a5c0:	9d800115 	stw	r22,4(r19)
    a5c4:	00000106 	br	a5cc <__call_exitprocs+0xb8>
    a5c8:	80000015 	stw	zero,0(r16)
    a5cc:	403ff226 	beq	r8,zero,a598 <_gp+0xffff7b70>
    a5d0:	9f000117 	ldw	fp,4(r19)
    a5d4:	a8000526 	beq	r21,zero,a5ec <__call_exitprocs+0xd8>
    a5d8:	00800044 	movi	r2,1
    a5dc:	1592983a 	sll	r9,r2,r22
    a5e0:	a9404017 	ldw	r5,256(r21)
    a5e4:	494a703a 	and	r5,r9,r5
    a5e8:	2800021e 	bne	r5,zero,a5f4 <__call_exitprocs+0xe0>
    a5ec:	403ee83a 	callr	r8
    a5f0:	00000906 	br	a618 <__call_exitprocs+0x104>
    a5f4:	a9004117 	ldw	r4,260(r21)
    a5f8:	4908703a 	and	r4,r9,r4
    a5fc:	2000041e 	bne	r4,zero,a610 <__call_exitprocs+0xfc>
    a600:	b9400017 	ldw	r5,0(r23)
    a604:	d9000017 	ldw	r4,0(sp)
    a608:	403ee83a 	callr	r8
    a60c:	00000206 	br	a618 <__call_exitprocs+0x104>
    a610:	b9000017 	ldw	r4,0(r23)
    a614:	403ee83a 	callr	r8
    a618:	99000117 	ldw	r4,4(r19)
    a61c:	e13fcc1e 	bne	fp,r4,a550 <_gp+0xffff7b28>
    a620:	89000017 	ldw	r4,0(r17)
    a624:	993fdc26 	beq	r19,r4,a598 <_gp+0xffff7b70>
    a628:	003fc906 	br	a550 <_gp+0xffff7b28>
    a62c:	00800034 	movhi	r2,0
    a630:	10800004 	addi	r2,r2,0
    a634:	10000f26 	beq	r2,zero,a674 <__call_exitprocs+0x160>
    a638:	99400117 	ldw	r5,4(r19)
    a63c:	99000017 	ldw	r4,0(r19)
    a640:	2800091e 	bne	r5,zero,a668 <__call_exitprocs+0x154>
    a644:	20000826 	beq	r4,zero,a668 <__call_exitprocs+0x154>
    a648:	89000015 	stw	r4,0(r17)
    a64c:	a8000226 	beq	r21,zero,a658 <__call_exitprocs+0x144>
    a650:	a809883a 	mov	r4,r21
    a654:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    a658:	9809883a 	mov	r4,r19
    a65c:	00000000 	call	0 <__alt_mem_ram_onchip-0x8000>
    a660:	8cc00017 	ldw	r19,0(r17)
    a664:	003fbd06 	br	a55c <_gp+0xffff7b34>
    a668:	9823883a 	mov	r17,r19
    a66c:	2027883a 	mov	r19,r4
    a670:	003fba06 	br	a55c <_gp+0xffff7b34>
    a674:	dfc00a17 	ldw	ra,40(sp)
    a678:	df000917 	ldw	fp,36(sp)
    a67c:	ddc00817 	ldw	r23,32(sp)
    a680:	dd800717 	ldw	r22,28(sp)
    a684:	dd400617 	ldw	r21,24(sp)
    a688:	dd000517 	ldw	r20,20(sp)
    a68c:	dcc00417 	ldw	r19,16(sp)
    a690:	dc800317 	ldw	r18,12(sp)
    a694:	dc400217 	ldw	r17,8(sp)
    a698:	dc000117 	ldw	r16,4(sp)
    a69c:	dec00b04 	addi	sp,sp,44
    a6a0:	f800283a 	ret

0000a6a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a6a4:	defffd04 	addi	sp,sp,-12
    a6a8:	df000215 	stw	fp,8(sp)
    a6ac:	df000204 	addi	fp,sp,8
    a6b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a6b4:	0001883a 	nop
    a6b8:	e0bfff17 	ldw	r2,-4(fp)
    a6bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a6c4:	10000226 	beq	r2,zero,a6d0 <_exit+0x2c>
    ALT_SIM_FAIL();
    a6c8:	002af070 	cmpltui	zero,zero,43969
    a6cc:	00000106 	br	a6d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a6d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a6d4:	003fff06 	br	a6d4 <_gp+0xffff7cac>
