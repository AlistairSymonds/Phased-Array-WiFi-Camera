// --------------------------------------------------------------------------------
//| Data Source Verilog Driver
// --------------------------------------------------------------------------------
//| Version         : 6.1
//| Created On      : 2006 June 13th
// --------------------------------------------------------------------------------

`define DataSource_Id_OFFSET 0
`define DataSource_Id_LEFT   15
`define DataSource_Id_RIGHT  0
`define DataSource_NumberOfChannels_OFFSET 0
`define DataSource_NumberOfChannels_LEFT   23
`define DataSource_NumberOfChannels_RIGHT  16
`define DataSource_SymbolsPerBeat_OFFSET 0
`define DataSource_SymbolsPerBeat_LEFT   30
`define DataSource_SymbolsPerBeat_RIGHT  24
`define DataSource_SupportsPackets_OFFSET 0
`define DataSource_SupportsPackets_LEFT   31
`define DataSource_SupportsPackets_RIGHT  31
`define DataSource_Enable_OFFSET 4
`define DataSource_Enable_LEFT   0
`define DataSource_Enable_RIGHT  0
`define DataSource_IgnoreReady_OFFSET 4
`define DataSource_IgnoreReady_LEFT   1
`define DataSource_IgnoreReady_RIGHT  1
`define DataSource_Throttle_OFFSET 4
`define DataSource_Throttle_LEFT   16
`define DataSource_Throttle_RIGHT  8
`define DataSource_Busy_OFFSET 8
`define DataSource_Busy_LEFT   0
`define DataSource_Busy_RIGHT  0
`define DataSource_FillLevel_OFFSET 8
`define DataSource_FillLevel_LEFT   15
`define DataSource_FillLevel_RIGHT  7
`define DataSource_Low_OFFSET 0
`define DataSource_Low_LEFT   31
`define DataSource_Low_RIGHT  0
`define DataSource_High_OFFSET 4
`define DataSource_High_LEFT   31
`define DataSource_High_RIGHT  0

task DataSource_Read_Id;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Id_OFFSET, `DataSource_Id_LEFT, `DataSource_Id_RIGHT, data);
   end	
endtask

task DataSource_Assert_Id;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Id_OFFSET, `DataSource_Id_LEFT, `DataSource_Id_RIGHT, data);
      test_assert ( "Source: DataSource_Id value incorrect.", expected==data );
   end
endtask

task DataSource_Set_Id;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_Id_OFFSET, `DataSource_Id_LEFT, `DataSource_Id_RIGHT, data);
   end
endtask
   
task DataSource_Read_NumberOfChannels;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_NumberOfChannels_OFFSET, `DataSource_NumberOfChannels_LEFT, `DataSource_NumberOfChannels_RIGHT, data);
   end	
endtask

task DataSource_Assert_NumberOfChannels;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_NumberOfChannels_OFFSET, `DataSource_NumberOfChannels_LEFT, `DataSource_NumberOfChannels_RIGHT, data);
      test_assert ( "Source: DataSource_NumberOfChannels value incorrect.", expected==data );
   end
endtask

task DataSource_Set_NumberOfChannels;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_NumberOfChannels_OFFSET, `DataSource_NumberOfChannels_LEFT, `DataSource_NumberOfChannels_RIGHT, data);
   end
endtask
   
task DataSource_Read_SymbolsPerBeat;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_SymbolsPerBeat_OFFSET, `DataSource_SymbolsPerBeat_LEFT, `DataSource_SymbolsPerBeat_RIGHT, data);
   end	
endtask

task DataSource_Assert_SymbolsPerBeat;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_SymbolsPerBeat_OFFSET, `DataSource_SymbolsPerBeat_LEFT, `DataSource_SymbolsPerBeat_RIGHT, data);
      test_assert ( "Source: DataSource_SymbolsPerBeat value incorrect.", expected==data );
   end
endtask

task DataSource_Set_SymbolsPerBeat;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_SymbolsPerBeat_OFFSET, `DataSource_SymbolsPerBeat_LEFT, `DataSource_SymbolsPerBeat_RIGHT, data);
   end
endtask
   
task DataSource_Read_SupportsPackets;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_SupportsPackets_OFFSET, `DataSource_SupportsPackets_LEFT, `DataSource_SupportsPackets_RIGHT, data);
   end	
endtask

task DataSource_Assert_SupportsPackets;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_SupportsPackets_OFFSET, `DataSource_SupportsPackets_LEFT, `DataSource_SupportsPackets_RIGHT, data);
      test_assert ( "Source: DataSource_SupportsPackets value incorrect.", expected==data );
   end
endtask

task DataSource_Set_SupportsPackets;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_SupportsPackets_OFFSET, `DataSource_SupportsPackets_LEFT, `DataSource_SupportsPackets_RIGHT, data);
   end
endtask
   
task DataSource_Read_Enable;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Enable_OFFSET, `DataSource_Enable_LEFT, `DataSource_Enable_RIGHT, data);
   end	
endtask

task DataSource_Assert_Enable;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Enable_OFFSET, `DataSource_Enable_LEFT, `DataSource_Enable_RIGHT, data);
      test_assert ( "Source: DataSource_Enable value incorrect.", expected==data );
   end
endtask

task DataSource_Set_Enable;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_Enable_OFFSET, `DataSource_Enable_LEFT, `DataSource_Enable_RIGHT, data);
   end
endtask
   
task DataSource_Read_IgnoreReady;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_IgnoreReady_OFFSET, `DataSource_IgnoreReady_LEFT, `DataSource_IgnoreReady_RIGHT, data);
   end	
endtask

task DataSource_Assert_IgnoreReady;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_IgnoreReady_OFFSET, `DataSource_IgnoreReady_LEFT, `DataSource_IgnoreReady_RIGHT, data);
      test_assert ( "Source: DataSource_IgnoreReady value incorrect.", expected==data );
   end
endtask

task DataSource_Set_IgnoreReady;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_IgnoreReady_OFFSET, `DataSource_IgnoreReady_LEFT, `DataSource_IgnoreReady_RIGHT, data);
   end
endtask
   
task DataSource_Read_Throttle;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Throttle_OFFSET, `DataSource_Throttle_LEFT, `DataSource_Throttle_RIGHT, data);
   end	
endtask

task DataSource_Assert_Throttle;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Throttle_OFFSET, `DataSource_Throttle_LEFT, `DataSource_Throttle_RIGHT, data);
      test_assert ( "Source: DataSource_Throttle value incorrect.", expected==data );
   end
endtask

task DataSource_Set_Throttle;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_Throttle_OFFSET, `DataSource_Throttle_LEFT, `DataSource_Throttle_RIGHT, data);
   end
endtask
   
task DataSource_Read_Busy;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Busy_OFFSET, `DataSource_Busy_LEFT, `DataSource_Busy_RIGHT, data);
   end	
endtask

task DataSource_Assert_Busy;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Busy_OFFSET, `DataSource_Busy_LEFT, `DataSource_Busy_RIGHT, data);
      test_assert ( "Source: DataSource_Busy value incorrect.", expected==data );
   end
endtask

task DataSource_Set_Busy;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_Busy_OFFSET, `DataSource_Busy_LEFT, `DataSource_Busy_RIGHT, data);
   end
endtask
   
task DataSource_Read_FillLevel;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_FillLevel_OFFSET, `DataSource_FillLevel_LEFT, `DataSource_FillLevel_RIGHT, data);
   end	
endtask

task DataSource_Assert_FillLevel;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_FillLevel_OFFSET, `DataSource_FillLevel_LEFT, `DataSource_FillLevel_RIGHT, data);
      test_assert ( "Source: DataSource_FillLevel value incorrect.", expected==data );
   end
endtask

task DataSource_Set_FillLevel;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_FillLevel_OFFSET, `DataSource_FillLevel_LEFT, `DataSource_FillLevel_RIGHT, data);
   end
endtask
   
task DataSource_Read_Low;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Low_OFFSET, `DataSource_Low_LEFT, `DataSource_Low_RIGHT, data);
   end	
endtask

task DataSource_Assert_Low;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_Low_OFFSET, `DataSource_Low_LEFT, `DataSource_Low_RIGHT, data);
      test_assert ( "Source: DataSource_Low value incorrect.", expected==data );
   end
endtask

task DataSource_Set_Low;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_Low_OFFSET, `DataSource_Low_LEFT, `DataSource_Low_RIGHT, data);
   end
endtask
   
task DataSource_Read_High;
   input  [31:0] baseAddress;
   output [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_High_OFFSET, `DataSource_High_LEFT, `DataSource_High_RIGHT, data);
   end	
endtask

task DataSource_Assert_High;
   input  [31:0] baseAddress;
   input  [31:0] expected;
   reg    [31:0] data;
   begin
      do_read ( baseAddress+`DataSource_High_OFFSET, `DataSource_High_LEFT, `DataSource_High_RIGHT, data);
      test_assert ( "Source: DataSource_High value incorrect.", expected==data );
   end
endtask

task DataSource_Set_High;
   input  [31:0] baseAddress;
   input  [31:0] data;
   begin
      do_readmodifywrite(baseAddress+`DataSource_High_OFFSET, `DataSource_High_LEFT, `DataSource_High_RIGHT, data);
   end
endtask
   

task DataSource_WaitUntilNotBusy;
   input  [31:0] baseAddress;
      reg busy;
   begin
         DataSource_Read_Busy(baseAddress, busy);
	     while (busy)
            DataSource_Read_Busy(baseAddress, busy);
   end
endtask

task DataSource_SendCompletePacket;
   input  [31:0] baseAddress;
   input  [31:0] channel;   
   input  [31:0] size;      
   reg [13:0] tmp_channel;
   reg [15:0] tmp_size;
   begin
	 tmp_size = size;
	 tmp_channel = channel;
      DataSource_Set_Low(baseAddress, {2'b11,tmp_channel,tmp_size});
   end
endtask

task DataSource_SendStartOfPacket;
   input  [31:0] baseAddress;
   input  [31:0] channel;   
   input  [31:0] size;      
   reg [13:0] tmp_channel;
   reg [15:0] tmp_size;
   begin
	 tmp_size = size;
	 tmp_channel = channel;
      DataSource_Set_Low(baseAddress, {2'b01,tmp_channel,tmp_size});
   end
endtask

task DataSource_SendMiddleOfPacket;
   input  [31:0] baseAddress;
   input  [31:0] channel;   
   input  [31:0] size;      
   reg [13:0] tmp_channel;
   reg [15:0] tmp_size;
   begin
	 tmp_size = size;
	 tmp_channel = channel;
      DataSource_Set_Low(baseAddress, {2'b00,tmp_channel,tmp_size});
   end
endtask

task DataSource_SendEndOfPacket;
   input  [31:0] baseAddress;
   input  [31:0] channel;   
   input  [31:0] size;      
   reg [13:0] tmp_channel;
   reg [15:0] tmp_size;
   begin
	 tmp_size = size;
	 tmp_channel = channel;
      DataSource_Set_Low(baseAddress, {2'b10,tmp_channel,tmp_size});
   end
endtask

task DataSource_Set_DataError;
   input  [31:0] baseAddress;
   input  [15:0] error;   
   begin
   	 DataSource_Set_High(baseAddress, {error,16'h0000} );
   end
endtask

task DataSource_Set_SignalledError;
   input  [31:0] baseAddress;
   input  [15:0] error;   
   begin
   	 DataSource_Set_High(baseAddress, {16'h0000, error} );
   end
endtask

task DataSource_Set_SuppressSop;
   input  [31:0] baseAddress;
   begin
   	 DataSource_Set_High(baseAddress, 32'h01000000 );
   end
endtask

task DataSource_Set_SuppressEop;
   input  [31:0] baseAddress;
   begin
   	 DataSource_Set_High(baseAddress, 32'h02000000 );
   end
endtask

task DataSource_Clear_Error;
   input  [31:0] baseAddress;
   begin
   	 DataSource_Set_High(baseAddress, 32'h0 );
   end
endtask
