-- WiPhase_top_level_avalon_st_adapter.vhd

-- This file was auto-generated from altera_avalon_st_adapter_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 17.1 590

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WiPhase_top_level_avalon_st_adapter is
	generic (
		inBitsPerSymbol : integer := 8;
		inUsePackets    : integer := 1;
		inDataWidth     : integer := 8;
		inChannelWidth  : integer := 0;
		inErrorWidth    : integer := 0;
		inUseEmptyPort  : integer := 0;
		inUseValid      : integer := 0;
		inUseReady      : integer := 0;
		inReadyLatency  : integer := 0;
		outDataWidth    : integer := 32;
		outChannelWidth : integer := 0;
		outErrorWidth   : integer := 1;
		outUseEmptyPort : integer := 1;
		outUseValid     : integer := 1;
		outUseReady     : integer := 1;
		outReadyLatency : integer := 0
	);
	port (
		in_clk_0_clk        : in  std_logic                     := '0';             -- in_clk_0.clk
		in_rst_0_reset      : in  std_logic                     := '0';             -- in_rst_0.reset
		in_0_data           : in  std_logic_vector(7 downto 0)  := (others => '0'); --     in_0.data
		in_0_startofpacket  : in  std_logic                     := '0';             --         .startofpacket
		in_0_endofpacket    : in  std_logic                     := '0';             --         .endofpacket
		out_0_data          : out std_logic_vector(31 downto 0);                    --    out_0.data
		out_0_valid         : out std_logic;                                        --         .valid
		out_0_ready         : in  std_logic                     := '0';             --         .ready
		out_0_startofpacket : out std_logic;                                        --         .startofpacket
		out_0_endofpacket   : out std_logic;                                        --         .endofpacket
		out_0_empty         : out std_logic_vector(1 downto 0);                     --         .empty
		out_0_error         : out std_logic_vector(0 downto 0)                      --         .error
	);
end entity WiPhase_top_level_avalon_st_adapter;

architecture rtl of WiPhase_top_level_avalon_st_adapter is
	component WiPhase_top_level_avalon_st_adapter_data_format_adapter_0 is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset_n           : in  std_logic                     := 'X';             -- reset_n
			in_data           : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(31 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_empty         : out std_logic_vector(1 downto 0)                      -- empty
		);
	end component WiPhase_top_level_avalon_st_adapter_data_format_adapter_0;

	component WiPhase_top_level_avalon_st_adapter_error_adapter_0 is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset_n           : in  std_logic                     := 'X';             -- reset_n
			in_data           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_empty          : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			out_data          : out std_logic_vector(31 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_empty         : out std_logic_vector(1 downto 0);                     -- empty
			out_error         : out std_logic_vector(0 downto 0)                      -- error
		);
	end component WiPhase_top_level_avalon_st_adapter_error_adapter_0;

	component WiPhase_top_level_avalon_st_adapter_timing_adapter_0 is
		port (
			clk               : in  std_logic                    := 'X';             -- clk
			reset_n           : in  std_logic                    := 'X';             -- reset_n
			in_data           : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			in_startofpacket  : in  std_logic                    := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                    := 'X';             -- endofpacket
			out_data          : out std_logic_vector(7 downto 0);                    -- data
			out_valid         : out std_logic;                                       -- valid
			out_ready         : in  std_logic                    := 'X';             -- ready
			out_startofpacket : out std_logic;                                       -- startofpacket
			out_endofpacket   : out std_logic                                        -- endofpacket
		);
	end component WiPhase_top_level_avalon_st_adapter_timing_adapter_0;

	signal timing_adapter_0_out_valid              : std_logic;                     -- timing_adapter_0:out_valid -> data_format_adapter_0:in_valid
	signal timing_adapter_0_out_data               : std_logic_vector(7 downto 0);  -- timing_adapter_0:out_data -> data_format_adapter_0:in_data
	signal timing_adapter_0_out_ready              : std_logic;                     -- data_format_adapter_0:in_ready -> timing_adapter_0:out_ready
	signal timing_adapter_0_out_startofpacket      : std_logic;                     -- timing_adapter_0:out_startofpacket -> data_format_adapter_0:in_startofpacket
	signal timing_adapter_0_out_endofpacket        : std_logic;                     -- timing_adapter_0:out_endofpacket -> data_format_adapter_0:in_endofpacket
	signal data_format_adapter_0_out_valid         : std_logic;                     -- data_format_adapter_0:out_valid -> error_adapter_0:in_valid
	signal data_format_adapter_0_out_data          : std_logic_vector(31 downto 0); -- data_format_adapter_0:out_data -> error_adapter_0:in_data
	signal data_format_adapter_0_out_ready         : std_logic;                     -- error_adapter_0:in_ready -> data_format_adapter_0:out_ready
	signal data_format_adapter_0_out_startofpacket : std_logic;                     -- data_format_adapter_0:out_startofpacket -> error_adapter_0:in_startofpacket
	signal data_format_adapter_0_out_endofpacket   : std_logic;                     -- data_format_adapter_0:out_endofpacket -> error_adapter_0:in_endofpacket
	signal data_format_adapter_0_out_empty         : std_logic_vector(1 downto 0);  -- data_format_adapter_0:out_empty -> error_adapter_0:in_empty
	signal in_rst_0_reset_ports_inv                : std_logic;                     -- in_rst_0_reset:inv -> [data_format_adapter_0:reset_n, error_adapter_0:reset_n, timing_adapter_0:reset_n]

begin

	inbitspersymbol_check : if inBitsPerSymbol /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusepackets_check : if inUsePackets /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	indatawidth_check : if inDataWidth /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inchannelwidth_check : if inChannelWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inerrorwidth_check : if inErrorWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseemptyport_check : if inUseEmptyPort /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusevalid_check : if inUseValid /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseready_check : if inUseReady /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inreadylatency_check : if inReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outdatawidth_check : if outDataWidth /= 32 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outchannelwidth_check : if outChannelWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outerrorwidth_check : if outErrorWidth /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseemptyport_check : if outUseEmptyPort /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outusevalid_check : if outUseValid /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseready_check : if outUseReady /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outreadylatency_check : if outReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	data_format_adapter_0 : component WiPhase_top_level_avalon_st_adapter_data_format_adapter_0
		port map (
			clk               => in_clk_0_clk,                            --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,                -- reset.reset_n
			in_data           => timing_adapter_0_out_data,               --    in.data
			in_valid          => timing_adapter_0_out_valid,              --      .valid
			in_ready          => timing_adapter_0_out_ready,              --      .ready
			in_startofpacket  => timing_adapter_0_out_startofpacket,      --      .startofpacket
			in_endofpacket    => timing_adapter_0_out_endofpacket,        --      .endofpacket
			out_data          => data_format_adapter_0_out_data,          --   out.data
			out_valid         => data_format_adapter_0_out_valid,         --      .valid
			out_ready         => data_format_adapter_0_out_ready,         --      .ready
			out_startofpacket => data_format_adapter_0_out_startofpacket, --      .startofpacket
			out_endofpacket   => data_format_adapter_0_out_endofpacket,   --      .endofpacket
			out_empty         => data_format_adapter_0_out_empty          --      .empty
		);

	error_adapter_0 : component WiPhase_top_level_avalon_st_adapter_error_adapter_0
		port map (
			clk               => in_clk_0_clk,                            --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,                -- reset.reset_n
			in_data           => data_format_adapter_0_out_data,          --    in.data
			in_valid          => data_format_adapter_0_out_valid,         --      .valid
			in_ready          => data_format_adapter_0_out_ready,         --      .ready
			in_startofpacket  => data_format_adapter_0_out_startofpacket, --      .startofpacket
			in_endofpacket    => data_format_adapter_0_out_endofpacket,   --      .endofpacket
			in_empty          => data_format_adapter_0_out_empty,         --      .empty
			out_data          => out_0_data,                              --   out.data
			out_valid         => out_0_valid,                             --      .valid
			out_ready         => out_0_ready,                             --      .ready
			out_startofpacket => out_0_startofpacket,                     --      .startofpacket
			out_endofpacket   => out_0_endofpacket,                       --      .endofpacket
			out_empty         => out_0_empty,                             --      .empty
			out_error         => out_0_error                              --      .error
		);

	timing_adapter_0 : component WiPhase_top_level_avalon_st_adapter_timing_adapter_0
		port map (
			clk               => in_clk_0_clk,                       --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,           -- reset.reset_n
			in_data           => in_0_data,                          --    in.data
			in_startofpacket  => in_0_startofpacket,                 --      .startofpacket
			in_endofpacket    => in_0_endofpacket,                   --      .endofpacket
			out_data          => timing_adapter_0_out_data,          --   out.data
			out_valid         => timing_adapter_0_out_valid,         --      .valid
			out_ready         => timing_adapter_0_out_ready,         --      .ready
			out_startofpacket => timing_adapter_0_out_startofpacket, --      .startofpacket
			out_endofpacket   => timing_adapter_0_out_endofpacket    --      .endofpacket
		);

	in_rst_0_reset_ports_inv <= not in_rst_0_reset;

end architecture rtl; -- of WiPhase_top_level_avalon_st_adapter
